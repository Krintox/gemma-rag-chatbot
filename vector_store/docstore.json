{"docstore/metadata": {"db76cb0b-e7e4-40db-804e-7494c22977ea": {"doc_hash": "6576e7babd6b80fc666afe9abce9db93d07cbaac022f536f5544d843c08c455c"}, "3dac29c3-4e14-43bc-bcda-33782b4e87fe": {"doc_hash": "1cfd9bee6c69b7544f2f721234c74c8b3459814942b42c30a8db8d09ba06a34d"}, "4eb28fbc-be8a-4798-be3d-223939be1bc5": {"doc_hash": "8bb433ef292dd081e6e9d7fe982daa8251e842c24882e3a1b22453b96466d7b3"}, "57434039-675b-49cb-86fe-76cbd3e348a3": {"doc_hash": "0c5078c5c64810fe84c3015f82d9af80d55b21b20009a95df14122a1864f3f2f"}, "2a3eb978-d87a-4926-bf4f-62d01c1556a3": {"doc_hash": "d4d112e5ad0a250dd9aac93a0a5e31f661c6c6c913da8a89ea4e60554737d6e1"}, "fad15b88-8ef9-44f6-b688-7566bba1dcc9": {"doc_hash": "ffcf97c99e576b41847f08d0aa68b19a91c09621067ea54e18ee0a5fcc4199c2"}, "03ea96e6-c351-4bf6-b054-9ecca983c699": {"doc_hash": "802b64977a5baaf104f3473d385ae8e555eebd54d296729f2f20bcbff10dc266"}, "56613f9e-2b1d-4fe2-90c1-78684eb17131": {"doc_hash": "0f51ab8d933e0b7cb10438ec9f4686b97b7958326cda1ce87867af1d9ee30c45"}, "e3b9821a-97c3-475d-8df7-6695c069649c": {"doc_hash": "75a997a7e87bd23db5c7bba1e99d75f9db937c7ac46958ce8fe2318bf955f4a9"}, "8caa13ff-601f-4587-b672-566889d79fa0": {"doc_hash": "a661223306e217675638d2403c198aa3bd9fe77b7028decf531771804474be75"}, "363d08e0-fb8b-4c26-9d2e-71f446c37e38": {"doc_hash": "8bfa5a3383a6181244f0d000dca4bfd9c5c5977e07f83387fdca71d4294f2435"}, "0f1a0653-01a6-4af1-abb1-c34192a01123": {"doc_hash": "1d30e209ec21f4b4701fe235fc7d267cb0fc3f8702e13ee50a3097104ac4f080"}, "6c3b24be-efd2-4aae-8743-c1efe69fbc63": {"doc_hash": "ced61c280be31f92aefedd163477cd294d8f87a1f86df605adc0db70a8b5993c"}, "7aabc80a-11ce-477a-85ff-3feefb6022c4": {"doc_hash": "e88060b68ad865b98c2ba9114381fde48c8eb07021c53e01554ce96cc241c194"}, "9c2a47ef-d287-4800-bf69-08d2cbc0efbd": {"doc_hash": "30925a1a0af7d903521f03e34ac1dba60383340b54e972a0a88567905e784a93"}, "725930ab-8faa-4d2a-b4cf-363db2f9752e": {"doc_hash": "ba85e6698c47497c2272e61da8249b857b8305503ea359b19cd4ba6a718dbadd"}, "ce4fb8a9-f259-417c-be48-c8789c324423": {"doc_hash": "c1b12f276fca4862f67cb89697abd1156b095f78df865057c22d4c07900046e7"}, "71c8305b-f0d8-4dbd-87db-6f56a2880de0": {"doc_hash": "4a4de1764ecd76ddcc508b9c2be163b2bed52258a4189267ab84dd7ade4908d2"}, "7c2fb7c0-6e5b-46a7-bc53-b7e891f57701": {"doc_hash": "b70b52e69635e2798e7da1d303354fd2ad1ec50b119886b7b4f6c867366eab68"}, "918c7072-d1d8-43aa-8796-ca9da3cf8391": {"doc_hash": "ebc50f778eb201190d6a032410560f11af93f01e32797a65f0603d90425af310"}, "a9cee286-a10e-48fb-b2f4-79fc0ff7fbcb": {"doc_hash": "89bce27f0825e1fce989b8b2511de05cb53f3fbf647dd7959afc08ad6e5c5848"}, "f521decb-91ca-42bb-81b8-f1a6acdeb463": {"doc_hash": "74418ddbe3e71e7928e6048ffa70c9f9a1fbbe1c7808fc06fa9ff636a85aab9c"}, "c9240459-d289-490f-80a6-b4c7fc417a05": {"doc_hash": "effa5e20e031d021c72d5d2f60d53761599c40cfa86b3c5e0cf5306e29d4150d"}, "2ab95fc2-6bbe-413c-bacb-c8b621cfadee": {"doc_hash": "1973ba6f5301f76779f1c86813b256d3ff4aad7df8e4dc11c8e12dc64e2801d9"}, "5859a78d-4996-406c-b459-aeedac7e47c3": {"doc_hash": "a8817a86336d8a4dddcca092077d26a2e28c53d03eaaf3e9d5a5c384ba4d6db9"}, "2f0f4cdb-2162-4a73-bcd3-d1d99fd4e367": {"doc_hash": "64632ce54eba461242be0e43520283ab116205964a95676c77d3a562284f4657"}, "d7eb7878-9d87-44c8-b188-157a4310d91a": {"doc_hash": "a4e9ec371629482b703d4fb1e5a5a0fa379e3f4ac068272b2b4d5b8c555a39d0"}, "b0eea355-d026-450f-a1af-a854a4e1831e": {"doc_hash": "2936006cf3bb08c212d87dc81ba0089f4039e763ccdafbd628d0b83838856a52"}, "0d02e631-42e7-4bc4-88d2-8eeee9a5f1bc": {"doc_hash": "88b09f4a46405597ce2eeafd4e384a9f26c3baf5bfc29deffaf6e0cda9b6742c"}, "4623334b-26ba-4171-b230-020cd4e7c495": {"doc_hash": "09a3433c183bf8b62a79aef016b831501c5571d673670a041e19a9e9beea2d14"}, "e43f72ea-cca2-4704-9ce9-7d6ca0d97767": {"doc_hash": "1e411d544cacdad303fe46c3ae420b3e9eac29d1308a7a60873544811b769898"}, "0042e0ad-6f13-4eba-a0ca-ee0070520503": {"doc_hash": "7bd1b98915db0322d15ff6cd23ceed8e7dfd51a437909d13a44589a9d0fc2b5e"}, "80905e45-e42c-49c2-b094-d9f9278421fd": {"doc_hash": "dfac61126182b350d8ff854768543a559148c52298281a3cbd28d1ba411b162a"}, "82af4aab-61f5-4318-af34-845dbf2f9cf6": {"doc_hash": "efae7180d60307ba305cc847e866aacf950c1e2c811c9ed6b362dd97950c2fff"}, "161e55d6-122d-469c-b58d-6e6268fde7cb": {"doc_hash": "57283c43dc964416791ed06cdcb4d801d93b5d723dba895969782e57afa9a25f"}, "20db598b-26ea-4b2c-a2aa-f6cbeee26ec5": {"doc_hash": "310b3cd796821dafd4a5862fefe58b76d54035f6a11b5f95c12974452b651fc0"}, "9de51659-385c-4ace-8e21-bafcdbb723ee": {"doc_hash": "544f47da0197c14389ba92eda4062a2eca972b1db4d1aaa38e394423461eac34"}, "095a9765-5d18-4f6d-aceb-b11bfe488f38": {"doc_hash": "ccbd1cf985872ba699b41184a84a0558a78e86a8b50f12a7fea2765aaa858c9c"}, "e1179edb-419f-4bf4-8ce0-276785d40884": {"doc_hash": "be0ea9cbc748b25ca5c2117f4243dc6d8467aa52b5eee9dfb4be631789841ef8"}, "8436d163-6935-44cd-b3bd-a28873ffa2a1": {"doc_hash": "efb4d56ba2f39aaac7a4f31b43c1f13c7e1cc3b2f911e32b9c8a0fb8d7df591a"}, "79473ffa-c9eb-499e-893a-bba37cdb9be4": {"doc_hash": "1d64f95b63cf035d1f4e4ee5d030470d23831ac0e43b0afed851c75ca5bb4f44"}, "d0f36477-c84d-4f83-84f0-515680847e50": {"doc_hash": "35c765febba253115b0145e5f6da5d8af57ba9c14f2e44f030e64a862d65e6a3"}, "3ccad799-5463-4d8f-8cb8-801eda2ce454": {"doc_hash": "54b6d50022037c23aee0fcd2194294d2f47db5c532c5318bb00c8995af1a69a0"}, "21654204-db9a-4606-b41e-f59654e02bcf": {"doc_hash": "775149c020826775f130745dc073c2a5ad3e5392f51a24ff3423c410ed81d5da"}, "bc61e95f-9144-42e2-80a7-c5c2391cba9a": {"doc_hash": "8681de56d25dceac481c8a47463eaf7432e866e24d8f630dd1e2e1fe489602d0"}, "1ad82ce8-e7fd-4b83-bea8-533b0de6d01e": {"doc_hash": "ebe0bebf13e9e6374d5bd2e3a994e19af106591307a8f01fabecac52de2e0b8f"}, "0d8388a3-6b23-441a-9ed0-8d1d3c4dd506": {"doc_hash": "dd0a4968977ff3316f1ffe577e5e5cd289d0704ec548e5488191a60b617b1813"}, "1edf5369-f138-436c-b217-c6cae3594368": {"doc_hash": "10e68a2c271160da172b9ab89bb5f2a5f9d60a1bef3b19a886ae0c3c447dd871"}, "eb7fb40a-4352-4d9d-896e-e6280aab9baa": {"doc_hash": "5cb6797ba54b671967544eb0c10255943d7be04efe5e4e06944586ab6a63b183"}, "c2776121-9715-4263-82f1-f6982c5c2681": {"doc_hash": "44ee62752db8fb4b173aaf1fab3f0a37fae576e0857fb700466528ed0a720938"}, "4f45779b-b106-434c-afba-567bc0e38eaa": {"doc_hash": "dece15c64ca466938a1918e2f5ec766375c0c186a9fd3beba6ba2733fb480ef5"}, "502cb76f-1f1a-4835-bcb3-83633ff0f893": {"doc_hash": "98ea1099bba7a45a0e87bcb34426874d0f3e7fef3effa3554e30d4dcaacd8b47"}, "6caafe20-4175-43b5-8555-af71b26eba7b": {"doc_hash": "ae25f9cdfa133b8cdba5b094251d30a31e77443cb0d56e724d1b72748f552f9f"}, "cf7c6d98-ea56-4e75-8e1a-7409d67ff1e7": {"doc_hash": "96106da38feb5058994480d028afbb029132601b92f21028af16548316494e6d"}, "01d2f9d2-eb93-42ce-b666-7d19edab6b55": {"doc_hash": "778b94c7e8844e9b1ae2583a34ff2b25474efee7731229a384355124d1d51668"}, "d8a5566d-54b1-4c78-ac89-681688ff2232": {"doc_hash": "a21d7269ea2e1397592cfe68f7949d7e05e09c1f026147ad01bb2e0e3f5778fe"}, "c09bb191-7702-4cd2-b6ad-c4bbb70000c3": {"doc_hash": "0debe8668470bbb9275b9d271b40e7435a33b22b27b3842d73f06e58f92383f8"}, "47713349-f5fb-45d3-bb93-54425e866dfe": {"doc_hash": "4365b8635bd8a48081cd5c98a6213d3aab498339cafac72fa4fd89e55735d068"}, "01f7b517-bb5a-4608-a449-283b01530060": {"doc_hash": "13b1d621e89a11a853dade3afd931b1e54407c20db618e93d746d7130cc316de"}, "a37707be-4c71-4fa1-84a3-699f7989ec72": {"doc_hash": "f2ee9ac9365bc47b0af783bcb591598500b00c98e87095ba67d21aea7044d8f0"}, "680cf164-0707-460e-8adf-992cb4372ede": {"doc_hash": "ec68318a346a1c1b3a33a63139bc341ab0d5ff345be6e42ebdd1a29273263234"}, "5fb840f6-b2a6-4793-87a6-2e4dfba56418": {"doc_hash": "acb9856dc4fa16d141a836a8ac99f9c688594c355c19978fdf0530fe6211f4f6"}, "6aff1379-6672-4f7f-8565-1a126fd91692": {"doc_hash": "ef9b896e45d45589233d043f62b311fef2ab7e8e2699dd7b13e713144dc38c74"}, "6d35efa5-1d78-4d6c-bc8d-712f6aede4e7": {"doc_hash": "2bd09b2d2a4160ac0067a8f28fbc88ae4ab9ef5e509b5c73e0c9dd4b46719aeb"}, "6c0e4ea5-2209-4d30-b863-219228260e96": {"doc_hash": "0348c92bda6024b9952fb7734f84c538a4f2d0e1c7cb65cdc2572fb41e92d316"}, "1aedcc24-899a-43ee-9086-3ccdaee16272": {"doc_hash": "74f35357c71335a11019b16351fedd5dc85d59368de95a2a99d11ff013e59e06"}, "c4df5388-8f0b-4c4e-b0f0-aa1c88361f90": {"doc_hash": "b5732aff5c531ae4ded4f3b0b645d0203cc0b455394e3c1348fb3338c241a1a8"}, "5730c063-339c-46f5-8b53-29067b908177": {"doc_hash": "d0121e7105dbca905c531dcc27034f23f09e49bef28f2253bcceea6172a9b1f6"}, "396aa6bb-9f1c-4ab3-a444-35075462f894": {"doc_hash": "84671bc2ce8b87c78232c4351950facf7136cf6b9cd17b49269477b7718b51af"}, "1adea7d1-a367-46ef-b0da-ad544de6ae09": {"doc_hash": "6a33f1bab69f6fd9eaf96d5f8964c0b04acbc36eb36380b559c86df3aab2e558"}, "6973b224-8005-4694-b9f8-b765cb7823f3": {"doc_hash": "ee009a65168b8b462c3247f990c5007a493f09e93fad91e230cb771bf4df93b1"}, "f3e3118e-c22c-4d20-8e60-dc03f69d06b6": {"doc_hash": "a787ca5233086a3ac0226e6711e52f4986b6f2bf7acc53a408663859bc160596"}, "4b512246-a8d9-4e5f-a031-808612addc82": {"doc_hash": "2e085e9a8736b2c4488f8289f6851fd39d3493d4cab80fef18214d3d4c0af520"}, "eacc659a-6a20-41f0-928c-4d5f554f8515": {"doc_hash": "1d6afe6bc761c51684762005b6c6eae32750e8e9d9fbd27dc18bc12e05c31b7f"}, "857c3d33-be61-4de7-a660-249ac65f6d78": {"doc_hash": "77fee741f88bf2d7801099834733d46c084ef89aaa8d6f7a28bdb2d61ba7dfbc"}, "0ba5e8ff-a10b-4a3d-995e-acb7efaa5d33": {"doc_hash": "83922c03eee38403f8d9ba868d451cda8f27cc2e0cd225e8062f892a174f2586"}, "436c39c7-cee0-4ed4-8299-55c25dbc341f": {"doc_hash": "78439aeb69a34f44ba8fd6e2e40ab0e81f81103204ceba99fc224ac164aa8d45"}, "0af0d4a3-c661-4ccf-90a8-5bfc5ea79af1": {"doc_hash": "f68bb45e9a9ec932cda3a633531bf948ea179211d75f4f58ea69055564230804"}, "a1a62f1c-3963-45fb-a51e-7a61f29ae0d3": {"doc_hash": "623f7bc24e6356a817f807f26fc1ab9cc65679ee84eb73624a395aae7b3774f2"}, "732e8b8c-1a07-48e3-84b2-b44eda8ae17a": {"doc_hash": "49e73c2358190d3a26b20554c8bf471c73a2d474b3ed43846f8c96f574e54564"}, "7e57de75-5c94-4914-a99a-f4230b2f0dd1": {"doc_hash": "a783b908944f919423fb9d47095536666ee1194f125be943bc153ea30808cc4b"}, "1aa7e01a-99ac-4ff5-a85a-070e951fd07a": {"doc_hash": "f84e8104b179241c83fe23ab1365aa5f6560e56d733dfd94c0225e179ba4df27"}, "eda820d9-bf1e-4e65-9963-0ae2d03f2508": {"doc_hash": "6810e44eaad601af86cafc2ef437ae4b4a79b4994626054a6d04c6ae9f70b458"}, "85e43d90-38ff-42ab-8bab-47bd4804eb15": {"doc_hash": "f7d8bc815c2396fa6d16f096e515aca1cc79c179f5574d5e8a40eae45bf2d621"}, "f0d06ae8-be1b-4b7a-8ceb-4155b5f5c3da": {"doc_hash": "0bab806565dba139db38f284f17f55a0644f5f895d467e5f93022a1cf095a009"}, "3df45d45-aeb0-4729-8100-1fc7c872e758": {"doc_hash": "ac073307a6369b8a2a027d19aab17bac6de973ed1b6d42324259ee03c5168237"}, "8caafaed-fa69-40f1-957c-5dfa0b3f75db": {"doc_hash": "f5ab0c5658ec2e4dfb7a46cb00cfaef8e80496c0ff0cf8f054f05f6e13a5d206"}, "d8c40a68-57de-4f8a-8636-08575d3f58a5": {"doc_hash": "0737aba7a2bc43b893fab1ac898ae8ed9f4fdb9d15e1ebfd1d2c74efb5faab21"}, "ec47f889-5b45-4978-aec8-979026432615": {"doc_hash": "a8e2e030ea089917e4988096c1c8a72960850652af5fd789d021a667e9e5fbc2"}, "9c101772-2e3b-4697-99ff-759843706198": {"doc_hash": "6bfa2591ee42a6b62f5074d17785aab95f06f1ac65939462644b53577a74676e"}, "17b2bc7b-375c-45e8-ab6e-bdfc8b5eda99": {"doc_hash": "11e623aa92944548ff17235b4409d43cc2b83bdb5671dd119b8d93fd02a4b0b4"}, "e4c3482a-23dc-4726-aa10-6f879255b476": {"doc_hash": "27def73cb4534a57996b126f6ae4173ac4400872a28f42c67a8062677b402d4c"}, "38f73c67-df23-4371-a305-9e9b205b443c": {"doc_hash": "7374d815b433540a7e4f7aa766b4dd04bfc54bfcfa487f10845b83b22350df7a"}, "8db0a2b0-6142-4fc8-96ad-9f87d8ff1bac": {"doc_hash": "73c0fafd6f1db48eca9f9064d3a1fd13bc05810283cb3a35208ac751caf35e89"}, "56785bdd-3dd4-4f66-882b-926fbfadc611": {"doc_hash": "a2be2b48f3abcbc39d6bf01a445f68dd3fcf3c452db6ed93072c0b0785880878"}, "91e75d1f-767e-43f4-842e-ff7824053d19": {"doc_hash": "01baa1c0e34dc7d7384fe3a45f81ac87a0c03e3462fad926fed0830686964283"}, "41ba24ba-a8b0-440d-9a5b-2236e072b3f3": {"doc_hash": "9868e27d919c0d16f0783fcf30ef7a1c2751a1b2754bf358f119504cf4d8af95"}, "b6897aa2-908b-4d5b-8161-fb8ba69b9149": {"doc_hash": "efac2e9b6a17716bd3011755d6c38738f34642dbcdc074be8be5e69636a3d921"}, "437a5ac0-36e3-4349-a979-08267b3aeeca": {"doc_hash": "82d3271ed47076faef1bece0744f020c6ca249a16ccddfad60beee486986fdce"}, "e5b83dce-b00d-4752-9fdf-3b7a449dc762": {"doc_hash": "4030bacf43df836dc2ba7c4a27e4c42d813cd3b3dbd41f2adaabd903176ec4d2"}, "78a495fa-cd26-4dcb-9142-1866d4302537": {"doc_hash": "54496a6274d0b65311c33757315b230496c78d3b46fa2d25fb2b59ad8a975644"}, "5c8cb371-cba2-44f8-b716-f242b3002cfd": {"doc_hash": "24a2820b92509b68b1a2df1a52cec433be64e78c10557955d05ab795b9b8e89b"}, "49f5f0a5-a4c8-4c29-adf7-ecfbdbc03972": {"doc_hash": "edb5e7a6bb2c9f4065ba282311588d22628c9c91d7cb05610ee2dc2268dc97f0"}, "d5b24b23-5036-48dc-8708-24e12d404eed": {"doc_hash": "abbace5092f7a6aa61c19176284fe3e14a2818e8254473fea949a97625a501e5"}, "c2ac627f-466e-4556-8114-60ae785693cb": {"doc_hash": "21378ffa1ba5a49fa941e4afacb1dfe3d2a1b089b102bb94bf75326d15570849"}, "7a1ad0aa-c9ad-47da-b323-8efab5f9f343": {"doc_hash": "3e82ccd75871f1598c9fcd17a36d04a23ea27be4f4571822f9c636ae425eaf77"}, "30038fa0-084f-4a4a-bee2-b666edc9e4ab": {"doc_hash": "582077f4df96a089450a47af04cc1cc52312815d3caf47c2a01a4f24c33fe3a4"}, "de833d5e-a605-4832-815c-cd6abca04310": {"doc_hash": "9724b751e78994eaa45e647d6410f3c9fb2d478eae783f93969a5a9d6d0a72bb"}, "35d95470-567f-4933-a765-f45d419d2568": {"doc_hash": "bc9da0d7316cf0f90cf8beec8d4cdebf7a679c3a289bc938693bbef7a08cf169"}, "6fa3c1af-f6e0-4f82-84b3-fdd30a795c3e": {"doc_hash": "5feb15fe9e25b3f41f0f450f96e1b259b86d0da99b70ef1862a294291e44b3f1"}, "3742b12a-3339-40c8-bcc5-c748f4fa9fc1": {"doc_hash": "a33acb0f6fce4a2ba38166d2ebbfccf4e4a300c588655f8275723f7cc65e2949"}, "c0d228df-a7c1-4927-85d4-8cd6b473b8f7": {"doc_hash": "005d1d538069439d2e9d3a1d45b69a693d4503f60259ff113b451eed114b1077"}, "ff979349-e5f6-46e6-9a87-7ceff6bba0e2": {"doc_hash": "fe9a98f2157117db50a1b57dbff4689ab0c3b4d9521b591efbd0c57231d5b7fb"}, "334a6b8a-f16c-4c8c-9a00-cd1c1f3ee03f": {"doc_hash": "fbf71c53cc333133d5d19210ecc65b42e51f871f8d031868e528bef6b71abd43"}, "c89d5054-5b3a-4ec2-a92b-14c76d1b9615": {"doc_hash": "8811d757e328ffedeb0aa90631dd2fbfc7be1693905a7dded9284ba578f6e19d"}, "14b373c4-3720-469a-8224-99899644d57d": {"doc_hash": "0ee53147fd11e76c81b3983108c1bed1adfe8d226883f40db15f0ddb7695d9e3"}, "e7794e76-fbf7-424a-bf08-d9dd3590a621": {"doc_hash": "568bb851179d10d3eda79d79f231a7cf9139b0ad3d80a350bf39dc2c7c9a80bc"}, "1cc23a70-4b43-4212-a375-bbfc5a4e9426": {"doc_hash": "ce70299dea94182a011e99844c367ffc154bf3168403616d82e21ff36482e38d"}, "5633fc5d-f40a-4de7-8335-8c03078c8daf": {"doc_hash": "6ce6fee95a476204c151f69f52aeca34edbdf4d7cb83e31981160f3da088fa76"}, "3765e01b-6a4f-4513-aad2-71609f8da0fa": {"doc_hash": "80901a2920f0c67a3d29dcb945e4b185ea11ef38672413001cfe5401390654cf"}, "b15da2c2-30cb-4527-98be-6d88db0b4395": {"doc_hash": "699b48adab3e1dae3cd27c0b8a9fb15851c55d277e41f15392ac478f72eb5f8e"}, "835d4b08-2460-4c21-a2d0-c22f9654cb2b": {"doc_hash": "6b6613543b94c34bd7ebd7be05b8af598155bfeee451929e686f1a16b4748b9a"}, "9da4e4a5-027d-4fe3-9c0a-bac394f15ba6": {"doc_hash": "56d9576a3dfc7808c3d46b0c1727f6309010bc2e3bb280b256d67d7b1a136bfd"}, "b2dd5101-bb56-4a5f-846d-7aa2719d03d6": {"doc_hash": "cb718d51b92362707153fab5570c299be93defc2d9f677bd606618fba6bdd9c7"}, "326f55a3-634a-4a47-bab1-ac95742d3e7e": {"doc_hash": "0360b9163b4bbcfb2d8fcb3072033a41edddfe4fa0841e77a4868478d8c44125"}, "7a0108f2-e1e7-473a-8d57-4780f3260827": {"doc_hash": "891f89ec0af4bb4342683c075c921945374b4055a9f0df271e721dbf5444341c"}, "818ee6f1-9056-41e1-909a-b85d19d347e6": {"doc_hash": "aa62448d45807bb650018c914e1bcbd9946e0e979b17c6d42da59df0a4b26e40"}, "3e28515b-1f17-4768-b9b5-abb1d7ce64c2": {"doc_hash": "9acb94e55fae76c77f6cdd300646276265b778246f5b1ebf1f727c79e1402878"}, "e8f24e4b-5033-43c1-a776-8881210bf773": {"doc_hash": "5d551ecb5a33bbe2b9fa56db3085384ec0f45a697ca626e9f8dda03849df79da"}, "cf00eff2-0dde-4432-895f-78670ec7a20a": {"doc_hash": "7904d832b754d40e532cd5ede8dfbe1309a9af8fdf8a2fb307ba33057712779d"}, "5fbd64fa-13ab-4269-ab1a-560bce1e5fa4": {"doc_hash": "22f816b1e46115be1d8768cd0ac214a65921a8b9a50923c5dd0bbc4a177a2dfe"}, "841640b1-f4d4-4a34-a168-40525c6c315b": {"doc_hash": "896ca5cb1846d61b99091ef5a16ce95263571cd28da9b6a8f26913deb3679ede"}, "f14380d4-68cf-40c5-bc7a-a7d80bdc8caa": {"doc_hash": "875bc949c72e977039d51984be115dfb6e6adb08307bb53631dc637c35525185"}, "4766fc13-f4fa-45f0-8823-3fa8a0b57911": {"doc_hash": "2c3a067fecc331b1210c48b00f1074593f14c16d332c1adf9f9cfd21e2d559bf"}, "b436a8aa-a87b-4a7c-a178-1a5ed4dfd923": {"doc_hash": "cc22dc7198f115dd91c603ace0354b50a0cab57a764b136b5c78617c0c115a40"}, "25d42177-d6d8-48cd-a947-26d297445af3": {"doc_hash": "848f5f06e14fdc6d7a3c2ef970f3f531279004445e0cacb7e4c6eca95c7d9493"}, "eed0deb6-bfaf-4ddb-9fed-9c2e509cc87c": {"doc_hash": "058e031479696d4328bec408043075adfcd43e562eb307557d2a3915342067fe"}, "20b07551-e726-4cc3-aa1c-d6181269265f": {"doc_hash": "3d186aa5b1126857ccade7d917c5e47d9968f7bdc2fa83eb2c379356efbe8129"}, "348a48eb-dbd7-4679-89f0-8e0a433569cb": {"doc_hash": "561bac3bc55da4cf49765ee26f6321673b52e25235374c5fbdf5b3f0d4a42901"}, "bbfa7841-b8b6-4a11-87ee-9aa03ae449bd": {"doc_hash": "57c2d09da28538a572bf59dbbe97f39f083809834213893559b89d53bab93431"}, "d31664d5-d3fa-4097-bd1d-07e4621dd930": {"doc_hash": "ade452db5aae629db5d19edb28bd646ad4db7f9991168dbb72c7056452fc5ca7"}, "8f00096d-db1f-4317-820f-d1629dd43dc0": {"doc_hash": "e61cdf36ef0a7bf0bb8d029bd5a29dd89f87694f3b858a6bde73fcf29fffa416"}, "5e423cfb-20b1-4776-8485-8d6444a56c64": {"doc_hash": "506c783b0fbdd5fc657c723b8454fb0bad7584f0ef5d7020c76a673f62a02d2b"}, "3dcafa15-432d-4f13-9897-fa1eb2cfc480": {"doc_hash": "a3c75196ddcc85c46a5ad59e225c567313f3cda52dd1f4ec2f08da94bea41e90"}, "3c8d66d7-9dc8-4fc9-8774-d2f4719d57af": {"doc_hash": "7155c851cd13a4b1cf8701a51394d582bef03f306f4e3b0d915142e92ff513f6"}, "aa60af45-ad45-4c3e-9c76-f9bf7a54c47d": {"doc_hash": "a95c15b7a494c1b6caec7664118f1ac0f9245d83c197631b36c517db130c580a"}, "ed84d867-1fcf-403c-9973-0b54d2b70508": {"doc_hash": "1424d1c4183c9b375242ed9d587bb023dc4f88843f029f4f3d43b019b2ca160c"}, "c5e7b84e-209f-448a-ae51-60b63ac6448f": {"doc_hash": "d1f12af4bdfc053321db46d035181a5c50fdcf3e1fd2d38e92c104c4874aed7b"}, "3830a3e5-df61-4614-98c8-db99a6a56921": {"doc_hash": "acd9f034645b4b6cc52f556811a412ebc649e29042cbd5dd4c30b1cf4b9ddea6"}, "eddec76d-0f1e-4e49-b78e-e333e0a51186": {"doc_hash": "303ac0934bdb1c143396b0c9510cffc098e97266919dd54a5b5f7a65d0361144"}, "8792f095-a0d4-414d-bc50-3ceb326f1378": {"doc_hash": "f8aedcb58b2bd298d29433b2711ec067c5100412eae1e07c132458921ae3cbfc"}, "3fa2f7b5-64ad-4b92-a1a1-e2ee5d78eba2": {"doc_hash": "2e7b9f196f1daa3925301abc815130e73c0684016e271b50fee08f9584462b88"}, "d6add2fb-aadf-4748-b00c-2653fa8688ca": {"doc_hash": "0acb0bc31f562206b1ecf08a76a9a491f85d29515ebbbfdbf69d98a303fe74a5"}, "869cac80-acef-42eb-b1d5-826ea0ce9d34": {"doc_hash": "d982f4c662bcd1fde3979d60fc6fec6516ad4002890454dbad706958d3675062"}, "bcc9d47b-f9bd-484f-a5ec-189792fc5d3d": {"doc_hash": "e5f098468380128fec157efce98c4afb6d98d6d8d40754c3d0c494bda3b951b4"}, "38f3bcf4-1628-4c9f-a290-b6c4c58728e7": {"doc_hash": "fcdb60263d6c3e344064f19a6e428c95d1e9580de934f82a7dbd88b8a4a718f1"}, "4baae727-d6e3-46d0-8666-19a8053866b2": {"doc_hash": "c580fb9b113b2ffb7fcf2ded72fc0f2358e5951c411d36d20dd0536f9e1baa99"}, "fad7eb1e-21dc-4884-839c-77b8f0babb5e": {"doc_hash": "44dae11bb4487577b251286f23dec1ef3ee982789e03b2c94c9919bdfe930adc"}, "6f4a4486-1ffe-4b24-b253-a7dc6204be84": {"doc_hash": "162313ed58c7316a123d918635adf97e398f6f2f800a01880e12513630d32a4a"}, "f7744244-7a9c-47cd-a937-f5571e847db8": {"doc_hash": "92631cee93eb0f69687d9a281cfa50f3c783af9715a2997edf5b79f5044a683a"}, "7e651ab0-d8b3-408c-9845-cde29604d0de": {"doc_hash": "8033f27c6acbc8f9654fc11fdec2d2f0dcbdd34af948b9afc8b4534548367a72"}, "6d377472-6fd4-4a2f-9520-00fc83f3e0b9": {"doc_hash": "f17fafc7a6412ffa3725444937146db9460c084d9705e65bd7ba80c935616405"}, "ef7786b5-762b-450a-a5df-946db2e6613b": {"doc_hash": "9b77228a1be3e08e959dd60a2dc1c48adb0822839b7595b09b0b6da67f7bb50d"}, "b4831ca9-340f-4d98-bd7d-40831485ad72": {"doc_hash": "29bee6a5bca338b39254d9fe6124b367f2272bec515076a842f88c49dbeac2f1"}, "b2871e88-63f3-4547-aac9-923892bbd446": {"doc_hash": "b8ea822c756ea7648d09552c3d51a5a233ca05ac7442d36bb89a522ddb31fa7e"}, "1225248a-38e7-45aa-87f5-94be3a256d4b": {"doc_hash": "2abeec37b7753ff6131faaf8cfb4081ae3cd8b47fca979e23ff8ec9629588d5e"}, "20261848-b2e2-41ef-b570-2e7184ebd002": {"doc_hash": "9a5028b1af3485d1d859c561bd1dca8bccb7973475681e80b68f0616450849cb"}, "064a3061-81fa-4d8f-8bc2-1c9f6b1fcec4": {"doc_hash": "677595548bda7108b07bbb5a074f12ab091bbaf2d4c35425d1a4c79bdd1118a2"}, "82dea2b0-99d3-4e05-8e0e-20499e411536": {"doc_hash": "4fe38dead67beca7e2313ae0a1edb922dd38bcd8a645fd32c202683dc921b81a"}, "6b67c575-de4c-45af-8879-de685f2fa07d": {"doc_hash": "59a7438e9249388203da29d337adb859a4805b9ddb3cf9f3fdb24257c77aca87"}, "258c0db3-3db0-48d0-951d-d41ae7eec8e4": {"doc_hash": "5349880c3e937ed7b172a31bc25073a1fdd4190edd8e6d1dd44086f675d8991c"}, "1950d2e1-3850-465d-8ef0-503f60fda535": {"doc_hash": "8e34bf806aab9a6b4a148679c95bec0138a4212a8f2badf3979b58d38b544117"}, "00be94d4-570a-4fa7-b418-269d5483bdff": {"doc_hash": "54bff1a4fb335fff819d48860b06a2f5ce64b6aeda0012e78a8d574d4c80c8c5"}, "e98581f4-a351-42f6-9360-96b73bce7805": {"doc_hash": "30899f05c06d825f767484e344e88553a3d24be34a6c2c3c808c0e2bf60cbcec"}, "dcae24b4-d978-4eb9-9f12-69ba1edebb33": {"doc_hash": "48e19b73ac843459aeb23889f8fb0dc2621620cbf8fc3054003099eb8381ab40"}, "4897a1e8-5167-4ee3-9d6a-62bee579eef7": {"doc_hash": "6e9a4a88c6208c432d7779a18ba762725b3cdae9cd9c28e9d1e669499f46a5c6"}, "d372207f-2f02-4f53-9960-61a7c40bbaf4": {"doc_hash": "952c02c43acb59eb1eb29da48df1b36a34a90c1f739d89c6653330d5594f7f44"}, "5848bd23-c11b-4bea-8e08-8e4113a55a84": {"doc_hash": "ed2bf3e12d0e3c93eada92e3367c59282464df925da4ddeb1d0fedd84d54fc7d"}, "5f735931-1250-4e66-a41e-abae1ba486cd": {"doc_hash": "ee18f3e9f95f4d1a0e85e74af1f34327d39676d83c0f4f275bae28b2710900fe"}, "b3f6032e-a718-458c-a072-34c5efbf0d87": {"doc_hash": "836aa45433ba217ee76662fe25e95038a8b7dc90c91bf3a826e47457d7dde6a6"}, "3a620500-42fd-4cd7-ac2a-12300089bee9": {"doc_hash": "562d3ff925f162470288f5fca5908679d364c273d274f2b154965a7f36ff2635"}, "d8718249-f91e-4923-b9af-fefea8251c42": {"doc_hash": "f2f10f1c84643f21ac18e789b6f4743750030b9ffef75b21e04bfda3ed7d76ca"}, "5634f18b-378a-46ca-87ff-cc8eca927009": {"doc_hash": "e72cc46841421a7c2a6bfac830f867f3301e8a8eeac7e4376091b1d17d06ba9a"}, "563e0d76-594e-4a2d-935e-e1429efb7892": {"doc_hash": "b770f3a0659cd51d07deb03360897cf65541cd781944fb1d40f2e342444295b5"}, "3ad79ddd-31af-4a91-89d7-ecc2fa25dc51": {"doc_hash": "9f264d3561b3a969663f56e517ed98361d69279b26509b2590e8e17857ee07d5"}, "daf465f9-90c6-48fe-be55-3b0709bd1457": {"doc_hash": "116757ab080bfbe7051de584877c8db73cb1a9c78fd1f70bd4151e32af8a6298"}, "416d1dc7-2a52-4cae-803b-3db1cc81dd0d": {"doc_hash": "195ce85b30022ade79ef7eebfc55215540f66b6fddf7cfad969cb7822015d62d"}, "d2d0a46d-ae2f-400e-944d-09347e4ae23c": {"doc_hash": "cd3fbd37af1ba5877a9df929e7dfe6bfb34ca42bf2ba8288c5ea1cbc97d7fb5f"}, "a05c800f-72da-4322-a762-5100951c04be": {"doc_hash": "7724ed72849bd83fc76315fc9449870e40fa232bbd7ba6e9a2e61ede7e12693c"}, "d07f0cb2-ff49-4f57-b12a-ddf60b83a1c6": {"doc_hash": "8f7f4c75e54c3242c59308788fa8ac14cdae1629b3b065a34cf9359c35a3e28c"}, "aa41df2c-0898-45e3-97b7-03d5aea41b9a": {"doc_hash": "3de8379b59163b7c98ca6f6932c4fb575e354f748dacc204403853cdea5fb71b"}, "82673f8d-8a0c-4ffa-a97f-9ad79fed6cc7": {"doc_hash": "9523f5519e45a3ca674c79e5ad4b0be5ae29f504de9c97d3f8f527ede6045a1c"}, "eac979ef-1d4f-435f-a3a3-6548688be4af": {"doc_hash": "8bef552d433d2df0ef5ea0fcf6113973ba4721fb996a49da7490ca75e41ae53f"}, "14283408-202d-46c8-b8b9-974286ca17e0": {"doc_hash": "ae34d79917fa60646ad7309d2b15e235dbbd2ed08118ac9ceb2a5e5008081377"}, "d984b114-6b0d-4e7e-9b58-701adff09c52": {"doc_hash": "201b6c96e51e0422f2e93a2f8c7825b3b3baad9aff3cbed08f7693d1f59f5c44"}, "4ab87cbc-38d8-444e-b299-4760ecc95850": {"doc_hash": "8f09768e15c3175bf873a245001b6790967eb7604d8febbb5f91446bc1269851"}, "18ac86b8-11df-4eb6-af7c-9d9c01d214e0": {"doc_hash": "86ff863e9acb8994f14eb644bfe7f735f393552c60cdea3aec7bcf85b06f13ae"}, "7858349c-b77c-472b-8df6-a26066c7d451": {"doc_hash": "4a0119cf4663d45de7271e27b3c0b4c3ef11eec055f4b58fd9c1051aefbcd172"}, "93ac0b73-2e13-44ca-8ec5-b1e161740190": {"doc_hash": "82b273868deed439587b4ea6597771a780153b439850d9d9a3305ca5e6918bf1"}, "a5f64832-b415-4443-9e20-c17ca0ba0529": {"doc_hash": "436169b32f71242322458ab2d69375323016e7212cb3556bbde8974f30775d29"}, "bbe439c8-c461-4e00-86a5-76118d74415f": {"doc_hash": "4f75a7ff682ec84c7454426ff38eda9e34e2b552b9dba24af28ad4e1c61aab27"}, "7aa0df53-e9da-4010-b4b1-d983e02c63ed": {"doc_hash": "1e390c244de523ec25218ef5a7044166617108c1e8eb13bfb17769179371db09"}, "a6651732-3dcf-43fd-b7ed-029796f62563": {"doc_hash": "4a8143ec4bcd0d5b672b80ccb1adae12f4b3c21ceacf6b3367c02ed78db66aa4"}, "7df2878c-1bb5-4a0a-88a5-36436e70df85": {"doc_hash": "87fa88ff59971bf01e7e378caa75a15d767e690db9cec19d6067fa42419fe54a"}, "a81c50a3-f9cc-4743-a3a7-820c92335054": {"doc_hash": "85e712ddb83fd5a7fc77dabdcfd79326872d2a9445a91fa23ddb7b6df245e2f1"}, "c70825b3-ac02-4d9a-a32c-4b0dd2a5f234": {"doc_hash": "aebdd53b929edc17cd7812a37f0983c90e1acd2e4730883f032653aad851fd49"}, "fe366e48-557e-4c14-9205-1081e4638421": {"doc_hash": "f9e861fc00e7bcc2ba9333c7d6894604ae822c6e4a2fdb8944ecac3b404a430a"}, "65a54a9c-2772-4248-ae98-3ee4d1074139": {"doc_hash": "6352f2e9cbd5fca01aa9f24ed544837575d56b491e56440bc487d4ab0d53dbd3"}, "6a9ab7ee-d36c-40c0-be21-ef840fbca72d": {"doc_hash": "04296e0d64c2302b608fe97aaf001048715d5d6763cc70835b9cd02d86aba8fe"}, "2c9fa6b5-0991-4eb7-be61-78c2938cd45f": {"doc_hash": "ec5ff3ef5d247f3e6a62312712e178f9be1bfa09b08ae8566288b9b7d41a5fa8"}, "bf407efa-1dea-4775-ad5b-0d965218950e": {"doc_hash": "4541f51cd557ff7ddaeaaae78ed45c598d62203bd81d7b7cbd669895b7d43baf"}, "ed5f81a6-8811-4c56-897b-d2a32890474b": {"doc_hash": "c464482c48e1fe0b31de700d16ba0d9dcacfdc1b660b150e4d241b7e6f295706"}, "bf1c2921-74c6-46c9-80e2-3e431c4eba3d": {"doc_hash": "1623e0044eaff2dde5c55734c8296de70a78014ae43a6f589de3f2b54eb6a219"}, "b56a82a2-c770-4bb0-9ed2-cf3b2d7672e5": {"doc_hash": "27eb991d2bab28d15c4d59067af069cb185ea02f251dad455f06aed361b4beba"}, "a75b0140-98ed-40d4-ab41-cdb883fe3c59": {"doc_hash": "1b0f27cf1734eefe8b5d4c3fcc54ea1b3eec607ba9932e33bc95697f9d636a07"}, "8fdb6043-e331-4fd4-9ffd-9bb9e52e2b2d": {"doc_hash": "fc4beb3613ec073fb12f3c87b0480d7e4e74557021e7bcef7f88e0b5c5a4b4c0"}, "982b14df-9540-49fd-b6a2-ee74b64e2c2e": {"doc_hash": "a2db988f895ef9e46c9c5874c97fdb9144d08a4deda53dc162807f38aeb2e6ca"}, "4438087d-e9cb-4d1c-90a6-226b4c818653": {"doc_hash": "4ecd4d0acab85ac0c38b1efc849287058439b7794c766e634bb947cb842af914"}, "c0814240-59b6-4478-8800-c38aef5806e0": {"doc_hash": "6f8fa4d844c752840de4eaab968b9d3ec424ef564ba0968f7a75c399ebba0306"}, "750d2afb-6154-4bb0-b75c-94350ab24470": {"doc_hash": "dfab3b75492c42582c47a7d82eb796d5407e37c6b067c659ffeded01417afcfe"}, "8f43f7f9-ca83-4ab3-aaaf-3223bb9077f3": {"doc_hash": "eb83f9e28d00aeec4215a7609e13352e977a54d790b7c9fa1b3da89f41d6280c"}, "3d77817c-7b4b-4b7a-9372-a658604199a2": {"doc_hash": "9fb7ccb3f2963015c21928cad80f581a1a470fe2c5470aeb6a0068ea7b8658a3"}, "a3d83e46-9fed-4c80-8d56-fab85cee6602": {"doc_hash": "1e4697f97ad7f345d57a62d70f3b2fafa2822aa5fdd932a267f41d49becce89f"}, "99f40ced-435e-4b29-a537-1ca0c34d5f67": {"doc_hash": "09617ce1c0a4909bdfdb376ff62667132e038ee8ce3f584672e84e126ff7d4c3"}, "c3f51d2a-f0ce-4002-a9d0-008c5b176894": {"doc_hash": "53032fe45596afa2e65914079e1d8857fce1b4ea70f38f9d343fa0e997ba2bd8"}, "cbe0f994-ec34-4ba3-a98d-7ca62142e9f6": {"doc_hash": "f7f6b0608704281431566ea5ee4b3a3f21f302db19a02236bc4a2cd6c7cd8e72"}, "c9a9832f-b4d9-466d-9819-dd6a7771732f": {"doc_hash": "46715b27a08b225ad02e6f2c60a3dc7bb34995a7004135232450848b2f471faa"}, "68066bd9-2ddd-452d-b7da-1b861a1a9fd6": {"doc_hash": "6c5f5477b3418ee01bb3eb28cbcd3ec53a60eca2196e3706bdd9888dd134f3e9"}, "874ea894-10a7-4919-8aab-65e5b9e17ac8": {"doc_hash": "15de52bea4111284b7d4fd5c6e3cf05d1a2ed79370c0247c297bcf898f335ddd"}, "bd2b2472-7708-4bc4-9254-616396329019": {"doc_hash": "85cac0fc69d79bb07747fdf0124afd4344084ae7884e64b2f26902860c84ec14"}, "c0c5908d-b277-489d-9cf5-131f84ff5187": {"doc_hash": "36b2c03cd012012a628af13bc51655441a8adf177f867cfe22a63da39abe72bd"}, "28219316-9dfd-460f-9c8f-8ed3edd00a94": {"doc_hash": "cffad1dfe5406a2414496685440d697b5d65bea08cd3ed10d82d27c147edfcd0"}, "82c2bc05-2027-4011-83d9-5e18c25e686e": {"doc_hash": "4c7ddb7e9882cfc173103f8f9d6329a7a5e4f4ace852e223b23902621e1aadaa"}, "da5523e3-b933-457c-a9a8-c93d97ce5d16": {"doc_hash": "8ebc329b9c21e0b1a62d7b802750d8f5c195a2e271faa59509abbd5479ca515c"}, "d50252db-c228-4d91-b27d-43e8634686d1": {"doc_hash": "d680242724bd8bf89334fda02717f70153ed5b14088dce0864401918b4378f68"}, "3187257b-50bc-4c1c-b2a7-65bd975d117b": {"doc_hash": "1c489ee7cb3a9fbdd52352ff99153aa644a90152cbc78b47055cd4222c0cb72d"}, "8750c1f7-50cf-4cca-bed8-6ce5571083d7": {"doc_hash": "03eaf1641b3837e2073e0c9d9c6909a6eaf2b8a78d251bb7e86a22f40b7849b5"}, "c8272ec2-af00-4249-9fea-1e1de93b9a91": {"doc_hash": "ac1330d989bd335b9d5335d388c3988f45d729807e7031177ade4e1b18c2b8b3"}, "d20c7ef2-3cc4-478e-8021-a9b33c87b5ac": {"doc_hash": "cd342b6c6d679b2533ac9ff4812e0e79dd10350e30a0129f407178b412c86232"}, "6b688319-9cd6-4e69-b923-56c34d13a703": {"doc_hash": "2b7e94c7b88456191054d3e8db54a1377b73108934846dc7969a27b6a40861a7"}, "b24f9350-12f6-4b97-bd8b-a64425d0c89c": {"doc_hash": "7c7982eeb347943cd56a8814fc327688c44e647eb47c7e2c7439088db02951fd"}, "21c17c90-ab28-4faa-828a-d0b095a66af4": {"doc_hash": "2dd2033a3f4b100c23dbbc49c68e7bcf2f0f2c76c762cd5ac391ae796b62c159"}, "06c7d0d7-1037-4c50-ba85-5d0287cb80d0": {"doc_hash": "965c3fa98818b32798444fbd2354b9490a46e02d8448273edfcd40072be7e518"}, "6cb32b6a-8d69-4213-8e56-2475e553b488": {"doc_hash": "a220433a95062f0039de9009fb645350622a2f9cc6ce3555032662bd3654fbfb"}, "621417a0-fade-426b-a9cc-0ae16f8eddf0": {"doc_hash": "f4ec3afc247cabab73c8a5804251d89564af74aa5c3678519d328bee445044db"}, "c21c4975-ac8a-45dd-a918-7adbf9276cfd": {"doc_hash": "6edcf530159fceb0dd8a2afdf2a372d79c8fab8a086079fb9c669109603d21f0"}, "9e13f3f6-9a15-445a-b89b-94064c440deb": {"doc_hash": "09a4429d6aa284ea53414d7dfcc59ce35e8c89b666b69768263b815d83e773fe"}, "38d4170c-00d0-46d3-8f53-bf0c2d5cd615": {"doc_hash": "6a02b8111314d7d893c466724cc2f146dbcc5b71a9f410bdc5974f8853afa0c7"}, "8942beb4-06af-4791-bdb9-ec46ce5af85b": {"doc_hash": "4782bc1313941f8462ef607a4e317374d64765867e0d7cc4cf43e1bc9122890d"}, "7d692460-1447-4c90-ad40-225d06e3c6e1": {"doc_hash": "f5a4934c6efef76c924187cf58cd1a9e297a51ad5f1c894ddd434e6045e0471f"}, "6dea04da-ac6d-4810-a820-a663ab293c55": {"doc_hash": "973b155bab0040bb6813b713856b28112e7f99c2771f31a67009242aebc6a1f1"}, "febd701f-eef3-48b3-95f4-28c343f9e48c": {"doc_hash": "3fcf7a5f3aca3b3feff7a7a8bc7bf1e5c1442081c45448139b4b8612cb7c1a40"}, "1c331643-ec85-4bd2-97af-17ba1d238ac6": {"doc_hash": "a002219ce1c2a728cc9ea02a692a96bc1430b141737be8ebb9c521aa6ba21346"}, "11b6d544-fbeb-4fd2-94dd-64e81b524802": {"doc_hash": "1a9f8bc1c0ecf2a2fbe57f5f507942f3be6f45ee8ec6e0107b0321a5c594c0a9"}, "ae53d6d2-8c67-45f1-9c9a-96e927b6aa19": {"doc_hash": "bd5c2a0cdd4040fd3a2c9cb46b1be4f1bdf54a4e70ed85cf70ea6ce79350f31c"}, "c1e9ea9d-10e1-4477-b2cb-2db25670dcc5": {"doc_hash": "a13c45fec74e01df749e31255a4d49a1e5c03ea7c5ff0846b9425a19001e38af"}, "1dd86f1b-f223-428a-be80-4977f47aa5d5": {"doc_hash": "6da51a1048fbf7397ae2231e3a4a4abcefa4dea971ac5bb1e620772cf341636b"}, "69f37083-fc6f-4e7e-ad0a-4338b6a58039": {"doc_hash": "bd4ce6926041ea5865bebf784535954769c84a84f48eade7cbe0fadebb17e2a0"}, "17337504-6eaa-4c84-9d8a-bb4ca713a4f5": {"doc_hash": "fc453b986e8e3771214a61d2d43c5fd8427e1b78ef1f423220b90504a5163a68"}, "4a2dae41-6db6-4a38-ba4a-baec9d4ab4cf": {"doc_hash": "c5873744b5f0cac3ca9a212800c8a65df926d38577d3fbd0154205fb85bb403e"}, "67c7361c-2a01-4ab9-b72d-66766a606d1b": {"doc_hash": "0d61fbbda0b102fa630d484f464cea1e77cbc3d0579de1c364a19ee7dbd69a95"}, "3e112cd4-9008-44b8-8412-a4576ecf12b5": {"doc_hash": "8a49960c0a31900043f0257043edfe6a8ff0627184de1e60591301ab63650e49"}, "877ec2e1-9385-459a-8d46-0d3fe278f76a": {"doc_hash": "d4fad811a566cf5e4352c5eae03c9c6ed1ecd44caf4c881dd860b2efa42aa1b2"}, "ede089db-1b54-4574-90c4-89dea062f48b": {"doc_hash": "4895b02b22ad3ed5aec5741f8d15a39a80b1308006e182862f5f46d6bdd99008"}, "8c3d4f5f-2679-4b4b-8018-519a4c2fc572": {"doc_hash": "9baac51a47ab02d94faa9c7ebcde3d1f32803d3c397425978ca10025f5026000"}, "f4586d3c-e242-406a-b269-e0ed8a38420c": {"doc_hash": "a3f06ce0e7b2c66cb40f73bf9f750f17ec57c2cafb3a97d1f26c2c4e4cd8bd2e"}, "c1200bc5-bc82-4044-aa10-d023e8b32c0c": {"doc_hash": "048813a683ac5367dcc0a92f5d85b43c6263ed1f9f982ec0b81083df3f61f161"}, "f7e41abb-cd1a-4be2-b76b-6f00e4f9020b": {"doc_hash": "f578d1c86a084c8ec37c31de8bfae0843ea8184d7176fc73ac10553212894175"}, "6e8cea08-d2d1-4484-a8bd-d46984906905": {"doc_hash": "5ecf38d5d6b028889b2a22e108b0f311fa296acce36c611be5462054a65315d4"}, "1bceb46f-bd5e-4210-bff4-5a336c12dd99": {"doc_hash": "ef13f16ba56e0618b77807f5b1875eef0ae63019f8ac267b63962fc3943adc70"}, "26b2855c-4e30-458a-94cb-9726c6195e0a": {"doc_hash": "9d96b3bd2b9bf0fabda41d771a435de47a5aa1f5c3cd95153bb060422bd0c10f"}, "01a92845-c01a-4d1c-9a11-36cb2676104a": {"doc_hash": "140ed8032b20f97c1592706340d102a68c442c8d59b7cd6f9fb4b6c04853c502"}, "fd4720c2-3eac-43e9-833b-c7ec1ed8a843": {"doc_hash": "1778ea44f8c4be8bd451bfd00e3a0d8f43755064081a240da929958f75e2c7a8"}, "819e8f6c-1e5d-4f20-8c60-ae62273c124c": {"doc_hash": "27306a833d7abdf68cef177ad1b7f17e32309abf6e78eb9576c1e831c5ce8bbe"}, "c988fb12-5de4-4579-8e7d-d38710855bcd": {"doc_hash": "333e04308d93eb5de387910b0d05700057a0aa562c828e2ed8abf91cff340e7e"}, "4525e89f-e9d9-4dc4-b1bf-8de9ee01e4bc": {"doc_hash": "fb48b66a7f639b938039fda0c64a628c707e97d4e447c7ef465f2cf63868e78e"}, "3d12bf2b-4759-469a-bb84-c4067f574ec0": {"doc_hash": "6caf4dacb5791c09a164e6360a739705b708222d71263a088ca36a5ab8afa9f1"}, "08407864-cf54-4209-b431-0e999e4820c1": {"doc_hash": "131979625fd4210a571637e25572c3684bdfdd16038b2d91a195c081d8526a20"}, "476860e1-3068-4237-8576-1e0a10731874": {"doc_hash": "b004c2ac9082134a5ebf552c1fcb13107c1d26c7e13e016ba199f26c0f890b38"}, "7331707d-819b-4f58-8527-5c1f07c43899": {"doc_hash": "048e9500f33935a1cba5d98abb0ef4ca7b5dbbc15ae734656aa0f03de9862761"}, "1c9b7fc8-1e2f-4686-b289-f0e51fc9eb44": {"doc_hash": "f167d8d3a79a6fd906ee03af00ef85a8e1c1e407b0095bc44b77c2d3f22abd03", "ref_doc_id": "db76cb0b-e7e4-40db-804e-7494c22977ea"}, "58f7f627-795c-4280-bda3-28a223c75ba1": {"doc_hash": "ae63021f72abbe8d6239ef807e150fecbf0f58f8292d162ab6976c5d8dcca056", "ref_doc_id": "3dac29c3-4e14-43bc-bcda-33782b4e87fe"}, "259d126d-75fe-44d4-94e7-bf61818afd26": {"doc_hash": "62fdf0660edb1c64b8e53937404664f5cc41aa91553a5d4f0e25f3f36c3ba702", "ref_doc_id": "4eb28fbc-be8a-4798-be3d-223939be1bc5"}, "8dbacbc2-668f-476e-ab6d-7a9914447e0c": {"doc_hash": "629cbe48346b598620fec9d5f8fc428e6e51ff1db7f746c334687517f90237f8", "ref_doc_id": "57434039-675b-49cb-86fe-76cbd3e348a3"}, "54f2945a-6730-47c0-a27e-9aacdbf06e34": {"doc_hash": "ef2a1901963591c2ba06435a6a346c51eb7d27cb132db4af9212be87baad8003", "ref_doc_id": "2a3eb978-d87a-4926-bf4f-62d01c1556a3"}, "f37289e5-1b52-4492-9e44-dc6822fa4ac0": {"doc_hash": "786f48668e87c65ddeb3d1efa7360ddbb97227a2c56d2dcb79380a88d54472f2", "ref_doc_id": "fad15b88-8ef9-44f6-b688-7566bba1dcc9"}, "b55189c1-b18d-4599-bf84-4775100a34ce": {"doc_hash": "6711ba734d6097d6d2facd6c8936c19cc0f10bd7d8677d032aaf55e3356cf534", "ref_doc_id": "03ea96e6-c351-4bf6-b054-9ecca983c699"}, "2b7c0771-a8f4-4420-9355-d0953b5f45f5": {"doc_hash": "b090c44397bdfc33c5af15cdf6fba9b68636836dbe3649becb3a0483caa331ca", "ref_doc_id": "56613f9e-2b1d-4fe2-90c1-78684eb17131"}, "9424f4c2-aaca-470f-8e4e-9a626391fbba": {"doc_hash": "995e7ebbdd24c4ca01a3c0fb779e543571344a013d0721df1c0a6341784b5707", "ref_doc_id": "e3b9821a-97c3-475d-8df7-6695c069649c"}, "efb601ae-2146-48fa-b342-69171cc5fdb7": {"doc_hash": "94440fa6bcff827cf4df7d8e6fc671cb58a0522c9c9834ddbed43fe985a6d403", "ref_doc_id": "8caa13ff-601f-4587-b672-566889d79fa0"}, "5cac0990-9091-4830-87e9-d9cc6fd8c7f7": {"doc_hash": "7a7ced1b2740beaa8eebae842ceea716c955f877b935ab64d0f57ea7d1125da5", "ref_doc_id": "363d08e0-fb8b-4c26-9d2e-71f446c37e38"}, "424efeb7-5029-43cb-be6d-201903349af7": {"doc_hash": "a6d20e83693aef36782a58a9ae8e2732c16fd91e6af32de5e46316f0402392d5", "ref_doc_id": "0f1a0653-01a6-4af1-abb1-c34192a01123"}, "12117453-a70c-4009-a6ab-2b3b24bc9ab0": {"doc_hash": "1257f3569a7f15261234ed5f5700f84c77558e27daf893365bd7ef08ac5ee447", "ref_doc_id": "6c3b24be-efd2-4aae-8743-c1efe69fbc63"}, "75995e1a-604e-482d-b3b0-ac024b9945a8": {"doc_hash": "c5bddca8cc97205a4ac06bfee302673f257f75ff06cd58588c441c7f865e8768", "ref_doc_id": "7aabc80a-11ce-477a-85ff-3feefb6022c4"}, "56c568c9-3bc0-451b-a873-14702ebd5a88": {"doc_hash": "885b3bd8c6c7930777c9d0286bd231b6af3c191f6b959ee15e784e35ae52badb", "ref_doc_id": "9c2a47ef-d287-4800-bf69-08d2cbc0efbd"}, "715d7bfc-394b-41ac-b570-2af4d1f47c61": {"doc_hash": "2d73bf6134cfc092c11d4bac36bb84e6b3386b6bf43c985ce7b377f5c5c2986f", "ref_doc_id": "725930ab-8faa-4d2a-b4cf-363db2f9752e"}, "da574436-f268-46a5-9bb3-0552efbd0b41": {"doc_hash": "0ea88f565e364e202e65d7ba1061180d49db92878a07aa0e259bebc04bdd9d26", "ref_doc_id": "ce4fb8a9-f259-417c-be48-c8789c324423"}, "25348ad1-6489-41fc-8752-212a0c7bbe2d": {"doc_hash": "24bc747637e445cd4d289088fc41605d27f26a1b61dc0d7fb34dc58e81e0c9ed", "ref_doc_id": "71c8305b-f0d8-4dbd-87db-6f56a2880de0"}, "2f0c5819-72cd-42a4-9775-facb71456843": {"doc_hash": "6d1c49cf43024c844bde3264789b713ce89fa3c74fc71508fa9d4d2eac9c1594", "ref_doc_id": "7c2fb7c0-6e5b-46a7-bc53-b7e891f57701"}, "04e526d3-faff-4c99-a254-8a16bd61276c": {"doc_hash": "a059db4b1887d48124d01d0882f191348709e46d72ead7300018091981feb7bb", "ref_doc_id": "918c7072-d1d8-43aa-8796-ca9da3cf8391"}, "d35eea21-fa31-46b3-a5ca-d0186fd6e13b": {"doc_hash": "3bae3357a3d38b17a3e4604f2fdcd422a2dc49df7afa3b19b2c64904f2e9ec19", "ref_doc_id": "a9cee286-a10e-48fb-b2f4-79fc0ff7fbcb"}, "ec69e2ed-8ef4-4914-bee6-63d7f6a20275": {"doc_hash": "fc14d971108e3d3464a541a7fa44f309281f74086ccb3e41d2de9613435ef346", "ref_doc_id": "f521decb-91ca-42bb-81b8-f1a6acdeb463"}, "f7047329-48d4-4b78-9ef1-c9d190061dee": {"doc_hash": "a3607ce7a4682363d7f5bb5aa40bed96f1349149639a445d1ce262a9c0d27e26", "ref_doc_id": "c9240459-d289-490f-80a6-b4c7fc417a05"}, "f6fea37b-8998-4c0a-a555-b06aa1e14302": {"doc_hash": "8f75b2a76dc705514f7f0e712bd4cb2abf2a48c771203676709cf16e8630a066", "ref_doc_id": "2ab95fc2-6bbe-413c-bacb-c8b621cfadee"}, "14bd5ff2-3a5f-4def-b2b5-ba9b20e52e48": {"doc_hash": "49e6b0910b6cd8f85e385290ee3670d5513a4a044dc2c932b02cccfc93c40239", "ref_doc_id": "5859a78d-4996-406c-b459-aeedac7e47c3"}, "efb5d0c7-3a03-4789-836d-c026d7fe2c55": {"doc_hash": "633473867eda146ca58e72b19c9af460abf3430ce070d25f64b62b4348650132", "ref_doc_id": "2f0f4cdb-2162-4a73-bcd3-d1d99fd4e367"}, "cb488ce2-5d46-4123-ab72-abd7b981a0b4": {"doc_hash": "fa306002e534cdcb63549eccbb54e4a6b4baa802db0dcd7d6dadad9528ef42b7", "ref_doc_id": "d7eb7878-9d87-44c8-b188-157a4310d91a"}, "bd972c2a-1f98-4606-855e-03494b5b27ff": {"doc_hash": "c080787a8b5d4272320d23e424c0994aa2fad8ac3ed3183304803a9f48ba9abe", "ref_doc_id": "b0eea355-d026-450f-a1af-a854a4e1831e"}, "4812daae-72a3-446d-a14b-50bb4187c6d8": {"doc_hash": "9aab055e8bf4c89715dd170cef42865e632b3610cfba55c067e86449cfa4d49c", "ref_doc_id": "0d02e631-42e7-4bc4-88d2-8eeee9a5f1bc"}, "5ef16dd2-de25-4ad8-8589-5926eb957dea": {"doc_hash": "d580f50879878b36ecae7d42df288aebd856d937805c5e558dbb947513b3058a", "ref_doc_id": "4623334b-26ba-4171-b230-020cd4e7c495"}, "7186eaf6-9d23-4e5d-812a-42a0c5e4b752": {"doc_hash": "216c47066aaa68eb481d59bad3aed956c3c5b455840e2e5928caea03f139c793", "ref_doc_id": "e43f72ea-cca2-4704-9ce9-7d6ca0d97767"}, "18c999b9-4ed9-4ca5-9cbd-53d76a70d59a": {"doc_hash": "50cf164974e754983903cfc8982f77bfb658e81c8741fd65045561cc86c23f5d", "ref_doc_id": "0042e0ad-6f13-4eba-a0ca-ee0070520503"}, "3798c5df-b908-4799-a81e-8f16bd8fe639": {"doc_hash": "8b28ceed481d4f1a88ffbcc21714c7fe9befe24be8cd245933af5fed919ce176", "ref_doc_id": "80905e45-e42c-49c2-b094-d9f9278421fd"}, "bd3f63c9-e933-4b6d-9b8b-5886aa7894ae": {"doc_hash": "73a2c73689d35e3dadc98bd69a2dfc635ed853e2dc56523bd691bbd4f708e509", "ref_doc_id": "82af4aab-61f5-4318-af34-845dbf2f9cf6"}, "ca12d9cb-e1e3-4180-a76f-35e2c2e1b576": {"doc_hash": "a27fe9006ae132428c41c9182e88f94d57359a20bfc9ea17ab146e99affb2a71", "ref_doc_id": "161e55d6-122d-469c-b58d-6e6268fde7cb"}, "ea6c8421-9bed-43fb-9ec4-ad61236bd6d8": {"doc_hash": "f79954c0f5bf9c0b68321f737d728608bc3f5d5b77f11fc68bad1ab78306e8c2", "ref_doc_id": "20db598b-26ea-4b2c-a2aa-f6cbeee26ec5"}, "0e2b01cb-7197-468a-9561-af3a93c1d753": {"doc_hash": "ffcb52459cd1386aa9952902e25686600a25242161f8f9c87fd8622409d2dc76", "ref_doc_id": "9de51659-385c-4ace-8e21-bafcdbb723ee"}, "dedc11f4-ff7b-4049-b232-612de4384a2c": {"doc_hash": "7f1a6e4a81ad5f81948a07bd53dc10b3e080cbc4a27ee5514bbb30de6be3110c", "ref_doc_id": "095a9765-5d18-4f6d-aceb-b11bfe488f38"}, "84097fc2-16b3-43fe-bd2b-99d5b88f331a": {"doc_hash": "e6c7f5c15ff40133073d13f88ac12eed6ca7ec3995d00f62b6b6cc020dd64024", "ref_doc_id": "e1179edb-419f-4bf4-8ce0-276785d40884"}, "42d296d9-1ba2-4370-9946-12bd7a4125ff": {"doc_hash": "4e34eba7c587c5354dd6644b698b49d0d8a2b00439023485e7141160b8809caa", "ref_doc_id": "8436d163-6935-44cd-b3bd-a28873ffa2a1"}, "4da1df9f-bff7-4d4d-bddf-6028b47644df": {"doc_hash": "cba804d3cff2e7ec9e1db919b06af7f46bfe332ab390038cc018c49c834747ca", "ref_doc_id": "79473ffa-c9eb-499e-893a-bba37cdb9be4"}, "30c71e31-9fff-4802-97d1-702d0994d6a6": {"doc_hash": "2bb2d66f2bf4189bce80e7ca37de36f3da63f07ed72c9baad551e64487f997c2", "ref_doc_id": "d0f36477-c84d-4f83-84f0-515680847e50"}, "a486735d-0483-4dbc-933a-7b16a43e4eda": {"doc_hash": "e95bdd7f63cce3436cb4598c6439c3693a9ee359400639e2163c9e44c77bf43a", "ref_doc_id": "3ccad799-5463-4d8f-8cb8-801eda2ce454"}, "1d4c0ed6-1ac5-4c4c-92b1-6c2c61fcc674": {"doc_hash": "1a59e6302c018b08a7cc5f1f731ac43e98d73f7464bcad029c675deec99b1f93", "ref_doc_id": "21654204-db9a-4606-b41e-f59654e02bcf"}, "c4041bc9-5540-409c-aa9a-5bf90f13acf1": {"doc_hash": "0705a24e209a9ec6006584a8b0caa6eb660babcfa796e96a94ed2c9948c55e7e", "ref_doc_id": "bc61e95f-9144-42e2-80a7-c5c2391cba9a"}, "d3b06769-bda1-4eac-88b4-99f7592cb9f8": {"doc_hash": "b96534b1021cd1207a616010ccd10b16363b025429da460d7691cdc2550b048a", "ref_doc_id": "1ad82ce8-e7fd-4b83-bea8-533b0de6d01e"}, "90196853-2573-4356-8a6e-395b1994a6ee": {"doc_hash": "0ceaad679348132b6b98150c5eaf2399fd37f3fea26592946b5f0a3d3bb8fe9e", "ref_doc_id": "0d8388a3-6b23-441a-9ed0-8d1d3c4dd506"}, "8e8164e9-ab1c-45ff-9f15-6df35a0db830": {"doc_hash": "9a855f0e320ccc9389ab81024133ffa5920ae036e9145e138137d4a77e809b23", "ref_doc_id": "1edf5369-f138-436c-b217-c6cae3594368"}, "8c4bc6c0-d599-4e16-aeb7-7c688b5016b6": {"doc_hash": "2f74a1ad5daf125e32d3a43ab7c8610f3d9b9227edf0c3380cdf10883b0a36a1", "ref_doc_id": "eb7fb40a-4352-4d9d-896e-e6280aab9baa"}, "5f2d7bd0-f731-4c2f-a0bf-1290e9112e86": {"doc_hash": "bb9602a821366b7bf6e30521c182581d211db6e89abe4535f7403ae7583a369d", "ref_doc_id": "c2776121-9715-4263-82f1-f6982c5c2681"}, "bfd77798-185c-4cfb-989d-92ec293dda23": {"doc_hash": "dbf78746111908ba06c9fc8410d69dfa194ddf69a66f8e97affa383baba70aa7", "ref_doc_id": "4f45779b-b106-434c-afba-567bc0e38eaa"}, "ba03cf8b-9f1e-407c-b94d-38ba7aa8b2f7": {"doc_hash": "565bca28408fc2f327321c2a79706bf02f24e9d321693617eff2a48fbdd50b38", "ref_doc_id": "502cb76f-1f1a-4835-bcb3-83633ff0f893"}, "59708d29-7524-41fa-8e71-2b31536a1c85": {"doc_hash": "c5f864164a76a638e7a64dbc36a7e9752478cbcfa7bab9cdef562f6d34db3351", "ref_doc_id": "6caafe20-4175-43b5-8555-af71b26eba7b"}, "b7078e0b-6b94-42bf-a792-3046db3405ca": {"doc_hash": "58bae660cec7374e0a4a2de49e8dbbff49042b70d9dd447505e8b4c3b4753324", "ref_doc_id": "cf7c6d98-ea56-4e75-8e1a-7409d67ff1e7"}, "78ff9c8d-b5d9-44d6-afe1-e644dc1dfc1c": {"doc_hash": "6688b3c4550dcb3d88516b9d6e2015b9509e808fe635af9ead2dd686393b9f13", "ref_doc_id": "01d2f9d2-eb93-42ce-b666-7d19edab6b55"}, "1f13f017-0688-4d47-9304-121bae14dd0b": {"doc_hash": "1c867ec731fb6f97f8bb19d01c9b76ac8c3519304b1665372de2a65911517d4d", "ref_doc_id": "d8a5566d-54b1-4c78-ac89-681688ff2232"}, "6c96ba8f-0ee3-4fb6-91cd-678fea4ac19a": {"doc_hash": "5ada66c127a02cd7b32a11a754171cf2eb6c54afa1a06aefe2d09d2bf9b258d7", "ref_doc_id": "c09bb191-7702-4cd2-b6ad-c4bbb70000c3"}, "82bcf605-8274-4502-81c8-a23a0a5f1bd3": {"doc_hash": "6a2c635e95543b67493c811ad981713adcdeedf615174d8c0626909da8a7bcb9", "ref_doc_id": "47713349-f5fb-45d3-bb93-54425e866dfe"}, "3e152e59-4909-4f3e-b32c-7f66463636ff": {"doc_hash": "cde298e59133ad4f7e6e3242ba7ef272b27a7855100998939cca0a4253684901", "ref_doc_id": "01f7b517-bb5a-4608-a449-283b01530060"}, "14c54966-3412-440c-916c-873b15e4b6ff": {"doc_hash": "fa106dcbaa7b233b66886e797de239480126abce37d67e2df4461cfdf8e39258", "ref_doc_id": "a37707be-4c71-4fa1-84a3-699f7989ec72"}, "a7de8a5d-a3dc-4f48-8fe5-6291f15aebbe": {"doc_hash": "8656146a66a3a1aadbe054779bdeffb5f8e45bf845e09d4ff821ecafd1645aea", "ref_doc_id": "680cf164-0707-460e-8adf-992cb4372ede"}, "73d84eb6-20bf-4662-b052-6008d4195c11": {"doc_hash": "da8fef95313a396fdcc5278b01ec1aa2a1bf545834bf7ad6147a9c261a307015", "ref_doc_id": "5fb840f6-b2a6-4793-87a6-2e4dfba56418"}, "07fa5598-de4c-4f6b-8142-b7340c47d85f": {"doc_hash": "2f831171f60fb75256e7190e5a25b4a5b4cc5eb5f1be912e540ed76f73063c83", "ref_doc_id": "6aff1379-6672-4f7f-8565-1a126fd91692"}, "d23a5717-eae9-4b82-8c28-8d4c6ae2fb5d": {"doc_hash": "260da239849860db8feef38830a922a882d3a8bcd5238afbd5cb5a6efc631c25", "ref_doc_id": "6d35efa5-1d78-4d6c-bc8d-712f6aede4e7"}, "3194403c-c730-43c9-896d-2b56133584d4": {"doc_hash": "6a7fd4fd97a5e2febc494942641cc876f516b504e3bc40c3f216b0f098b9269b", "ref_doc_id": "6c0e4ea5-2209-4d30-b863-219228260e96"}, "99b56f5d-b06a-4771-b1e8-43ebd9b11e4e": {"doc_hash": "336cc6880e7d7a4aab646c276749bf084236bdf32ce45f5eaa6160ffc6613a2c", "ref_doc_id": "1aedcc24-899a-43ee-9086-3ccdaee16272"}, "cbc8d5a3-88dd-4849-a3be-fd63a28067aa": {"doc_hash": "c7e24acb724e2e6b93e8e3885f0e6e61397f9ceb36c1521120e06fdbfbbdee0b", "ref_doc_id": "c4df5388-8f0b-4c4e-b0f0-aa1c88361f90"}, "2f875a16-ade1-468d-97e1-a1366d332eab": {"doc_hash": "e51a497db77d8a6fb49ed9ed9b05fffe7b595ae50ae3169d5de2161f4d8b69c1", "ref_doc_id": "5730c063-339c-46f5-8b53-29067b908177"}, "7372305e-2893-4628-a0bb-14e47b8d289c": {"doc_hash": "15e586d5fabc1a85780aca374e50b643a28c88a1dfcb3cf344ab52e470218e24", "ref_doc_id": "396aa6bb-9f1c-4ab3-a444-35075462f894"}, "7d806deb-c08a-4286-b339-907212deb5e8": {"doc_hash": "624fab9fab11cf2086f06de22ba778ad0923e8cc68ac0e12281a5697290489cf", "ref_doc_id": "1adea7d1-a367-46ef-b0da-ad544de6ae09"}, "d9d7baf7-28ce-4d47-8167-cd35fb928a44": {"doc_hash": "7e8fa84508825fc4b90e4fb24f2df97244a6c0d1f19f46442cb37f92a9c09936", "ref_doc_id": "6973b224-8005-4694-b9f8-b765cb7823f3"}, "3ecaf7ed-fb88-4e89-999f-ea1ef73aaec7": {"doc_hash": "c35dd665069d482ffcdbd6a3f88a799b06492672870ff5407d0aab4d7ba2791b", "ref_doc_id": "f3e3118e-c22c-4d20-8e60-dc03f69d06b6"}, "886fed0c-edce-454b-ab8b-682251d444f9": {"doc_hash": "87e8940b096cd555e005ca6451e2e1170d5f535e5700d128eb4f0debaa714208", "ref_doc_id": "4b512246-a8d9-4e5f-a031-808612addc82"}, "bf9e894e-0cb3-4663-be3e-d76bead94032": {"doc_hash": "7777a71c4b2b204a26be774c6553e00f7eb82a54446f7ba04a80e7c78ae0b6b1", "ref_doc_id": "eacc659a-6a20-41f0-928c-4d5f554f8515"}, "7c8dd347-48f6-4c60-9b42-b98af9296b2b": {"doc_hash": "8c2f98d40124c0603f19a5f51f8f9cd3c557406f77012f987b5d3b15ff0a1181", "ref_doc_id": "857c3d33-be61-4de7-a660-249ac65f6d78"}, "a5771adc-3094-42f2-9be0-c7691a45a576": {"doc_hash": "ad883adff178b106705c6a9fe48e08992ed09f83b2dd4d8d3e315b692a190e61", "ref_doc_id": "0ba5e8ff-a10b-4a3d-995e-acb7efaa5d33"}, "d4388c65-7c1b-4fe4-b408-d53a011aebdf": {"doc_hash": "060f056d892af014a3b1f68272409e04b9a132d229af32ebd6d5a491197b4a3b", "ref_doc_id": "436c39c7-cee0-4ed4-8299-55c25dbc341f"}, "521c7ece-3915-4493-81de-11b3c4d4ba3c": {"doc_hash": "24c2207f329175b0627380d29c889a92a9fe1d2a9a8a020cb57e4c3861c35fe6", "ref_doc_id": "0af0d4a3-c661-4ccf-90a8-5bfc5ea79af1"}, "1706eb3e-b3b6-4903-b828-93d79e94fa48": {"doc_hash": "61b24661e760527de7c5250c6895d8c2c5022165deb83afdaf4d4f34e0674558", "ref_doc_id": "a1a62f1c-3963-45fb-a51e-7a61f29ae0d3"}, "3bfb8c9d-d897-48e5-a333-811c6cc8e24e": {"doc_hash": "07f4c856407bc455750e4bfc29d9d3533267a5cd63f6546a57bb033b15436fea", "ref_doc_id": "732e8b8c-1a07-48e3-84b2-b44eda8ae17a"}, "1186a5d9-d2a9-468c-a814-0a829c139c4d": {"doc_hash": "867559ff0c656c8b230d1e9d61852bcdce17ebc8b93ce2caa97cbb06724a95cc", "ref_doc_id": "7e57de75-5c94-4914-a99a-f4230b2f0dd1"}, "a1c8fbcb-8a69-44be-be30-db573616b5d5": {"doc_hash": "83a953803b0c81ea83a94d2e2001e0d402c203b5da49aa0fed323d7f273c5502", "ref_doc_id": "1aa7e01a-99ac-4ff5-a85a-070e951fd07a"}, "d335346d-3c5a-4c54-acf0-61b76e08c06e": {"doc_hash": "e2cc69940ea0a6ab279ef55b9a73f8d8a08fb7cdcd34118e9a950d8c35b16f4f", "ref_doc_id": "eda820d9-bf1e-4e65-9963-0ae2d03f2508"}, "6618af7b-a3d7-4dfc-9562-ce34c50d654b": {"doc_hash": "9c79873fc33a183d23cdf9bdca309f8465d7b7a735d4656c763cd5553e64505d", "ref_doc_id": "85e43d90-38ff-42ab-8bab-47bd4804eb15"}, "5dda6c9f-cfae-4b48-9ad5-494861089a5d": {"doc_hash": "a70e05cad13c9508635555a22617b0ecc9d80632d4fc40d0f81856c5d13683de", "ref_doc_id": "f0d06ae8-be1b-4b7a-8ceb-4155b5f5c3da"}, "e8ef6c3b-d602-4c62-b535-b0952ea1caef": {"doc_hash": "c627ac59ec36c7e14193679f542d9a3782283317e10913d3115f90b286a9e21b", "ref_doc_id": "3df45d45-aeb0-4729-8100-1fc7c872e758"}, "761e395d-e22f-49db-b29d-04f3464def3f": {"doc_hash": "eccc97c367425bf00f0601771c57d626e785384f653b2728fa68b239cdf249a7", "ref_doc_id": "8caafaed-fa69-40f1-957c-5dfa0b3f75db"}, "ad8cab5b-ab33-46a4-8533-3ff625e5fa8c": {"doc_hash": "70bb2b3ae9fda889d87124d3bf38bfb0159cb13e1fcde798ef571a08fb6789dc", "ref_doc_id": "d8c40a68-57de-4f8a-8636-08575d3f58a5"}, "57266b88-d0cb-4663-b42b-a6157f07d5f8": {"doc_hash": "131533dcbe151bc95917a63450a76d01483bf929a39b56f38f53bb1dee93e896", "ref_doc_id": "ec47f889-5b45-4978-aec8-979026432615"}, "6c4553a5-ef75-4262-8f23-6f66431ebd31": {"doc_hash": "6bf9d3018f9529117229c62082566b817dcfa2ed780425ff5d7b5ab02205dfbb", "ref_doc_id": "9c101772-2e3b-4697-99ff-759843706198"}, "5d2cebac-96f0-4015-80c7-51dcd16a3785": {"doc_hash": "44bdac1bf44db0507e52ae0af0ad84f4cfaed6a54ab41dae1685d22f92b742c5", "ref_doc_id": "17b2bc7b-375c-45e8-ab6e-bdfc8b5eda99"}, "3557de32-a593-493d-ba2f-30b90ccf036e": {"doc_hash": "be3fbe4f7d5c96c2778f41ff974b81ed5797566820d0fda1f2f93ec6298341ad", "ref_doc_id": "e4c3482a-23dc-4726-aa10-6f879255b476"}, "27d7d452-877b-41ae-9f1f-d548a041193d": {"doc_hash": "7acaebfe8cd4915a89164fa5a074764b9f16edf58bcc2b10824b17a09f2f2bd0", "ref_doc_id": "38f73c67-df23-4371-a305-9e9b205b443c"}, "36b35c60-ec60-42f8-bae5-70094bd496fc": {"doc_hash": "e91361f6d5f83f478681481f962f4082ab085d07a4c82a146c6e111d7f47b182", "ref_doc_id": "8db0a2b0-6142-4fc8-96ad-9f87d8ff1bac"}, "2b87197b-a060-49a5-9c1e-e0f175d5b7bc": {"doc_hash": "7d3e7699bd5f5b9d3d5e55b87c40496a863df9045d36929f99297eb17d608580", "ref_doc_id": "56785bdd-3dd4-4f66-882b-926fbfadc611"}, "b1085350-da18-4c2c-a338-97ff4fda27a7": {"doc_hash": "945e999f4716c1ba18b5e633df033938553c7dace5b257574680da5cbb8cd1dd", "ref_doc_id": "91e75d1f-767e-43f4-842e-ff7824053d19"}, "a6721acb-d7ef-404f-89a9-d3d18c5d520c": {"doc_hash": "e650b2f4c32aacdf6ed8e0bc9bce9adc2a20259175806f2f788ddb50094452c7", "ref_doc_id": "41ba24ba-a8b0-440d-9a5b-2236e072b3f3"}, "b805d233-742b-4e45-b29c-931b31c0a995": {"doc_hash": "93c8a78f015de014f37435404d09218f1cce529e8bb1bb94cc638ed04cd75d1e", "ref_doc_id": "b6897aa2-908b-4d5b-8161-fb8ba69b9149"}, "c6a887d0-2d39-4c63-b70b-0111cbc5befb": {"doc_hash": "27755c93956ec3e900c64d77479274cef713563045439c8071d685357729e6bf", "ref_doc_id": "437a5ac0-36e3-4349-a979-08267b3aeeca"}, "7efd4498-ebe6-43f4-95cd-a7dc1726e32e": {"doc_hash": "5cd27e4324c8bed989e625dd7071ccefc912bfefa8aa02c35d55cbc0dac987bb", "ref_doc_id": "e5b83dce-b00d-4752-9fdf-3b7a449dc762"}, "58caaa64-7f8b-49da-8074-a99fc55e6a93": {"doc_hash": "30f8ecd59d7123a3f59ff5327f5f82be11c367eb39bdb19b489eb3a1711ed852", "ref_doc_id": "78a495fa-cd26-4dcb-9142-1866d4302537"}, "4cf94126-87b9-4341-bcf2-85fdc0b95e53": {"doc_hash": "5c5de6fca4881fe3d8e8429e73e94f7963430cf97f396d0c05964adca6f3f831", "ref_doc_id": "5c8cb371-cba2-44f8-b716-f242b3002cfd"}, "64351fbf-ed26-45c7-9922-72962d5db87c": {"doc_hash": "b57192594f77f187e59fa8ef5bf3ab462daa9ebafedb74c8ae987a93e0bbe122", "ref_doc_id": "49f5f0a5-a4c8-4c29-adf7-ecfbdbc03972"}, "b8cc7f4b-3413-4680-8948-373a70f6221f": {"doc_hash": "150fa6a3381f0ec6c0046205f33632830ecd7017c537b7b6671592d6e92018da", "ref_doc_id": "d5b24b23-5036-48dc-8708-24e12d404eed"}, "32d61e79-d245-4eca-9257-22e578654686": {"doc_hash": "4ab02229d296767ea2cec7c746a5324e03cccdaf98736b4a254f56af3269afef", "ref_doc_id": "c2ac627f-466e-4556-8114-60ae785693cb"}, "b2e9a988-acf6-40cc-82c2-b8e7657e166b": {"doc_hash": "e4f3892bfd20b1232b1f1ca4e00462650b1854640666914ed3e3da14ebbbc402", "ref_doc_id": "7a1ad0aa-c9ad-47da-b323-8efab5f9f343"}, "ad6d1ac9-f639-408c-ad1e-e5341cacecfb": {"doc_hash": "8cb0d9a4d7d42dcfb0ba6f515627a5a1add1c0888e240273beaeb4b1e928c13e", "ref_doc_id": "30038fa0-084f-4a4a-bee2-b666edc9e4ab"}, "09254a6a-9eff-459b-9f00-8e4f8346c3bf": {"doc_hash": "1a61cdccf5a0c3b49c63e3f24381abace9f88c4e59def9062a2c28f18d0d2409", "ref_doc_id": "de833d5e-a605-4832-815c-cd6abca04310"}, "f6d7e3ab-b1d8-4e5f-a90a-c246048d9d55": {"doc_hash": "bae5017338b0ce297922a61824281d73981a9034e041a1f88e7a3345b3c7ebbb", "ref_doc_id": "35d95470-567f-4933-a765-f45d419d2568"}, "f0794ed5-af0b-48ac-bad3-7ac928042e0c": {"doc_hash": "c7f88cbd1892920baa5bc5e820cb143fbb0f004d2b8bbcf88d9fb4ecfaa4da06", "ref_doc_id": "6fa3c1af-f6e0-4f82-84b3-fdd30a795c3e"}, "3f08b7fa-8145-412c-b2d4-262a7275985a": {"doc_hash": "392c17cd2e40fd14a995392c77bda2dbccd7d3981e62f704d8e1d6077c71e3a4", "ref_doc_id": "3742b12a-3339-40c8-bcc5-c748f4fa9fc1"}, "e35755c3-b2bb-4a7b-a6f2-03996d4e1e55": {"doc_hash": "a066cde032d23135cdf644d7a9a51af296a14a4528b18254046bcfa93a1c572c", "ref_doc_id": "c0d228df-a7c1-4927-85d4-8cd6b473b8f7"}, "40be5682-9391-430f-92b9-7d261d8bc3bd": {"doc_hash": "0feddd0ed2eebd8011f6b536cf55b96878ad3cc3e8a4c71460d01002b0249ea7", "ref_doc_id": "ff979349-e5f6-46e6-9a87-7ceff6bba0e2"}, "0a462aa8-8c95-4a2b-981b-a4f127db29b0": {"doc_hash": "c7c52498bb9ed23f9c530f5f5e2f91c3695b866b1515b1471604d2df65e70312", "ref_doc_id": "334a6b8a-f16c-4c8c-9a00-cd1c1f3ee03f"}, "e281477d-6ca4-4e86-8868-75be31475cc8": {"doc_hash": "aad952abc5353a5093d3c2ca777151e59ba7e4cbb01694a5a3797d85684bca83", "ref_doc_id": "c89d5054-5b3a-4ec2-a92b-14c76d1b9615"}, "03d6bb87-eb12-4b3b-b5b0-fb98d0f64674": {"doc_hash": "b8e7c296ec2ab57f480658d25a53b38ba7c80880c7e808fb783e09f65521dc94", "ref_doc_id": "14b373c4-3720-469a-8224-99899644d57d"}, "125f5689-0c86-4245-a5f7-f752ebcb6367": {"doc_hash": "3a5bdc170f3a8cc162c2d2a72e11551f264f12c70f1d274961937b097556120d", "ref_doc_id": "e7794e76-fbf7-424a-bf08-d9dd3590a621"}, "ab3fea51-5fba-48f0-a77c-36937da5e394": {"doc_hash": "00d4f42935df52a672f18b592b55cc36c3f4ef2ff928b55210a7dc5cdb871096", "ref_doc_id": "1cc23a70-4b43-4212-a375-bbfc5a4e9426"}, "90f5a906-388f-4465-80b3-d00d9e699988": {"doc_hash": "d8a2527b7e39fe5ae563a9123c5a771e46f704f8054373407f073c2eb592a521", "ref_doc_id": "5633fc5d-f40a-4de7-8335-8c03078c8daf"}, "b1821d00-0624-452e-9289-ce4ee5263d8b": {"doc_hash": "d81292c4896bd039a013d1f60a544026909a6662199dc986346857b4daf17669", "ref_doc_id": "3765e01b-6a4f-4513-aad2-71609f8da0fa"}, "fae4ac76-5aa2-4210-b136-35add9ea7596": {"doc_hash": "876af16a37333a4d9245f743d9f5d982e8e00575a5400ff3babc2d8308f01d3a", "ref_doc_id": "b15da2c2-30cb-4527-98be-6d88db0b4395"}, "e282425f-88b9-49de-bc32-73891754d0be": {"doc_hash": "0162b17d8cd4b9499c1331aa03caf835c2f2ff42c2abf2584eaff97a3716f2d7", "ref_doc_id": "835d4b08-2460-4c21-a2d0-c22f9654cb2b"}, "b5e6ed49-d45c-4706-86d2-dcf015dcbf98": {"doc_hash": "cb4734c958660586149309d97c64de535876e7efc2608b6d0abce89bba7cde09", "ref_doc_id": "9da4e4a5-027d-4fe3-9c0a-bac394f15ba6"}, "10a9bebc-b877-4f0f-83ae-8e82b4962c5e": {"doc_hash": "bdae573328d9e33732740d24e6a9359fcb86428e2118ecfe1a0da1df244e6b25", "ref_doc_id": "b2dd5101-bb56-4a5f-846d-7aa2719d03d6"}, "8a757988-bf03-424a-82f2-575749a37891": {"doc_hash": "5f69e4815594c50829a32a5743a15d3ae0e50b173a3ab3c0cd6b9f5972a92266", "ref_doc_id": "326f55a3-634a-4a47-bab1-ac95742d3e7e"}, "dd8b3412-f7c0-4f3c-a715-43a32147f005": {"doc_hash": "e8d187c4d90efbb97130ca9d953089d0ecd0198a42f28232735b24e1ac85d31b", "ref_doc_id": "7a0108f2-e1e7-473a-8d57-4780f3260827"}, "293db268-b3f0-4c3d-a72e-af8b18ded61e": {"doc_hash": "ed983f1cbde888532f0331c0b7661cb767057d3ea929291de0e55283238efda7", "ref_doc_id": "818ee6f1-9056-41e1-909a-b85d19d347e6"}, "83419724-6a25-4730-8021-b7e4e775fa68": {"doc_hash": "27d0fe4686d40bf2ab2b84da6052e71b6703dc83fd2f69be5a10ce2d36ce6edc", "ref_doc_id": "3e28515b-1f17-4768-b9b5-abb1d7ce64c2"}, "c0b79eab-6d2a-4e2e-bff7-8828805dec0d": {"doc_hash": "9c143ad6f5b196ba911d0c1da50085e8d2fa72a06f1d569e75cf81ee73104248", "ref_doc_id": "e8f24e4b-5033-43c1-a776-8881210bf773"}, "b1c4071e-28c7-4c43-9287-1a1c651af345": {"doc_hash": "7331f2eac959036212f0633c5cb27475e5f04527aaf4d79e0d2be4b6a4f45002", "ref_doc_id": "cf00eff2-0dde-4432-895f-78670ec7a20a"}, "b7d8ec46-b0c6-4d0f-83ae-bef5664e4ec2": {"doc_hash": "c91c09b359819fd718a46337027e8436c7be122a58ba6c34b8ce3c1eb883af9f", "ref_doc_id": "5fbd64fa-13ab-4269-ab1a-560bce1e5fa4"}, "e9331724-a38d-427f-8ef6-b8fce7b9d282": {"doc_hash": "5c5d97eb3689f0d902ec91ce40a2a58f885367a89eaa6fc237933c781b9c2b48", "ref_doc_id": "841640b1-f4d4-4a34-a168-40525c6c315b"}, "51050135-c949-452f-a829-32d1869e867d": {"doc_hash": "f011bc61c16784c2dc460787b14bd96f1e8c5b078ff1ab644ac2a5ae4e0e5ab9", "ref_doc_id": "f14380d4-68cf-40c5-bc7a-a7d80bdc8caa"}, "80f431e5-5211-4c90-a414-0e9e77d06943": {"doc_hash": "9248d8ea5403a01d85fcfc6e9da8c30566103e795d9310944b85b7dea8a252cb", "ref_doc_id": "4766fc13-f4fa-45f0-8823-3fa8a0b57911"}, "7ba6e2b0-a89b-4a90-afc4-e3bb0844b0eb": {"doc_hash": "9cb10b3046922b4d7470b97c0cd7de6cc891b3779a2a9a22d13f8ff9b00057d7", "ref_doc_id": "b436a8aa-a87b-4a7c-a178-1a5ed4dfd923"}, "ec124b6f-cb00-455f-bdfc-97b119d85c4a": {"doc_hash": "a222ba4eb91b65df7d706f1ea8cb36a7a687de1ead20db264ba845fa21e19b47", "ref_doc_id": "25d42177-d6d8-48cd-a947-26d297445af3"}, "aa3a206f-de45-4775-8979-ebab929ced40": {"doc_hash": "5521adc8cbb537bd593013cd20c54ab44c69cc04e23c0811ca2f7aadac005d3e", "ref_doc_id": "eed0deb6-bfaf-4ddb-9fed-9c2e509cc87c"}, "225fa297-1457-4464-980f-c1141df2f594": {"doc_hash": "03184890054d0323cb9aa5eed297aad65d549829937412c49e943f6deb1cd8e0", "ref_doc_id": "20b07551-e726-4cc3-aa1c-d6181269265f"}, "63762716-622b-4e04-98da-b81583411e27": {"doc_hash": "37eaff300bf311434178a93274a4efcad125e71fdcc5e9d8fded1e8958b5e6b0", "ref_doc_id": "348a48eb-dbd7-4679-89f0-8e0a433569cb"}, "4cdb07ea-079d-41f3-8289-0e1c5fbc373d": {"doc_hash": "4034d8fa80592c2ac926d4287d7fd978f021260e3c289782064dec3d1370953e", "ref_doc_id": "bbfa7841-b8b6-4a11-87ee-9aa03ae449bd"}, "9fe93682-84c7-4c80-bff0-5356272cb635": {"doc_hash": "4995734a618e0445757ede0b74f3a02750fc20db0a0ec524632aa844d39fbc6d", "ref_doc_id": "d31664d5-d3fa-4097-bd1d-07e4621dd930"}, "5b36ef79-28bb-4331-9d62-d1bb12091db2": {"doc_hash": "3de6b9ea32d23f081625a46639d97724bee77514738d4f74fb477ae9980c46a1", "ref_doc_id": "8f00096d-db1f-4317-820f-d1629dd43dc0"}, "692dad3e-d78c-465e-a11d-94f5035d93f9": {"doc_hash": "f01511d6aed87288491ede91fd4435c0da4972aa63e83273019074383aaa39d7", "ref_doc_id": "5e423cfb-20b1-4776-8485-8d6444a56c64"}, "b9787418-e30a-4c31-950c-fb4596ff7253": {"doc_hash": "ecf4fe83d9fbc9c5ad4d7f3251cd1eac7cc68b5dd738aa744ea60c366a70acee", "ref_doc_id": "3dcafa15-432d-4f13-9897-fa1eb2cfc480"}, "a18c47b3-be35-492c-8bac-27186cad3c73": {"doc_hash": "71898e9bbb503c7c19f49edcc9824ded8f8b0e9c8d78bd2b6f8e2710e3581e05", "ref_doc_id": "3c8d66d7-9dc8-4fc9-8774-d2f4719d57af"}, "65f6fd75-ab2a-4a01-b761-24f117938263": {"doc_hash": "7ef33c0037addf9356f7cd8699cabaf1838777354503b4572dfada0249e974ef", "ref_doc_id": "aa60af45-ad45-4c3e-9c76-f9bf7a54c47d"}, "d71999cd-1f98-4857-8213-425e7a7eec43": {"doc_hash": "974482d6bd2eac3a912422e3cdbc5fa658ae77be898a3e740056be79177a4eed", "ref_doc_id": "ed84d867-1fcf-403c-9973-0b54d2b70508"}, "cab3cc55-8d15-4988-a7d9-9a1d9191d230": {"doc_hash": "35e06bafc4e0d874f4b9911c8ace84c30aa7b7165d32a3f305884c9136984777", "ref_doc_id": "c5e7b84e-209f-448a-ae51-60b63ac6448f"}, "30970b81-9e72-4daa-b9e8-50d71f693e33": {"doc_hash": "8cec002e25240e7155c63e6c7034ada81627f6d69b470fee289d4b4ead812073", "ref_doc_id": "3830a3e5-df61-4614-98c8-db99a6a56921"}, "58ced462-2e01-4f77-801c-846bf645c609": {"doc_hash": "28e1ab53ec79978ecec2f90e050ed3e856444201307d4171b4e23e66fdf6f06a", "ref_doc_id": "eddec76d-0f1e-4e49-b78e-e333e0a51186"}, "e8f9b9fb-797a-40c5-a599-0be64afb4be5": {"doc_hash": "9a305f6b3ffb67e50ed21509b07a2e55c60f2b9cbb318a80ac78ad688b2a59d0", "ref_doc_id": "8792f095-a0d4-414d-bc50-3ceb326f1378"}, "3bb309ab-b1bd-426b-9f67-d2cf8a5dc648": {"doc_hash": "610c8388d5d4ad508d6f1bca83e29e4d26f33a5c27e8ac1a86ad868e2c382ab1", "ref_doc_id": "3fa2f7b5-64ad-4b92-a1a1-e2ee5d78eba2"}, "4eece9dd-677f-4a51-9e92-fe830de127c8": {"doc_hash": "2852e9b960bfe3fbe505493c7925dd23c831cd886c742f9aae83fc379a72ecaf", "ref_doc_id": "d6add2fb-aadf-4748-b00c-2653fa8688ca"}, "9a10d18d-9dd9-4893-9d66-574a8357a3fa": {"doc_hash": "1e2639c7708a5e211ab4dc4965fd47873679878424ff4501cb5d36064bd304f4", "ref_doc_id": "869cac80-acef-42eb-b1d5-826ea0ce9d34"}, "2f5ab201-6a6e-4a49-adfa-0faf0ed47e4d": {"doc_hash": "24366f40fe12ed82ea15ef4def0541b2008b9385b2cf485e58424cad7497509a", "ref_doc_id": "bcc9d47b-f9bd-484f-a5ec-189792fc5d3d"}, "0bec327f-1ed7-4467-b07d-51d13124954e": {"doc_hash": "b6a62637499fa7b96caa2de6dd1fc5fc056f217f9e9b7d7e95672a744385595e", "ref_doc_id": "38f3bcf4-1628-4c9f-a290-b6c4c58728e7"}, "b6e8c767-4eaa-4659-9a12-2ef2d53961b0": {"doc_hash": "7c0dee3776725abb2c204715f9ab21960ffd11ae74cf2b1831ea6f842c1526b7", "ref_doc_id": "4baae727-d6e3-46d0-8666-19a8053866b2"}, "b32fee75-694e-4dc5-9996-3b216a55df65": {"doc_hash": "7c808134f409aa657d37bf063c416762ef6b3d8d3147fe52fb88de1da7ad4ddb", "ref_doc_id": "fad7eb1e-21dc-4884-839c-77b8f0babb5e"}, "70b13508-da79-4cef-a151-9ed6e01a0da8": {"doc_hash": "c1a9d59e29a340d00be15f11a7b0205b3986efa7e35d4207cc43b2e1a8f39fde", "ref_doc_id": "6f4a4486-1ffe-4b24-b253-a7dc6204be84"}, "e9c0f66a-2a4f-4fd7-b583-a976bdda1ae8": {"doc_hash": "c071b87678055e7dc7d8842bf8032c5505a66d79389e4b289ff0ef6074a90f2f", "ref_doc_id": "f7744244-7a9c-47cd-a937-f5571e847db8"}, "c1b9644a-0fd1-41ea-b53b-feff071056b1": {"doc_hash": "97883072a9f524ec6d92e25cbc4ee83b4e60cb2352f39177a4b2f298b7576f64", "ref_doc_id": "7e651ab0-d8b3-408c-9845-cde29604d0de"}, "bab9a562-7321-4b91-80c3-e0d0f6340e5a": {"doc_hash": "213e16477be47ef3cad489a02ea8778adbeafbfc62419b1cbb8476400fb0ea0e", "ref_doc_id": "6d377472-6fd4-4a2f-9520-00fc83f3e0b9"}, "f8e4aa28-53f7-40ee-9023-9b429829084d": {"doc_hash": "6015ac341f5e306ba0075e70681e563c23b2d6c11ee1e45c645706425b729234", "ref_doc_id": "ef7786b5-762b-450a-a5df-946db2e6613b"}, "c343ecfb-f7c8-42c8-9904-1b44f79b61c0": {"doc_hash": "a19856f1c1d49d9612f06d9e566cf146240aa95141c98b63a211426559d7eb34", "ref_doc_id": "b4831ca9-340f-4d98-bd7d-40831485ad72"}, "6f5922f6-a8cf-468a-b652-c57ca0389c5a": {"doc_hash": "e0378d238b6ff7a4418371a364d5c4efe94003600dadff5a30d5ddf9759d1409", "ref_doc_id": "b2871e88-63f3-4547-aac9-923892bbd446"}, "217284b2-fc35-4509-9658-53574b0b1735": {"doc_hash": "39e9be2e6d44c44415436280caf351d9ef45c434f660d2387eb1c20ea0c7275e", "ref_doc_id": "1225248a-38e7-45aa-87f5-94be3a256d4b"}, "3f325a54-059f-4b86-98cc-5877a1c8ebea": {"doc_hash": "7a38681c3d3d7c206b58321462dffa2bd223a1c5e4a3a31bed3f05535d8599da", "ref_doc_id": "20261848-b2e2-41ef-b570-2e7184ebd002"}, "180821ba-7e2c-4425-a51c-36692216538e": {"doc_hash": "29458f4943b36af1661435888cda514b0a4565b2f1a808f2aeb85fe010ec9990", "ref_doc_id": "064a3061-81fa-4d8f-8bc2-1c9f6b1fcec4"}, "6c479611-8dfb-4854-ad11-6ed97de7d301": {"doc_hash": "c309c6d44b4e1fed58b464767a96936067fa0089863585e3c03746106ac83f2b", "ref_doc_id": "82dea2b0-99d3-4e05-8e0e-20499e411536"}, "67dfd496-4f99-4139-bca7-49ae1457fd94": {"doc_hash": "c6a304839eb77cbfeaa8237c81cbadf67846e93cddb87d65d3a8084e005bab4c", "ref_doc_id": "6b67c575-de4c-45af-8879-de685f2fa07d"}, "97887d07-38bd-43fb-a19a-696cc0b29006": {"doc_hash": "f1bcc4d4ac8f49091917c248df6c5f1d04fb17cb40d09c75682cb5d58a91bcc9", "ref_doc_id": "258c0db3-3db0-48d0-951d-d41ae7eec8e4"}, "6bba857d-b5a4-4a84-9220-0e2e0d3ff66d": {"doc_hash": "b22c576d1171b866b8d847ecd7b4091d25206185fe179429536c6c7740c88c6f", "ref_doc_id": "1950d2e1-3850-465d-8ef0-503f60fda535"}, "3a3b1a38-ba02-493b-ab1c-5a9b44c7ac7c": {"doc_hash": "5693603a21f35cecd821195d3800c1c4a947f7983999c9b5c21f287d995ef8e8", "ref_doc_id": "00be94d4-570a-4fa7-b418-269d5483bdff"}, "4b645d6e-5f22-4388-9083-0da65b6d49cb": {"doc_hash": "8a00ea8c73baea00554131a8fb982c60ea76f580f8fc111bf7e4397b61f22cd6", "ref_doc_id": "e98581f4-a351-42f6-9360-96b73bce7805"}, "d55094e9-7ab5-4869-be23-0d104a12734d": {"doc_hash": "925358801781a69b0deb8d6d928d0565983d102b9f9cd4a45de84810d70f1d0c", "ref_doc_id": "dcae24b4-d978-4eb9-9f12-69ba1edebb33"}, "d0a5b44c-acb8-4cce-9eb3-b8a8e2cefe63": {"doc_hash": "ba1a98bcf001a30259054313b352619e0015bf3bc73cd078bb2b8a630b2681c4", "ref_doc_id": "4897a1e8-5167-4ee3-9d6a-62bee579eef7"}, "de80fd66-c156-4e40-95ff-a8d444d6b137": {"doc_hash": "3b90227be820c4110bd47ff0ca3bd32095d7796daabc84138b69f2f389b5c66a", "ref_doc_id": "d372207f-2f02-4f53-9960-61a7c40bbaf4"}, "ea98e248-7649-4810-935d-2714d132875d": {"doc_hash": "d6c2d4643acef78b549674174b62357c6bda86cc19fa5591a8ce9b78b3aac186", "ref_doc_id": "5848bd23-c11b-4bea-8e08-8e4113a55a84"}, "4ff7f7a5-2580-43fe-b5b5-317e58601abe": {"doc_hash": "280b71640117bdc4d19195e1b887db11da4eeb126ff6bc7658e914b25d82e586", "ref_doc_id": "5f735931-1250-4e66-a41e-abae1ba486cd"}, "40be074e-04d1-46ff-9f77-7264ac46d2be": {"doc_hash": "9538beec24dc4988de7a9bb0000195ca99e558abd021ce5ab2e4b7f9f56b6d20", "ref_doc_id": "b3f6032e-a718-458c-a072-34c5efbf0d87"}, "89e7fa30-b418-42a8-9310-a25edf3dc4da": {"doc_hash": "cd29c2c6eb34f30d763dac404e15ebe63129dc4be814f513a99900f6e7870380", "ref_doc_id": "3a620500-42fd-4cd7-ac2a-12300089bee9"}, "9c51e4cf-45c7-48bc-88fa-e1a5033115cd": {"doc_hash": "52d63a74993c3be4483d6076c3ed52918fc641c26351d58e7a9516c3bf8f8dd1", "ref_doc_id": "d8718249-f91e-4923-b9af-fefea8251c42"}, "5b22d9dd-4fa4-48c1-b3a8-1b876c7df412": {"doc_hash": "896df21d204fefc79b4f76e4ba76f22fb1f041eb28304ce3b34365b14244551d", "ref_doc_id": "5634f18b-378a-46ca-87ff-cc8eca927009"}, "9cd72ee1-0212-4259-a749-bee870030872": {"doc_hash": "ec6c5cddb2a1c121ca416556336b53b24eaf9938e4c7b18f6765d47ac8387669", "ref_doc_id": "563e0d76-594e-4a2d-935e-e1429efb7892"}, "ca7f1566-6e0a-4494-9f5f-03ace22ace6c": {"doc_hash": "3d2f566b8107bbec2425ff37013236f5e5d55f944910e42ac13ccd67edcf0f5b", "ref_doc_id": "3ad79ddd-31af-4a91-89d7-ecc2fa25dc51"}, "e7e99d37-b7f7-48c5-a8ce-f64735718b3c": {"doc_hash": "d6704cb0253e1a692018be1e8c87796cd7e4081cc427ff38a86eada24e7f3dfa", "ref_doc_id": "daf465f9-90c6-48fe-be55-3b0709bd1457"}, "d8639129-579a-4ae8-b57c-5e83edeadf48": {"doc_hash": "9b7028fe46027cb9316c80484f94bb42d1b8b18ae8dfa11f9c828f47f733cd29", "ref_doc_id": "416d1dc7-2a52-4cae-803b-3db1cc81dd0d"}, "c6fc7014-55cb-48f8-a593-cc6867ea757c": {"doc_hash": "949cc0eaf797b71fc2fe8ce72e5576b78f50e198a8a9e520fd4f133a66bbb0c8", "ref_doc_id": "d2d0a46d-ae2f-400e-944d-09347e4ae23c"}, "10d81b5a-4d2f-413c-a2dd-644e348332e3": {"doc_hash": "ca4301f35ea4709e05ab6b0c79f11f3dbec987eb890f298b75596c2e9168a176", "ref_doc_id": "a05c800f-72da-4322-a762-5100951c04be"}, "931f22a4-2e67-4ce0-8fab-56bddb7453ed": {"doc_hash": "15abb9d5b0cc6877f10697f27c276f9820fc4d1d31f65e10663783b5ecf490ef", "ref_doc_id": "d07f0cb2-ff49-4f57-b12a-ddf60b83a1c6"}, "f40ef031-918b-44b3-9673-68deec297b8a": {"doc_hash": "849d11d6e5ed4edb88b597c35075b2ece979321505c9d7ec81a31e4cf6ba987b", "ref_doc_id": "aa41df2c-0898-45e3-97b7-03d5aea41b9a"}, "951c8b05-8e18-409c-972c-c739e1cf18b7": {"doc_hash": "d208ccabf5603bc16743461e6e3243ed8e716b44c7fff4cfd7bc488604978110", "ref_doc_id": "82673f8d-8a0c-4ffa-a97f-9ad79fed6cc7"}, "1dd33ca4-5082-490e-9aba-0a35935e812e": {"doc_hash": "69a078195010c6b9e381ca8602ef33e15b60cc1e1bc7989457155f62a2e4b816", "ref_doc_id": "eac979ef-1d4f-435f-a3a3-6548688be4af"}, "4bb2393b-26e9-4e0b-8817-8d2c0dfb15f4": {"doc_hash": "565f817e7b63606f984e57e4dd95ab03c375dad40e5d2d192a207a222d518e07", "ref_doc_id": "14283408-202d-46c8-b8b9-974286ca17e0"}, "bb253e7c-c58a-41d5-b501-ca8fc2c5d12f": {"doc_hash": "741a7f2dcb6c54f23578855f25b50501d3062422935888ccf8e7ded4e21dec20", "ref_doc_id": "d984b114-6b0d-4e7e-9b58-701adff09c52"}, "dfc16d08-0ed4-4ad1-86f6-f47632506fe9": {"doc_hash": "528109a5300525485a90d982316d774c64ae647591eefadad8259064580b5452", "ref_doc_id": "4ab87cbc-38d8-444e-b299-4760ecc95850"}, "209f5f9f-ab69-4447-ba2b-5cdee0eb99ac": {"doc_hash": "073413ba0ff1d281d0bf36e05550cc3f8abe8e16a8394dd6cbbddc938135c6ed", "ref_doc_id": "18ac86b8-11df-4eb6-af7c-9d9c01d214e0"}, "0955cedd-3b78-476d-b453-0017a284f1c6": {"doc_hash": "e5c7722268b4b9f15f65839f03907959b364c9b9fffd620d5ee4e9e33f4573a6", "ref_doc_id": "7858349c-b77c-472b-8df6-a26066c7d451"}, "7ea1c266-9a26-40b1-84b5-095bf1cb85bb": {"doc_hash": "8efb77e678695e694bc94906c78d8ed411c0c3891ca62a047c791a403f7713ce", "ref_doc_id": "93ac0b73-2e13-44ca-8ec5-b1e161740190"}, "d5983fe0-16c7-4f37-9ee3-f103f3800fa1": {"doc_hash": "ca48b5c60ef57563fff5826bc8afe4510b3969054c518bf9758c1011b29b7b15", "ref_doc_id": "a5f64832-b415-4443-9e20-c17ca0ba0529"}, "161db5f2-736f-49ba-9a3c-96bbbcc5a29e": {"doc_hash": "b0c629bd0e4ccca6d1ceabeae2f50c5935994c46b984c8e60ede11f81d1b9599", "ref_doc_id": "bbe439c8-c461-4e00-86a5-76118d74415f"}, "29ea5e7c-ab99-4de8-974a-5fff254a393e": {"doc_hash": "d88eebf24fd1cb23af8679ef889a93e868f41ac42f36392d2c387817f7993232", "ref_doc_id": "7aa0df53-e9da-4010-b4b1-d983e02c63ed"}, "382dfbc1-305e-4f23-8de7-b00df8761d8d": {"doc_hash": "00cbed80462f61e0f4782638686be18fce11225a481910fdbc1c1e6787928bdc", "ref_doc_id": "a6651732-3dcf-43fd-b7ed-029796f62563"}, "1077cd10-ffd4-41b2-9d07-c3ea87af26eb": {"doc_hash": "83570639ae339f8b4afabeeed9c7cb9b711ad5c1f9bf35d9f9735d27db3c3317", "ref_doc_id": "7df2878c-1bb5-4a0a-88a5-36436e70df85"}, "e86b8929-dc2c-47ac-a9d0-c9c478514323": {"doc_hash": "04aed210ba9d86bd5a08855ce1fc15a862ac919d322120893e26bb8bb411ebbd", "ref_doc_id": "a81c50a3-f9cc-4743-a3a7-820c92335054"}, "7aaaece6-1122-4ff9-a607-7acdee323849": {"doc_hash": "98371c9df10f3d2f00d0f00c27cba8f3ba677ef743881506c9d250c3e7900ac0", "ref_doc_id": "c70825b3-ac02-4d9a-a32c-4b0dd2a5f234"}, "3724ad33-3d7a-4105-a16b-b6e5cb5e8ee8": {"doc_hash": "c318e7a505d49e56ab31873d0fd092a5f52e17d77cf6386bcb3e247be1c2f69e", "ref_doc_id": "fe366e48-557e-4c14-9205-1081e4638421"}, "f58719b9-4f75-494b-904d-94001e4c3859": {"doc_hash": "83c00dd6c3c174524fb729f98e4e788e1f66a29bf68a496c53435b0e340e2537", "ref_doc_id": "65a54a9c-2772-4248-ae98-3ee4d1074139"}, "ae26c119-47b1-45b4-a448-74dba839b47d": {"doc_hash": "3cbf950158f83e929e6814dd39775eaa8e1ffe7486a7a9d16f1321b9cc977bd1", "ref_doc_id": "6a9ab7ee-d36c-40c0-be21-ef840fbca72d"}, "f16596f9-8be3-4906-96fe-1fc64316d570": {"doc_hash": "b623c25d237d7d4db1325162e7ecb0ce6e3e4add4cd2ecc0721e18a453746c54", "ref_doc_id": "2c9fa6b5-0991-4eb7-be61-78c2938cd45f"}, "f0287f81-6f0f-4f79-ae9b-722d643d78b7": {"doc_hash": "73fe2d4c41f9592dd36f8e2063f3b8fa01e6a5a7f4062509eb87d6b41c2dca03", "ref_doc_id": "bf407efa-1dea-4775-ad5b-0d965218950e"}, "266d07d5-acfd-4aa1-9b13-fd8b57720e36": {"doc_hash": "2fd9ab92f273ed94f78e2914ad7bb53d17de3f490191b2c2c316bc5233c57d89", "ref_doc_id": "ed5f81a6-8811-4c56-897b-d2a32890474b"}, "be2043de-5d86-4f2a-b84d-e4a6a66b4afe": {"doc_hash": "c1b529c126b81eeef071537a651c7613fd0c2d3f09d6176963256aa08cda6638", "ref_doc_id": "bf1c2921-74c6-46c9-80e2-3e431c4eba3d"}, "6782f2ef-f825-4c20-b376-a4b2947df8a0": {"doc_hash": "2f68753d23998904a09f0b60aa85787cd9d11fca6fd44d6ba3d30e935895a2ee", "ref_doc_id": "b56a82a2-c770-4bb0-9ed2-cf3b2d7672e5"}, "6d6d9a0c-8ed0-4d79-bbcb-fdc5d5e62a08": {"doc_hash": "e9d4ea46be179bd604c9311b2277b47922285a5e6d640fdec5fbb93fbbf272e6", "ref_doc_id": "a75b0140-98ed-40d4-ab41-cdb883fe3c59"}, "a1b573bd-908e-412b-b669-0952f80f9f79": {"doc_hash": "3e9168f7a4d8af0ab5006ecf1c800f29a019c726dec89ad5eda856f6fa3dbc9e", "ref_doc_id": "8fdb6043-e331-4fd4-9ffd-9bb9e52e2b2d"}, "1e3e086e-456c-45af-82cb-5591371385c0": {"doc_hash": "c84252f8ce628e7053a9ba887a0e8dbc2bc05960665bc7febb68622b7176350f", "ref_doc_id": "982b14df-9540-49fd-b6a2-ee74b64e2c2e"}, "4b7e4006-b47f-4778-9fe5-b5fa3f598dab": {"doc_hash": "4f1a1c444175a5f48023cff19c81f4752570f7478f9ffb4707f429aea89a3789", "ref_doc_id": "4438087d-e9cb-4d1c-90a6-226b4c818653"}, "bf54353c-80e2-4b83-b10b-73cf7d6e77ef": {"doc_hash": "6c18c35ece816ec73cdfd6eabc03dd5f1ac0437dc5f27f04587af0d9d39d51d5", "ref_doc_id": "c0814240-59b6-4478-8800-c38aef5806e0"}, "244bed27-7550-47f7-b6d2-1a6ab19bc14a": {"doc_hash": "6405b895da43043d256b5a179d8ea33778339dea254d1d6836d22f7191c47345", "ref_doc_id": "750d2afb-6154-4bb0-b75c-94350ab24470"}, "6646e6f1-c049-4986-9489-83ecb0f10efe": {"doc_hash": "16525cf4b6b55e6c9a40fe35d8e38b3c79477ef4a5b6b94f7135acbada99b9d5", "ref_doc_id": "8f43f7f9-ca83-4ab3-aaaf-3223bb9077f3"}, "a153dfed-198d-4ced-9a3b-a75f1db45803": {"doc_hash": "b1252647eb59daa77556806d88a6ac036ef65d3dbde124de8cf9f1e73a647d60", "ref_doc_id": "3d77817c-7b4b-4b7a-9372-a658604199a2"}, "5da19107-3e25-45a8-9f01-90c88ce669e9": {"doc_hash": "1cf30569f1b045cef34ce2222a4ec08b874403b7ac8acb79a2df87f5c80d8288", "ref_doc_id": "a3d83e46-9fed-4c80-8d56-fab85cee6602"}, "12350cf8-3dce-48b7-a276-3c29a58a69b7": {"doc_hash": "801cab1b89ff3897e48028561cd80009a9ecb1ed61604903d53c8e3e8fcb94dc", "ref_doc_id": "99f40ced-435e-4b29-a537-1ca0c34d5f67"}, "114988d4-e670-43b3-a747-f8ea92ec0c63": {"doc_hash": "a4175449a4bb25fc0f3dda1b02bb15957c64b9856052efb308f3fc5ec3693d74", "ref_doc_id": "c3f51d2a-f0ce-4002-a9d0-008c5b176894"}, "bd6e815b-aca8-48bd-8be9-5a849b041a7b": {"doc_hash": "3a8d897315c49d651c4d0ef041c9e042c22f62a8d5931fab19dfa4c1dcf55fcf", "ref_doc_id": "cbe0f994-ec34-4ba3-a98d-7ca62142e9f6"}, "010c713c-7965-470d-879c-b271a8346237": {"doc_hash": "070fc0d4d3881fd0910d611f90abd7e6bd3742ade830e975c8e67891b0ca69fd", "ref_doc_id": "c9a9832f-b4d9-466d-9819-dd6a7771732f"}, "da786d83-e27a-4d59-8f0a-db09d777bf8e": {"doc_hash": "788d11f5cbdbe7769a1e7052f406df07cb2507f7e224c8d62fb8430412d13c64", "ref_doc_id": "68066bd9-2ddd-452d-b7da-1b861a1a9fd6"}, "10c519b6-50a5-49b8-ab08-f79538a7ff99": {"doc_hash": "57342a598fcdfc03f9e12cefb0cfc7671a2c9d28bd5ac62acc189d89b7a4dc64", "ref_doc_id": "874ea894-10a7-4919-8aab-65e5b9e17ac8"}, "a0549b03-fb77-4586-95fb-c2adceaa8b49": {"doc_hash": "d0cae6951b5ec511f0f00cd846bbf11cc4a8500bb7fe4e7294aabbefc719e5b1", "ref_doc_id": "bd2b2472-7708-4bc4-9254-616396329019"}, "9de3211b-ae59-4e7b-a886-a6a82a817961": {"doc_hash": "1e57377f820167bc0d3ca3fc7f840ffc7e4d5c0e839df85a42e95d05cd3cc85b", "ref_doc_id": "c0c5908d-b277-489d-9cf5-131f84ff5187"}, "b98ffc50-c1b0-40bc-951b-d4e2739da582": {"doc_hash": "6691c4f61639c360cc112c5df638a88402224ffb23fb04da79a995ed56ed086f", "ref_doc_id": "28219316-9dfd-460f-9c8f-8ed3edd00a94"}, "3b8cf4e7-a5e3-4006-9daa-b94614036164": {"doc_hash": "afdfc2d158503dc00e542d0ba0f6fc683ddd4ab9374d64298b27961f22e214a7", "ref_doc_id": "82c2bc05-2027-4011-83d9-5e18c25e686e"}, "cddc7160-ae05-479c-a306-d95c79c0c1a5": {"doc_hash": "e60c350cf761a73ba3b048ecc9f89f3c9ab9248f66761a7a6a888a9df77fe0f8", "ref_doc_id": "da5523e3-b933-457c-a9a8-c93d97ce5d16"}, "99ed230e-b4a0-4181-a119-2807105b479f": {"doc_hash": "529306a35ea756f8a98dbf6507f36be444b69d04da04bb4c22f8b3c4814d85b3", "ref_doc_id": "d50252db-c228-4d91-b27d-43e8634686d1"}, "d92db686-0c45-4264-92c7-a6bf205a4746": {"doc_hash": "d64155c56a355c75040801332629a397fd978be2d2bc1512a20229e4467d2a7d", "ref_doc_id": "3187257b-50bc-4c1c-b2a7-65bd975d117b"}, "18f2f9b9-1331-4ce5-a362-deb5d8fb4db0": {"doc_hash": "8e0fe9b198b76fe418ddfc1e0811191976962967e760ee822c5dd52040440bf7", "ref_doc_id": "8750c1f7-50cf-4cca-bed8-6ce5571083d7"}, "dedabc09-5f7d-4468-8e25-a189f0749f06": {"doc_hash": "47d2d3a8ae5cddd54d1bbcd4ba142975387d2d52b96499f7dc0a22dbc1df583c", "ref_doc_id": "c8272ec2-af00-4249-9fea-1e1de93b9a91"}, "107ae703-9b95-4cf6-8814-40183ac0a2dc": {"doc_hash": "85b4b0315422cefdb7d6feb470bcf6f1008527c4b7094161d2f0fa546f16a209", "ref_doc_id": "d20c7ef2-3cc4-478e-8021-a9b33c87b5ac"}, "99fef07a-0a29-44ea-b65f-c83545bb4947": {"doc_hash": "d1c7c6362c77d61781d70e369ba1cd1a15728ba293f2d02a0793c33bbdf03c1a", "ref_doc_id": "6b688319-9cd6-4e69-b923-56c34d13a703"}, "648c1945-0c6d-4981-b2b0-6e270c9be64f": {"doc_hash": "30d739bad2887421024a9d2f5c49c2e11b6d456cf971f85eb9b6cedf2e4a8ba6", "ref_doc_id": "b24f9350-12f6-4b97-bd8b-a64425d0c89c"}, "bf60fcc5-8df9-42f2-b964-9d3ff5ea7b53": {"doc_hash": "ff2119dc99429795954c2687ffb2f3ab9dd073629c9952b30ccb639cc8fd39ea", "ref_doc_id": "21c17c90-ab28-4faa-828a-d0b095a66af4"}, "f8692c69-720b-453a-8a30-f73c4b12746d": {"doc_hash": "2c386ea6d17dfdfab31c30a0b7ab35befd7d41cdbd116da7c85f52b5acddedad", "ref_doc_id": "06c7d0d7-1037-4c50-ba85-5d0287cb80d0"}, "02550537-4e6e-490c-999c-9d6622e3d9f9": {"doc_hash": "b272ab0b3b00ead89e458f52a06fcbb6ab890eb43aef5a86314f7539c7892f07", "ref_doc_id": "6cb32b6a-8d69-4213-8e56-2475e553b488"}, "f9f0964e-59e5-4f94-9021-913ecf3627c7": {"doc_hash": "35f667ace8d7989497c520b478c86986c35419b9104b60f9eff142c487b7e432", "ref_doc_id": "621417a0-fade-426b-a9cc-0ae16f8eddf0"}, "ee5981f6-84ef-4bab-b692-c4c14efdda6e": {"doc_hash": "ae4a6aa525bc8a06721212fa25ffdd2ed8a80732ed6eea0bd87cf9c43d43e82b", "ref_doc_id": "c21c4975-ac8a-45dd-a918-7adbf9276cfd"}, "abc34b3a-b898-4acf-b77e-e021c0e82e0a": {"doc_hash": "29f208cd4bb4c7d8e2d47fd6f7ce94562a95844e327fa154b20727da9c9569e4", "ref_doc_id": "9e13f3f6-9a15-445a-b89b-94064c440deb"}, "f749a2c8-c7e7-438a-9033-1cdce0e6bbbc": {"doc_hash": "04547312858dca9551566a40641ad97735379f4387580c74dd69fdeb87e86f7c", "ref_doc_id": "38d4170c-00d0-46d3-8f53-bf0c2d5cd615"}, "dabc6da1-0c12-47a8-8f70-38e431e2c87c": {"doc_hash": "40cd5ed555d8f79d4180ff9fd8e0f60e4af97de3c67fcecebb4c763ab698357b", "ref_doc_id": "8942beb4-06af-4791-bdb9-ec46ce5af85b"}, "074c1ca4-8f8b-43fc-a161-463d908396f9": {"doc_hash": "772dd3e7bead8346e5424d37caaa08ff250633f6ad29481ca00a3c71134ea90d", "ref_doc_id": "7d692460-1447-4c90-ad40-225d06e3c6e1"}, "2b83110f-8403-4c7a-b468-126a63d20847": {"doc_hash": "21af911d601e95ff5a39bd99acf61f0a6cbaed4673355eda8f8abf5abbbc09c3", "ref_doc_id": "6dea04da-ac6d-4810-a820-a663ab293c55"}, "2e439dd9-6b85-4be1-b9a6-16538a1d7362": {"doc_hash": "bb71b8633b784e42c869e548f4318ca9ff4942853993abbb3942125bf2069d75", "ref_doc_id": "febd701f-eef3-48b3-95f4-28c343f9e48c"}, "e967ada2-2b18-4724-85f0-f25908ecc66a": {"doc_hash": "e8f5a573e0d62fde263b653d23f46ccb4e163d4463255f46855b21f282babe7c", "ref_doc_id": "1c331643-ec85-4bd2-97af-17ba1d238ac6"}, "b77b2abe-67c9-46dc-be55-0abc3a89b485": {"doc_hash": "5f07dc08bb1bbe93c394a7111c84affa686b6e635d57077111d2335e96bd598c", "ref_doc_id": "11b6d544-fbeb-4fd2-94dd-64e81b524802"}, "489a2b51-ae8d-4870-89e4-93b9e9879962": {"doc_hash": "6221e2b9f68ae2d4ce500cd77f4affa6feda1c5d71a740909fd9fddf43e4531e", "ref_doc_id": "ae53d6d2-8c67-45f1-9c9a-96e927b6aa19"}, "d6249839-9ce3-4840-b60b-efdbf409f335": {"doc_hash": "948122cefaadb7bb530fdf0ae7af73fa9a3b796545b01bcd2ddec58e86ed33ed", "ref_doc_id": "c1e9ea9d-10e1-4477-b2cb-2db25670dcc5"}, "48f93d15-892c-4298-b27b-da90efa2770c": {"doc_hash": "4d586a3c4eeb692bb16c57db38cd92ab48a5ce628ce4fe694357868b7f1f06a0", "ref_doc_id": "1dd86f1b-f223-428a-be80-4977f47aa5d5"}, "08e133cb-341f-4ea4-b393-9e47961b5251": {"doc_hash": "49dcf1dbce97dd8b932cae54c8bfea05821b40ed1d377e9f2a2f78b72044ceee", "ref_doc_id": "69f37083-fc6f-4e7e-ad0a-4338b6a58039"}, "bc18ec94-26e8-4614-8b3c-248b580e6cbb": {"doc_hash": "6b6172c69435cc28d92723b889b9f41d2d7bb0a4d663bd3590c0ae08d6e99986", "ref_doc_id": "17337504-6eaa-4c84-9d8a-bb4ca713a4f5"}, "dea4601f-32b0-4d92-953c-69bd68f61843": {"doc_hash": "81603af8823a436e8dcbd91dc54de51c4f4b7412fbb2dcfe58245c68b19e76f9", "ref_doc_id": "4a2dae41-6db6-4a38-ba4a-baec9d4ab4cf"}, "8eaf02fd-be5c-45ab-bb7d-006a389b5123": {"doc_hash": "2bb2a2244d4a06e61027bdcf90d2d18deca415ffd633b256859c95750a5edc85", "ref_doc_id": "67c7361c-2a01-4ab9-b72d-66766a606d1b"}, "3f1d8d90-8697-4120-8528-91f1d30117e8": {"doc_hash": "c45aa9df5a83f48f1a202455f612a418d72c02ac2eb43a75b1f6b8695049442d", "ref_doc_id": "3e112cd4-9008-44b8-8412-a4576ecf12b5"}, "f900ad0e-5a1d-44c7-bba8-5a2b4527ffbf": {"doc_hash": "307af5e2be781acf30f20a366f196d84d38e054c4b73dccdad0e012b96621fb4", "ref_doc_id": "877ec2e1-9385-459a-8d46-0d3fe278f76a"}, "ee24e8fa-63dc-48b8-8824-dc2573102674": {"doc_hash": "941b18f85e24e2bb5a546cf1aa95ff1d9dd58af5a4870f65ef1421d6409c5c4a", "ref_doc_id": "ede089db-1b54-4574-90c4-89dea062f48b"}, "207c5a1d-c24b-42be-889c-cd7e372c5f0a": {"doc_hash": "3f2cf46ce88ea3d44170b87d31ebb6052b8e81a377f626e5479849b133de986e", "ref_doc_id": "8c3d4f5f-2679-4b4b-8018-519a4c2fc572"}, "64b53b74-9a7a-4bc0-9c20-26aba5609488": {"doc_hash": "b9c308e5ec8054907fadf426a7fd4504a314e454844c49b3886bb999df7cbd12", "ref_doc_id": "f4586d3c-e242-406a-b269-e0ed8a38420c"}, "3684b8ec-7fff-48c1-8eed-d8b0bd65eae9": {"doc_hash": "e006db7892ce07021b943f603c9c4ceac42040bac863256fdd78362aa83d4234", "ref_doc_id": "c1200bc5-bc82-4044-aa10-d023e8b32c0c"}, "4d6fe5cb-c414-4a51-a213-d702f06dea54": {"doc_hash": "c62514639669f3ef1f08c8a3d8b43a81a1602100cbe42d4139e36dc83334791b", "ref_doc_id": "f7e41abb-cd1a-4be2-b76b-6f00e4f9020b"}, "7bfdce65-7757-4945-8c48-6a58196ee2a2": {"doc_hash": "588c5e85d1903c1b8ee52ab17cd9b71965f643d5ec0803b9b08a6cf617f94b8e", "ref_doc_id": "6e8cea08-d2d1-4484-a8bd-d46984906905"}, "17393d01-f2e6-44b5-956e-359bfa2ab4cd": {"doc_hash": "2f3c7aa690387048faf30158d6b502153e6d4087f1a5f93c9fe2aae88fc646f7", "ref_doc_id": "1bceb46f-bd5e-4210-bff4-5a336c12dd99"}, "50a6d0eb-773b-45a1-b0cc-fae01398f7be": {"doc_hash": "e563fb24fd16a2c67347ae806908d8841cb8bf524724adb9e9dda9e9a7b16e15", "ref_doc_id": "26b2855c-4e30-458a-94cb-9726c6195e0a"}, "97b80597-248a-4277-8438-0737a134c979": {"doc_hash": "7751b8ce04daf1abe363e34eeb26397d076bdbd3966510be1898c9b2a1ef0ec4", "ref_doc_id": "01a92845-c01a-4d1c-9a11-36cb2676104a"}, "2d2006e4-6739-4562-918d-112cf2f53516": {"doc_hash": "a7745c9b74293f0c40d025aea0aff2f15917499054e12e04f0181bc41629d21d", "ref_doc_id": "fd4720c2-3eac-43e9-833b-c7ec1ed8a843"}, "4c646280-00b9-43c8-ab7b-13ab26b6b1be": {"doc_hash": "07deac2f5ada8a643abd66dcedba9fb1c7d9d15350426f5ba137963df628137b", "ref_doc_id": "819e8f6c-1e5d-4f20-8c60-ae62273c124c"}, "992cabfc-f295-4ff4-930f-5773add28a36": {"doc_hash": "64af5503b9d6ef5fce62d0b2ff6077f08d6700dce1f9dffeeb9f83033b8efd2f", "ref_doc_id": "c988fb12-5de4-4579-8e7d-d38710855bcd"}, "1e7cc2ad-be8c-4a18-b5cd-07378fbf234b": {"doc_hash": "8c0ddfcf0275c1c6b9e8529e80e96c89fda705283eeb5556af18ae4b05170657", "ref_doc_id": "4525e89f-e9d9-4dc4-b1bf-8de9ee01e4bc"}, "54ba19aa-3d69-4885-8d66-c55cf46c8c40": {"doc_hash": "0db9770b5ccafda6476229b55a4ca27c9d0546eb2ab154ded06f0ce1a26b94de", "ref_doc_id": "3d12bf2b-4759-469a-bb84-c4067f574ec0"}, "8193573c-7e0f-4ebb-a54b-ad17a077b004": {"doc_hash": "9c4a9a75a41bb343873e9dd3aee67d192216bfb6667eb675a5742a5d99a05acc", "ref_doc_id": "08407864-cf54-4209-b431-0e999e4820c1"}, "472c72c8-44fd-4a80-b565-9ae39b4f6c5e": {"doc_hash": "36c9f31194d4668bb11b8e9f8ecef4e773c766ffd8d39963aa24d0bcb0cd9607", "ref_doc_id": "476860e1-3068-4237-8576-1e0a10731874"}, "04cd2e79-8089-4999-bbc2-06591e813a77": {"doc_hash": "62a16e654011fd0529ab437a8f716f10877d90b31b7c98000cb1c3e83601dbd1", "ref_doc_id": "7331707d-819b-4f58-8527-5c1f07c43899"}}, "docstore/ref_doc_info": {"db76cb0b-e7e4-40db-804e-7494c22977ea": {"node_ids": ["1c9b7fc8-1e2f-4686-b289-f0e51fc9eb44"], "metadata": {"file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\blockchain_projects.md", "file_name": "blockchain_projects.md", "file_type": "text/markdown", "file_size": 844, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "3dac29c3-4e14-43bc-bcda-33782b4e87fe": {"node_ids": ["58f7f627-795c-4280-bda3-28a223c75ba1"], "metadata": {"file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\data_science_summaries.txt", "file_name": "data_science_summaries.txt", "file_type": "text/plain", "file_size": 844, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "4eb28fbc-be8a-4798-be3d-223939be1bc5": {"node_ids": ["259d126d-75fe-44d4-94e7-bf61818afd26"], "metadata": {"page_label": "1", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "57434039-675b-49cb-86fe-76cbd3e348a3": {"node_ids": ["8dbacbc2-668f-476e-ab6d-7a9914447e0c"], "metadata": {"page_label": "2", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "2a3eb978-d87a-4926-bf4f-62d01c1556a3": {"node_ids": ["54f2945a-6730-47c0-a27e-9aacdbf06e34"], "metadata": {"page_label": "3", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "fad15b88-8ef9-44f6-b688-7566bba1dcc9": {"node_ids": ["f37289e5-1b52-4492-9e44-dc6822fa4ac0"], "metadata": {"page_label": "4", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "03ea96e6-c351-4bf6-b054-9ecca983c699": {"node_ids": ["b55189c1-b18d-4599-bf84-4775100a34ce"], "metadata": {"page_label": "5", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "56613f9e-2b1d-4fe2-90c1-78684eb17131": {"node_ids": ["2b7c0771-a8f4-4420-9355-d0953b5f45f5"], "metadata": {"page_label": "6", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "e3b9821a-97c3-475d-8df7-6695c069649c": {"node_ids": ["9424f4c2-aaca-470f-8e4e-9a626391fbba"], "metadata": {"page_label": "7", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "8caa13ff-601f-4587-b672-566889d79fa0": {"node_ids": ["efb601ae-2146-48fa-b342-69171cc5fdb7"], "metadata": {"page_label": "8", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "363d08e0-fb8b-4c26-9d2e-71f446c37e38": {"node_ids": ["5cac0990-9091-4830-87e9-d9cc6fd8c7f7"], "metadata": {"page_label": "9", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "0f1a0653-01a6-4af1-abb1-c34192a01123": {"node_ids": ["424efeb7-5029-43cb-be6d-201903349af7"], "metadata": {"page_label": "10", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "6c3b24be-efd2-4aae-8743-c1efe69fbc63": {"node_ids": ["12117453-a70c-4009-a6ab-2b3b24bc9ab0"], "metadata": {"page_label": "11", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "7aabc80a-11ce-477a-85ff-3feefb6022c4": {"node_ids": ["75995e1a-604e-482d-b3b0-ac024b9945a8"], "metadata": {"page_label": "12", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "9c2a47ef-d287-4800-bf69-08d2cbc0efbd": {"node_ids": ["56c568c9-3bc0-451b-a873-14702ebd5a88"], "metadata": {"page_label": "13", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "725930ab-8faa-4d2a-b4cf-363db2f9752e": {"node_ids": ["715d7bfc-394b-41ac-b570-2af4d1f47c61"], "metadata": {"page_label": "14", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "ce4fb8a9-f259-417c-be48-c8789c324423": {"node_ids": ["da574436-f268-46a5-9bb3-0552efbd0b41"], "metadata": {"page_label": "15", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "71c8305b-f0d8-4dbd-87db-6f56a2880de0": {"node_ids": ["25348ad1-6489-41fc-8752-212a0c7bbe2d"], "metadata": {"page_label": "16", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "7c2fb7c0-6e5b-46a7-bc53-b7e891f57701": {"node_ids": ["2f0c5819-72cd-42a4-9775-facb71456843"], "metadata": {"page_label": "17", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "918c7072-d1d8-43aa-8796-ca9da3cf8391": {"node_ids": ["04e526d3-faff-4c99-a254-8a16bd61276c"], "metadata": {"page_label": "18", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "a9cee286-a10e-48fb-b2f4-79fc0ff7fbcb": {"node_ids": ["d35eea21-fa31-46b3-a5ca-d0186fd6e13b"], "metadata": {"page_label": "19", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "f521decb-91ca-42bb-81b8-f1a6acdeb463": {"node_ids": ["ec69e2ed-8ef4-4914-bee6-63d7f6a20275"], "metadata": {"page_label": "20", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "c9240459-d289-490f-80a6-b4c7fc417a05": {"node_ids": ["f7047329-48d4-4b78-9ef1-c9d190061dee"], "metadata": {"page_label": "21", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "2ab95fc2-6bbe-413c-bacb-c8b621cfadee": {"node_ids": ["f6fea37b-8998-4c0a-a555-b06aa1e14302"], "metadata": {"page_label": "22", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "5859a78d-4996-406c-b459-aeedac7e47c3": {"node_ids": ["14bd5ff2-3a5f-4def-b2b5-ba9b20e52e48"], "metadata": {"page_label": "23", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "2f0f4cdb-2162-4a73-bcd3-d1d99fd4e367": {"node_ids": ["efb5d0c7-3a03-4789-836d-c026d7fe2c55"], "metadata": {"page_label": "24", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "d7eb7878-9d87-44c8-b188-157a4310d91a": {"node_ids": ["cb488ce2-5d46-4123-ab72-abd7b981a0b4"], "metadata": {"page_label": "25", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "b0eea355-d026-450f-a1af-a854a4e1831e": {"node_ids": ["bd972c2a-1f98-4606-855e-03494b5b27ff"], "metadata": {"page_label": "26", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "0d02e631-42e7-4bc4-88d2-8eeee9a5f1bc": {"node_ids": ["4812daae-72a3-446d-a14b-50bb4187c6d8"], "metadata": {"page_label": "27", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "4623334b-26ba-4171-b230-020cd4e7c495": {"node_ids": ["5ef16dd2-de25-4ad8-8589-5926eb957dea"], "metadata": {"page_label": "28", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "e43f72ea-cca2-4704-9ce9-7d6ca0d97767": {"node_ids": ["7186eaf6-9d23-4e5d-812a-42a0c5e4b752"], "metadata": {"page_label": "29", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "0042e0ad-6f13-4eba-a0ca-ee0070520503": {"node_ids": ["18c999b9-4ed9-4ca5-9cbd-53d76a70d59a"], "metadata": {"page_label": "30", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "80905e45-e42c-49c2-b094-d9f9278421fd": {"node_ids": ["3798c5df-b908-4799-a81e-8f16bd8fe639"], "metadata": {"page_label": "31", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "82af4aab-61f5-4318-af34-845dbf2f9cf6": {"node_ids": ["bd3f63c9-e933-4b6d-9b8b-5886aa7894ae"], "metadata": {"page_label": "32", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "161e55d6-122d-469c-b58d-6e6268fde7cb": {"node_ids": ["ca12d9cb-e1e3-4180-a76f-35e2c2e1b576"], "metadata": {"page_label": "33", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "20db598b-26ea-4b2c-a2aa-f6cbeee26ec5": {"node_ids": ["ea6c8421-9bed-43fb-9ec4-ad61236bd6d8"], "metadata": {"page_label": "34", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "9de51659-385c-4ace-8e21-bafcdbb723ee": {"node_ids": ["0e2b01cb-7197-468a-9561-af3a93c1d753"], "metadata": {"page_label": "35", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "095a9765-5d18-4f6d-aceb-b11bfe488f38": {"node_ids": ["dedc11f4-ff7b-4049-b232-612de4384a2c"], "metadata": {"page_label": "36", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "e1179edb-419f-4bf4-8ce0-276785d40884": {"node_ids": ["84097fc2-16b3-43fe-bd2b-99d5b88f331a"], "metadata": {"page_label": "37", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "8436d163-6935-44cd-b3bd-a28873ffa2a1": {"node_ids": ["42d296d9-1ba2-4370-9946-12bd7a4125ff"], "metadata": {"page_label": "38", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "79473ffa-c9eb-499e-893a-bba37cdb9be4": {"node_ids": ["4da1df9f-bff7-4d4d-bddf-6028b47644df"], "metadata": {"page_label": "39", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "d0f36477-c84d-4f83-84f0-515680847e50": {"node_ids": ["30c71e31-9fff-4802-97d1-702d0994d6a6"], "metadata": {"page_label": "40", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "3ccad799-5463-4d8f-8cb8-801eda2ce454": {"node_ids": ["a486735d-0483-4dbc-933a-7b16a43e4eda"], "metadata": {"page_label": "41", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "21654204-db9a-4606-b41e-f59654e02bcf": {"node_ids": ["1d4c0ed6-1ac5-4c4c-92b1-6c2c61fcc674"], "metadata": {"page_label": "42", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "bc61e95f-9144-42e2-80a7-c5c2391cba9a": {"node_ids": ["c4041bc9-5540-409c-aa9a-5bf90f13acf1"], "metadata": {"page_label": "43", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "1ad82ce8-e7fd-4b83-bea8-533b0de6d01e": {"node_ids": ["d3b06769-bda1-4eac-88b4-99f7592cb9f8"], "metadata": {"page_label": "44", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "0d8388a3-6b23-441a-9ed0-8d1d3c4dd506": {"node_ids": ["90196853-2573-4356-8a6e-395b1994a6ee"], "metadata": {"page_label": "45", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "1edf5369-f138-436c-b217-c6cae3594368": {"node_ids": ["8e8164e9-ab1c-45ff-9f15-6df35a0db830"], "metadata": {"page_label": "46", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "eb7fb40a-4352-4d9d-896e-e6280aab9baa": {"node_ids": ["8c4bc6c0-d599-4e16-aeb7-7c688b5016b6"], "metadata": {"page_label": "47", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "c2776121-9715-4263-82f1-f6982c5c2681": {"node_ids": ["5f2d7bd0-f731-4c2f-a0bf-1290e9112e86"], "metadata": {"page_label": "48", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "4f45779b-b106-434c-afba-567bc0e38eaa": {"node_ids": ["bfd77798-185c-4cfb-989d-92ec293dda23"], "metadata": {"page_label": "49", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "502cb76f-1f1a-4835-bcb3-83633ff0f893": {"node_ids": ["ba03cf8b-9f1e-407c-b94d-38ba7aa8b2f7"], "metadata": {"page_label": "50", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "6caafe20-4175-43b5-8555-af71b26eba7b": {"node_ids": ["59708d29-7524-41fa-8e71-2b31536a1c85"], "metadata": {"page_label": "51", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "cf7c6d98-ea56-4e75-8e1a-7409d67ff1e7": {"node_ids": ["b7078e0b-6b94-42bf-a792-3046db3405ca"], "metadata": {"page_label": "52", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "01d2f9d2-eb93-42ce-b666-7d19edab6b55": {"node_ids": ["78ff9c8d-b5d9-44d6-afe1-e644dc1dfc1c"], "metadata": {"page_label": "53", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "d8a5566d-54b1-4c78-ac89-681688ff2232": {"node_ids": ["1f13f017-0688-4d47-9304-121bae14dd0b"], "metadata": {"page_label": "54", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "c09bb191-7702-4cd2-b6ad-c4bbb70000c3": {"node_ids": ["6c96ba8f-0ee3-4fb6-91cd-678fea4ac19a"], "metadata": {"page_label": "55", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "47713349-f5fb-45d3-bb93-54425e866dfe": {"node_ids": ["82bcf605-8274-4502-81c8-a23a0a5f1bd3"], "metadata": {"page_label": "56", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "01f7b517-bb5a-4608-a449-283b01530060": {"node_ids": ["3e152e59-4909-4f3e-b32c-7f66463636ff"], "metadata": {"page_label": "57", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "a37707be-4c71-4fa1-84a3-699f7989ec72": {"node_ids": ["14c54966-3412-440c-916c-873b15e4b6ff"], "metadata": {"page_label": "58", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "680cf164-0707-460e-8adf-992cb4372ede": {"node_ids": ["a7de8a5d-a3dc-4f48-8fe5-6291f15aebbe"], "metadata": {"page_label": "59", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "5fb840f6-b2a6-4793-87a6-2e4dfba56418": {"node_ids": ["73d84eb6-20bf-4662-b052-6008d4195c11"], "metadata": {"page_label": "60", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "6aff1379-6672-4f7f-8565-1a126fd91692": {"node_ids": ["07fa5598-de4c-4f6b-8142-b7340c47d85f"], "metadata": {"page_label": "61", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "6d35efa5-1d78-4d6c-bc8d-712f6aede4e7": {"node_ids": ["d23a5717-eae9-4b82-8c28-8d4c6ae2fb5d"], "metadata": {"page_label": "62", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "6c0e4ea5-2209-4d30-b863-219228260e96": {"node_ids": ["3194403c-c730-43c9-896d-2b56133584d4"], "metadata": {"page_label": "63", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "1aedcc24-899a-43ee-9086-3ccdaee16272": {"node_ids": ["99b56f5d-b06a-4771-b1e8-43ebd9b11e4e"], "metadata": {"page_label": "64", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "c4df5388-8f0b-4c4e-b0f0-aa1c88361f90": {"node_ids": ["cbc8d5a3-88dd-4849-a3be-fd63a28067aa"], "metadata": {"page_label": "65", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "5730c063-339c-46f5-8b53-29067b908177": {"node_ids": ["2f875a16-ade1-468d-97e1-a1366d332eab"], "metadata": {"page_label": "66", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "396aa6bb-9f1c-4ab3-a444-35075462f894": {"node_ids": ["7372305e-2893-4628-a0bb-14e47b8d289c"], "metadata": {"page_label": "67", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "1adea7d1-a367-46ef-b0da-ad544de6ae09": {"node_ids": ["7d806deb-c08a-4286-b339-907212deb5e8"], "metadata": {"page_label": "68", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "6973b224-8005-4694-b9f8-b765cb7823f3": {"node_ids": ["d9d7baf7-28ce-4d47-8167-cd35fb928a44"], "metadata": {"page_label": "69", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "f3e3118e-c22c-4d20-8e60-dc03f69d06b6": {"node_ids": ["3ecaf7ed-fb88-4e89-999f-ea1ef73aaec7"], "metadata": {"page_label": "70", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "4b512246-a8d9-4e5f-a031-808612addc82": {"node_ids": ["886fed0c-edce-454b-ab8b-682251d444f9"], "metadata": {"page_label": "71", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "eacc659a-6a20-41f0-928c-4d5f554f8515": {"node_ids": ["bf9e894e-0cb3-4663-be3e-d76bead94032"], "metadata": {"page_label": "72", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "857c3d33-be61-4de7-a660-249ac65f6d78": {"node_ids": ["7c8dd347-48f6-4c60-9b42-b98af9296b2b"], "metadata": {"page_label": "73", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "0ba5e8ff-a10b-4a3d-995e-acb7efaa5d33": {"node_ids": ["a5771adc-3094-42f2-9be0-c7691a45a576"], "metadata": {"page_label": "74", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "436c39c7-cee0-4ed4-8299-55c25dbc341f": {"node_ids": ["d4388c65-7c1b-4fe4-b408-d53a011aebdf"], "metadata": {"page_label": "75", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "0af0d4a3-c661-4ccf-90a8-5bfc5ea79af1": {"node_ids": ["521c7ece-3915-4493-81de-11b3c4d4ba3c"], "metadata": {"page_label": "76", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "a1a62f1c-3963-45fb-a51e-7a61f29ae0d3": {"node_ids": ["1706eb3e-b3b6-4903-b828-93d79e94fa48"], "metadata": {"page_label": "77", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "732e8b8c-1a07-48e3-84b2-b44eda8ae17a": {"node_ids": ["3bfb8c9d-d897-48e5-a333-811c6cc8e24e"], "metadata": {"page_label": "78", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "7e57de75-5c94-4914-a99a-f4230b2f0dd1": {"node_ids": ["1186a5d9-d2a9-468c-a814-0a829c139c4d"], "metadata": {"page_label": "79", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "1aa7e01a-99ac-4ff5-a85a-070e951fd07a": {"node_ids": ["a1c8fbcb-8a69-44be-be30-db573616b5d5"], "metadata": {"page_label": "80", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "eda820d9-bf1e-4e65-9963-0ae2d03f2508": {"node_ids": ["d335346d-3c5a-4c54-acf0-61b76e08c06e"], "metadata": {"page_label": "81", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "85e43d90-38ff-42ab-8bab-47bd4804eb15": {"node_ids": ["6618af7b-a3d7-4dfc-9562-ce34c50d654b"], "metadata": {"page_label": "82", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "f0d06ae8-be1b-4b7a-8ceb-4155b5f5c3da": {"node_ids": ["5dda6c9f-cfae-4b48-9ad5-494861089a5d"], "metadata": {"page_label": "83", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "3df45d45-aeb0-4729-8100-1fc7c872e758": {"node_ids": ["e8ef6c3b-d602-4c62-b535-b0952ea1caef"], "metadata": {"page_label": "84", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "8caafaed-fa69-40f1-957c-5dfa0b3f75db": {"node_ids": ["761e395d-e22f-49db-b29d-04f3464def3f"], "metadata": {"page_label": "85", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "d8c40a68-57de-4f8a-8636-08575d3f58a5": {"node_ids": ["ad8cab5b-ab33-46a4-8533-3ff625e5fa8c"], "metadata": {"page_label": "86", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "ec47f889-5b45-4978-aec8-979026432615": {"node_ids": ["57266b88-d0cb-4663-b42b-a6157f07d5f8"], "metadata": {"page_label": "87", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "9c101772-2e3b-4697-99ff-759843706198": {"node_ids": ["6c4553a5-ef75-4262-8f23-6f66431ebd31"], "metadata": {"page_label": "88", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "17b2bc7b-375c-45e8-ab6e-bdfc8b5eda99": {"node_ids": ["5d2cebac-96f0-4015-80c7-51dcd16a3785"], "metadata": {"page_label": "89", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "e4c3482a-23dc-4726-aa10-6f879255b476": {"node_ids": ["3557de32-a593-493d-ba2f-30b90ccf036e"], "metadata": {"page_label": "90", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "38f73c67-df23-4371-a305-9e9b205b443c": {"node_ids": ["27d7d452-877b-41ae-9f1f-d548a041193d"], "metadata": {"page_label": "91", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "8db0a2b0-6142-4fc8-96ad-9f87d8ff1bac": {"node_ids": ["36b35c60-ec60-42f8-bae5-70094bd496fc"], "metadata": {"page_label": "92", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "56785bdd-3dd4-4f66-882b-926fbfadc611": {"node_ids": ["2b87197b-a060-49a5-9c1e-e0f175d5b7bc"], "metadata": {"page_label": "93", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "91e75d1f-767e-43f4-842e-ff7824053d19": {"node_ids": ["b1085350-da18-4c2c-a338-97ff4fda27a7"], "metadata": {"page_label": "94", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "41ba24ba-a8b0-440d-9a5b-2236e072b3f3": {"node_ids": ["a6721acb-d7ef-404f-89a9-d3d18c5d520c"], "metadata": {"page_label": "95", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "b6897aa2-908b-4d5b-8161-fb8ba69b9149": {"node_ids": ["b805d233-742b-4e45-b29c-931b31c0a995"], "metadata": {"page_label": "96", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "437a5ac0-36e3-4349-a979-08267b3aeeca": {"node_ids": ["c6a887d0-2d39-4c63-b70b-0111cbc5befb"], "metadata": {"page_label": "97", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "e5b83dce-b00d-4752-9fdf-3b7a449dc762": {"node_ids": ["7efd4498-ebe6-43f4-95cd-a7dc1726e32e"], "metadata": {"page_label": "98", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "78a495fa-cd26-4dcb-9142-1866d4302537": {"node_ids": ["58caaa64-7f8b-49da-8074-a99fc55e6a93"], "metadata": {"page_label": "99", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "5c8cb371-cba2-44f8-b716-f242b3002cfd": {"node_ids": ["4cf94126-87b9-4341-bcf2-85fdc0b95e53"], "metadata": {"page_label": "100", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "49f5f0a5-a4c8-4c29-adf7-ecfbdbc03972": {"node_ids": ["64351fbf-ed26-45c7-9922-72962d5db87c"], "metadata": {"page_label": "101", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "d5b24b23-5036-48dc-8708-24e12d404eed": {"node_ids": ["b8cc7f4b-3413-4680-8948-373a70f6221f"], "metadata": {"page_label": "102", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "c2ac627f-466e-4556-8114-60ae785693cb": {"node_ids": ["32d61e79-d245-4eca-9257-22e578654686"], "metadata": {"page_label": "103", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "7a1ad0aa-c9ad-47da-b323-8efab5f9f343": {"node_ids": ["b2e9a988-acf6-40cc-82c2-b8e7657e166b"], "metadata": {"page_label": "104", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "30038fa0-084f-4a4a-bee2-b666edc9e4ab": {"node_ids": ["ad6d1ac9-f639-408c-ad1e-e5341cacecfb"], "metadata": {"page_label": "105", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "de833d5e-a605-4832-815c-cd6abca04310": {"node_ids": ["09254a6a-9eff-459b-9f00-8e4f8346c3bf"], "metadata": {"page_label": "106", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "35d95470-567f-4933-a765-f45d419d2568": {"node_ids": ["f6d7e3ab-b1d8-4e5f-a90a-c246048d9d55"], "metadata": {"page_label": "107", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "6fa3c1af-f6e0-4f82-84b3-fdd30a795c3e": {"node_ids": ["f0794ed5-af0b-48ac-bad3-7ac928042e0c"], "metadata": {"page_label": "108", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "3742b12a-3339-40c8-bcc5-c748f4fa9fc1": {"node_ids": ["3f08b7fa-8145-412c-b2d4-262a7275985a"], "metadata": {"page_label": "109", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "c0d228df-a7c1-4927-85d4-8cd6b473b8f7": {"node_ids": ["e35755c3-b2bb-4a7b-a6f2-03996d4e1e55"], "metadata": {"page_label": "110", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "ff979349-e5f6-46e6-9a87-7ceff6bba0e2": {"node_ids": ["40be5682-9391-430f-92b9-7d261d8bc3bd"], "metadata": {"page_label": "111", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "334a6b8a-f16c-4c8c-9a00-cd1c1f3ee03f": {"node_ids": ["0a462aa8-8c95-4a2b-981b-a4f127db29b0"], "metadata": {"page_label": "112", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "c89d5054-5b3a-4ec2-a92b-14c76d1b9615": {"node_ids": ["e281477d-6ca4-4e86-8868-75be31475cc8"], "metadata": {"page_label": "113", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "14b373c4-3720-469a-8224-99899644d57d": {"node_ids": ["03d6bb87-eb12-4b3b-b5b0-fb98d0f64674"], "metadata": {"page_label": "114", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "e7794e76-fbf7-424a-bf08-d9dd3590a621": {"node_ids": ["125f5689-0c86-4245-a5f7-f752ebcb6367"], "metadata": {"page_label": "115", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "1cc23a70-4b43-4212-a375-bbfc5a4e9426": {"node_ids": ["ab3fea51-5fba-48f0-a77c-36937da5e394"], "metadata": {"page_label": "116", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "5633fc5d-f40a-4de7-8335-8c03078c8daf": {"node_ids": ["90f5a906-388f-4465-80b3-d00d9e699988"], "metadata": {"page_label": "117", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "3765e01b-6a4f-4513-aad2-71609f8da0fa": {"node_ids": ["b1821d00-0624-452e-9289-ce4ee5263d8b"], "metadata": {"page_label": "118", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "b15da2c2-30cb-4527-98be-6d88db0b4395": {"node_ids": ["fae4ac76-5aa2-4210-b136-35add9ea7596"], "metadata": {"page_label": "119", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "835d4b08-2460-4c21-a2d0-c22f9654cb2b": {"node_ids": ["e282425f-88b9-49de-bc32-73891754d0be"], "metadata": {"page_label": "120", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "9da4e4a5-027d-4fe3-9c0a-bac394f15ba6": {"node_ids": ["b5e6ed49-d45c-4706-86d2-dcf015dcbf98"], "metadata": {"page_label": "121", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "b2dd5101-bb56-4a5f-846d-7aa2719d03d6": {"node_ids": ["10a9bebc-b877-4f0f-83ae-8e82b4962c5e"], "metadata": {"page_label": "122", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "326f55a3-634a-4a47-bab1-ac95742d3e7e": {"node_ids": ["8a757988-bf03-424a-82f2-575749a37891"], "metadata": {"page_label": "123", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "7a0108f2-e1e7-473a-8d57-4780f3260827": {"node_ids": ["dd8b3412-f7c0-4f3c-a715-43a32147f005"], "metadata": {"page_label": "124", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "818ee6f1-9056-41e1-909a-b85d19d347e6": {"node_ids": ["293db268-b3f0-4c3d-a72e-af8b18ded61e"], "metadata": {"page_label": "125", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "3e28515b-1f17-4768-b9b5-abb1d7ce64c2": {"node_ids": ["83419724-6a25-4730-8021-b7e4e775fa68"], "metadata": {"page_label": "126", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "e8f24e4b-5033-43c1-a776-8881210bf773": {"node_ids": ["c0b79eab-6d2a-4e2e-bff7-8828805dec0d"], "metadata": {"page_label": "127", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "cf00eff2-0dde-4432-895f-78670ec7a20a": {"node_ids": ["b1c4071e-28c7-4c43-9287-1a1c651af345"], "metadata": {"page_label": "128", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "5fbd64fa-13ab-4269-ab1a-560bce1e5fa4": {"node_ids": ["b7d8ec46-b0c6-4d0f-83ae-bef5664e4ec2"], "metadata": {"page_label": "129", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "841640b1-f4d4-4a34-a168-40525c6c315b": {"node_ids": ["e9331724-a38d-427f-8ef6-b8fce7b9d282"], "metadata": {"page_label": "130", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "f14380d4-68cf-40c5-bc7a-a7d80bdc8caa": {"node_ids": ["51050135-c949-452f-a829-32d1869e867d"], "metadata": {"page_label": "131", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "4766fc13-f4fa-45f0-8823-3fa8a0b57911": {"node_ids": ["80f431e5-5211-4c90-a414-0e9e77d06943"], "metadata": {"page_label": "132", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "b436a8aa-a87b-4a7c-a178-1a5ed4dfd923": {"node_ids": ["7ba6e2b0-a89b-4a90-afc4-e3bb0844b0eb"], "metadata": {"page_label": "133", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "25d42177-d6d8-48cd-a947-26d297445af3": {"node_ids": ["ec124b6f-cb00-455f-bdfc-97b119d85c4a"], "metadata": {"page_label": "134", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "eed0deb6-bfaf-4ddb-9fed-9c2e509cc87c": {"node_ids": ["aa3a206f-de45-4775-8979-ebab929ced40"], "metadata": {"page_label": "135", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "20b07551-e726-4cc3-aa1c-d6181269265f": {"node_ids": ["225fa297-1457-4464-980f-c1141df2f594"], "metadata": {"page_label": "136", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "348a48eb-dbd7-4679-89f0-8e0a433569cb": {"node_ids": ["63762716-622b-4e04-98da-b81583411e27"], "metadata": {"page_label": "137", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "bbfa7841-b8b6-4a11-87ee-9aa03ae449bd": {"node_ids": ["4cdb07ea-079d-41f3-8289-0e1c5fbc373d"], "metadata": {"page_label": "138", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "d31664d5-d3fa-4097-bd1d-07e4621dd930": {"node_ids": ["9fe93682-84c7-4c80-bff0-5356272cb635"], "metadata": {"page_label": "139", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "8f00096d-db1f-4317-820f-d1629dd43dc0": {"node_ids": ["5b36ef79-28bb-4331-9d62-d1bb12091db2"], "metadata": {"page_label": "140", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "5e423cfb-20b1-4776-8485-8d6444a56c64": {"node_ids": ["692dad3e-d78c-465e-a11d-94f5035d93f9"], "metadata": {"page_label": "141", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "3dcafa15-432d-4f13-9897-fa1eb2cfc480": {"node_ids": ["b9787418-e30a-4c31-950c-fb4596ff7253"], "metadata": {"page_label": "142", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "3c8d66d7-9dc8-4fc9-8774-d2f4719d57af": {"node_ids": ["a18c47b3-be35-492c-8bac-27186cad3c73"], "metadata": {"page_label": "143", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "aa60af45-ad45-4c3e-9c76-f9bf7a54c47d": {"node_ids": ["65f6fd75-ab2a-4a01-b761-24f117938263"], "metadata": {"page_label": "144", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "ed84d867-1fcf-403c-9973-0b54d2b70508": {"node_ids": ["d71999cd-1f98-4857-8213-425e7a7eec43"], "metadata": {"page_label": "145", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "c5e7b84e-209f-448a-ae51-60b63ac6448f": {"node_ids": ["cab3cc55-8d15-4988-a7d9-9a1d9191d230"], "metadata": {"page_label": "146", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "3830a3e5-df61-4614-98c8-db99a6a56921": {"node_ids": ["30970b81-9e72-4daa-b9e8-50d71f693e33"], "metadata": {"page_label": "147", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "eddec76d-0f1e-4e49-b78e-e333e0a51186": {"node_ids": ["58ced462-2e01-4f77-801c-846bf645c609"], "metadata": {"page_label": "148", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "8792f095-a0d4-414d-bc50-3ceb326f1378": {"node_ids": ["e8f9b9fb-797a-40c5-a599-0be64afb4be5"], "metadata": {"page_label": "149", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "3fa2f7b5-64ad-4b92-a1a1-e2ee5d78eba2": {"node_ids": ["3bb309ab-b1bd-426b-9f67-d2cf8a5dc648"], "metadata": {"page_label": "150", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "d6add2fb-aadf-4748-b00c-2653fa8688ca": {"node_ids": ["4eece9dd-677f-4a51-9e92-fe830de127c8"], "metadata": {"page_label": "151", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "869cac80-acef-42eb-b1d5-826ea0ce9d34": {"node_ids": ["9a10d18d-9dd9-4893-9d66-574a8357a3fa"], "metadata": {"page_label": "152", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "bcc9d47b-f9bd-484f-a5ec-189792fc5d3d": {"node_ids": ["2f5ab201-6a6e-4a49-adfa-0faf0ed47e4d"], "metadata": {"page_label": "153", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "38f3bcf4-1628-4c9f-a290-b6c4c58728e7": {"node_ids": ["0bec327f-1ed7-4467-b07d-51d13124954e"], "metadata": {"page_label": "154", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "4baae727-d6e3-46d0-8666-19a8053866b2": {"node_ids": ["b6e8c767-4eaa-4659-9a12-2ef2d53961b0"], "metadata": {"page_label": "155", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "fad7eb1e-21dc-4884-839c-77b8f0babb5e": {"node_ids": ["b32fee75-694e-4dc5-9996-3b216a55df65"], "metadata": {"page_label": "156", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "6f4a4486-1ffe-4b24-b253-a7dc6204be84": {"node_ids": ["70b13508-da79-4cef-a151-9ed6e01a0da8"], "metadata": {"page_label": "157", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "f7744244-7a9c-47cd-a937-f5571e847db8": {"node_ids": ["e9c0f66a-2a4f-4fd7-b583-a976bdda1ae8"], "metadata": {"page_label": "158", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "7e651ab0-d8b3-408c-9845-cde29604d0de": {"node_ids": ["c1b9644a-0fd1-41ea-b53b-feff071056b1"], "metadata": {"page_label": "159", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "6d377472-6fd4-4a2f-9520-00fc83f3e0b9": {"node_ids": ["bab9a562-7321-4b91-80c3-e0d0f6340e5a"], "metadata": {"page_label": "160", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "ef7786b5-762b-450a-a5df-946db2e6613b": {"node_ids": ["f8e4aa28-53f7-40ee-9023-9b429829084d"], "metadata": {"page_label": "161", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "b4831ca9-340f-4d98-bd7d-40831485ad72": {"node_ids": ["c343ecfb-f7c8-42c8-9904-1b44f79b61c0"], "metadata": {"page_label": "162", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "b2871e88-63f3-4547-aac9-923892bbd446": {"node_ids": ["6f5922f6-a8cf-468a-b652-c57ca0389c5a"], "metadata": {"page_label": "163", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "1225248a-38e7-45aa-87f5-94be3a256d4b": {"node_ids": ["217284b2-fc35-4509-9658-53574b0b1735"], "metadata": {"page_label": "164", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "20261848-b2e2-41ef-b570-2e7184ebd002": {"node_ids": ["3f325a54-059f-4b86-98cc-5877a1c8ebea"], "metadata": {"page_label": "165", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "064a3061-81fa-4d8f-8bc2-1c9f6b1fcec4": {"node_ids": ["180821ba-7e2c-4425-a51c-36692216538e"], "metadata": {"page_label": "166", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "82dea2b0-99d3-4e05-8e0e-20499e411536": {"node_ids": ["6c479611-8dfb-4854-ad11-6ed97de7d301"], "metadata": {"page_label": "167", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "6b67c575-de4c-45af-8879-de685f2fa07d": {"node_ids": ["67dfd496-4f99-4139-bca7-49ae1457fd94"], "metadata": {"page_label": "168", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "258c0db3-3db0-48d0-951d-d41ae7eec8e4": {"node_ids": ["97887d07-38bd-43fb-a19a-696cc0b29006"], "metadata": {"page_label": "169", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "1950d2e1-3850-465d-8ef0-503f60fda535": {"node_ids": ["6bba857d-b5a4-4a84-9220-0e2e0d3ff66d"], "metadata": {"page_label": "170", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "00be94d4-570a-4fa7-b418-269d5483bdff": {"node_ids": ["3a3b1a38-ba02-493b-ab1c-5a9b44c7ac7c"], "metadata": {"page_label": "171", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "e98581f4-a351-42f6-9360-96b73bce7805": {"node_ids": ["4b645d6e-5f22-4388-9083-0da65b6d49cb"], "metadata": {"page_label": "172", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "dcae24b4-d978-4eb9-9f12-69ba1edebb33": {"node_ids": ["d55094e9-7ab5-4869-be23-0d104a12734d"], "metadata": {"page_label": "173", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "4897a1e8-5167-4ee3-9d6a-62bee579eef7": {"node_ids": ["d0a5b44c-acb8-4cce-9eb3-b8a8e2cefe63"], "metadata": {"page_label": "174", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "d372207f-2f02-4f53-9960-61a7c40bbaf4": {"node_ids": ["de80fd66-c156-4e40-95ff-a8d444d6b137"], "metadata": {"page_label": "175", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "5848bd23-c11b-4bea-8e08-8e4113a55a84": {"node_ids": ["ea98e248-7649-4810-935d-2714d132875d"], "metadata": {"page_label": "176", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "5f735931-1250-4e66-a41e-abae1ba486cd": {"node_ids": ["4ff7f7a5-2580-43fe-b5b5-317e58601abe"], "metadata": {"page_label": "177", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "b3f6032e-a718-458c-a072-34c5efbf0d87": {"node_ids": ["40be074e-04d1-46ff-9f77-7264ac46d2be"], "metadata": {"page_label": "178", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "3a620500-42fd-4cd7-ac2a-12300089bee9": {"node_ids": ["89e7fa30-b418-42a8-9310-a25edf3dc4da"], "metadata": {"page_label": "179", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "d8718249-f91e-4923-b9af-fefea8251c42": {"node_ids": ["9c51e4cf-45c7-48bc-88fa-e1a5033115cd"], "metadata": {"page_label": "180", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "5634f18b-378a-46ca-87ff-cc8eca927009": {"node_ids": ["5b22d9dd-4fa4-48c1-b3a8-1b876c7df412"], "metadata": {"page_label": "181", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "563e0d76-594e-4a2d-935e-e1429efb7892": {"node_ids": ["9cd72ee1-0212-4259-a749-bee870030872"], "metadata": {"page_label": "182", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "3ad79ddd-31af-4a91-89d7-ecc2fa25dc51": {"node_ids": ["ca7f1566-6e0a-4494-9f5f-03ace22ace6c"], "metadata": {"page_label": "183", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "daf465f9-90c6-48fe-be55-3b0709bd1457": {"node_ids": ["e7e99d37-b7f7-48c5-a8ce-f64735718b3c"], "metadata": {"page_label": "184", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "416d1dc7-2a52-4cae-803b-3db1cc81dd0d": {"node_ids": ["d8639129-579a-4ae8-b57c-5e83edeadf48"], "metadata": {"page_label": "185", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "d2d0a46d-ae2f-400e-944d-09347e4ae23c": {"node_ids": ["c6fc7014-55cb-48f8-a593-cc6867ea757c"], "metadata": {"page_label": "186", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "a05c800f-72da-4322-a762-5100951c04be": {"node_ids": ["10d81b5a-4d2f-413c-a2dd-644e348332e3"], "metadata": {"page_label": "187", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "d07f0cb2-ff49-4f57-b12a-ddf60b83a1c6": {"node_ids": ["931f22a4-2e67-4ce0-8fab-56bddb7453ed"], "metadata": {"page_label": "188", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "aa41df2c-0898-45e3-97b7-03d5aea41b9a": {"node_ids": ["f40ef031-918b-44b3-9673-68deec297b8a"], "metadata": {"page_label": "189", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "82673f8d-8a0c-4ffa-a97f-9ad79fed6cc7": {"node_ids": ["951c8b05-8e18-409c-972c-c739e1cf18b7"], "metadata": {"page_label": "190", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "eac979ef-1d4f-435f-a3a3-6548688be4af": {"node_ids": ["1dd33ca4-5082-490e-9aba-0a35935e812e"], "metadata": {"page_label": "191", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "14283408-202d-46c8-b8b9-974286ca17e0": {"node_ids": ["4bb2393b-26e9-4e0b-8817-8d2c0dfb15f4"], "metadata": {"page_label": "192", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "d984b114-6b0d-4e7e-9b58-701adff09c52": {"node_ids": ["bb253e7c-c58a-41d5-b501-ca8fc2c5d12f"], "metadata": {"page_label": "193", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "4ab87cbc-38d8-444e-b299-4760ecc95850": {"node_ids": ["dfc16d08-0ed4-4ad1-86f6-f47632506fe9"], "metadata": {"page_label": "194", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "18ac86b8-11df-4eb6-af7c-9d9c01d214e0": {"node_ids": ["209f5f9f-ab69-4447-ba2b-5cdee0eb99ac"], "metadata": {"page_label": "195", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "7858349c-b77c-472b-8df6-a26066c7d451": {"node_ids": ["0955cedd-3b78-476d-b453-0017a284f1c6"], "metadata": {"page_label": "196", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "93ac0b73-2e13-44ca-8ec5-b1e161740190": {"node_ids": ["7ea1c266-9a26-40b1-84b5-095bf1cb85bb"], "metadata": {"page_label": "197", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "a5f64832-b415-4443-9e20-c17ca0ba0529": {"node_ids": ["d5983fe0-16c7-4f37-9ee3-f103f3800fa1"], "metadata": {"page_label": "198", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "bbe439c8-c461-4e00-86a5-76118d74415f": {"node_ids": ["161db5f2-736f-49ba-9a3c-96bbbcc5a29e"], "metadata": {"page_label": "199", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "7aa0df53-e9da-4010-b4b1-d983e02c63ed": {"node_ids": ["29ea5e7c-ab99-4de8-974a-5fff254a393e"], "metadata": {"page_label": "200", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "a6651732-3dcf-43fd-b7ed-029796f62563": {"node_ids": ["382dfbc1-305e-4f23-8de7-b00df8761d8d"], "metadata": {"page_label": "201", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "7df2878c-1bb5-4a0a-88a5-36436e70df85": {"node_ids": ["1077cd10-ffd4-41b2-9d07-c3ea87af26eb"], "metadata": {"page_label": "202", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "a81c50a3-f9cc-4743-a3a7-820c92335054": {"node_ids": ["e86b8929-dc2c-47ac-a9d0-c9c478514323"], "metadata": {"page_label": "203", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "c70825b3-ac02-4d9a-a32c-4b0dd2a5f234": {"node_ids": ["7aaaece6-1122-4ff9-a607-7acdee323849"], "metadata": {"page_label": "204", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "fe366e48-557e-4c14-9205-1081e4638421": {"node_ids": ["3724ad33-3d7a-4105-a16b-b6e5cb5e8ee8"], "metadata": {"page_label": "205", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "65a54a9c-2772-4248-ae98-3ee4d1074139": {"node_ids": ["f58719b9-4f75-494b-904d-94001e4c3859"], "metadata": {"page_label": "206", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "6a9ab7ee-d36c-40c0-be21-ef840fbca72d": {"node_ids": ["ae26c119-47b1-45b4-a448-74dba839b47d"], "metadata": {"page_label": "207", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "2c9fa6b5-0991-4eb7-be61-78c2938cd45f": {"node_ids": ["f16596f9-8be3-4906-96fe-1fc64316d570"], "metadata": {"page_label": "208", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "bf407efa-1dea-4775-ad5b-0d965218950e": {"node_ids": ["f0287f81-6f0f-4f79-ae9b-722d643d78b7"], "metadata": {"page_label": "209", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "ed5f81a6-8811-4c56-897b-d2a32890474b": {"node_ids": ["266d07d5-acfd-4aa1-9b13-fd8b57720e36"], "metadata": {"page_label": "210", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "bf1c2921-74c6-46c9-80e2-3e431c4eba3d": {"node_ids": ["be2043de-5d86-4f2a-b84d-e4a6a66b4afe"], "metadata": {"page_label": "211", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "b56a82a2-c770-4bb0-9ed2-cf3b2d7672e5": {"node_ids": ["6782f2ef-f825-4c20-b376-a4b2947df8a0"], "metadata": {"page_label": "212", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "a75b0140-98ed-40d4-ab41-cdb883fe3c59": {"node_ids": ["6d6d9a0c-8ed0-4d79-bbcb-fdc5d5e62a08"], "metadata": {"page_label": "213", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "8fdb6043-e331-4fd4-9ffd-9bb9e52e2b2d": {"node_ids": ["a1b573bd-908e-412b-b669-0952f80f9f79"], "metadata": {"page_label": "214", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "982b14df-9540-49fd-b6a2-ee74b64e2c2e": {"node_ids": ["1e3e086e-456c-45af-82cb-5591371385c0"], "metadata": {"page_label": "215", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "4438087d-e9cb-4d1c-90a6-226b4c818653": {"node_ids": ["4b7e4006-b47f-4778-9fe5-b5fa3f598dab"], "metadata": {"page_label": "216", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "c0814240-59b6-4478-8800-c38aef5806e0": {"node_ids": ["bf54353c-80e2-4b83-b10b-73cf7d6e77ef"], "metadata": {"page_label": "217", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "750d2afb-6154-4bb0-b75c-94350ab24470": {"node_ids": ["244bed27-7550-47f7-b6d2-1a6ab19bc14a"], "metadata": {"page_label": "218", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "8f43f7f9-ca83-4ab3-aaaf-3223bb9077f3": {"node_ids": ["6646e6f1-c049-4986-9489-83ecb0f10efe"], "metadata": {"page_label": "219", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "3d77817c-7b4b-4b7a-9372-a658604199a2": {"node_ids": ["a153dfed-198d-4ced-9a3b-a75f1db45803"], "metadata": {"page_label": "220", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "a3d83e46-9fed-4c80-8d56-fab85cee6602": {"node_ids": ["5da19107-3e25-45a8-9f01-90c88ce669e9"], "metadata": {"page_label": "221", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "99f40ced-435e-4b29-a537-1ca0c34d5f67": {"node_ids": ["12350cf8-3dce-48b7-a276-3c29a58a69b7"], "metadata": {"page_label": "222", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "c3f51d2a-f0ce-4002-a9d0-008c5b176894": {"node_ids": ["114988d4-e670-43b3-a747-f8ea92ec0c63"], "metadata": {"page_label": "223", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "cbe0f994-ec34-4ba3-a98d-7ca62142e9f6": {"node_ids": ["bd6e815b-aca8-48bd-8be9-5a849b041a7b"], "metadata": {"page_label": "224", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "c9a9832f-b4d9-466d-9819-dd6a7771732f": {"node_ids": ["010c713c-7965-470d-879c-b271a8346237"], "metadata": {"page_label": "225", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "68066bd9-2ddd-452d-b7da-1b861a1a9fd6": {"node_ids": ["da786d83-e27a-4d59-8f0a-db09d777bf8e"], "metadata": {"page_label": "226", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "874ea894-10a7-4919-8aab-65e5b9e17ac8": {"node_ids": ["10c519b6-50a5-49b8-ab08-f79538a7ff99"], "metadata": {"page_label": "227", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "bd2b2472-7708-4bc4-9254-616396329019": {"node_ids": ["a0549b03-fb77-4586-95fb-c2adceaa8b49"], "metadata": {"page_label": "228", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "c0c5908d-b277-489d-9cf5-131f84ff5187": {"node_ids": ["9de3211b-ae59-4e7b-a886-a6a82a817961"], "metadata": {"page_label": "229", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "28219316-9dfd-460f-9c8f-8ed3edd00a94": {"node_ids": ["b98ffc50-c1b0-40bc-951b-d4e2739da582"], "metadata": {"page_label": "230", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "82c2bc05-2027-4011-83d9-5e18c25e686e": {"node_ids": ["3b8cf4e7-a5e3-4006-9daa-b94614036164"], "metadata": {"page_label": "231", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "da5523e3-b933-457c-a9a8-c93d97ce5d16": {"node_ids": ["cddc7160-ae05-479c-a306-d95c79c0c1a5"], "metadata": {"page_label": "232", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "d50252db-c228-4d91-b27d-43e8634686d1": {"node_ids": ["99ed230e-b4a0-4181-a119-2807105b479f"], "metadata": {"page_label": "233", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "3187257b-50bc-4c1c-b2a7-65bd975d117b": {"node_ids": ["d92db686-0c45-4264-92c7-a6bf205a4746"], "metadata": {"page_label": "234", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "8750c1f7-50cf-4cca-bed8-6ce5571083d7": {"node_ids": ["18f2f9b9-1331-4ce5-a362-deb5d8fb4db0"], "metadata": {"page_label": "235", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "c8272ec2-af00-4249-9fea-1e1de93b9a91": {"node_ids": ["dedabc09-5f7d-4468-8e25-a189f0749f06"], "metadata": {"page_label": "236", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "d20c7ef2-3cc4-478e-8021-a9b33c87b5ac": {"node_ids": ["107ae703-9b95-4cf6-8814-40183ac0a2dc"], "metadata": {"page_label": "237", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "6b688319-9cd6-4e69-b923-56c34d13a703": {"node_ids": ["99fef07a-0a29-44ea-b65f-c83545bb4947"], "metadata": {"page_label": "238", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "b24f9350-12f6-4b97-bd8b-a64425d0c89c": {"node_ids": ["648c1945-0c6d-4981-b2b0-6e270c9be64f"], "metadata": {"page_label": "239", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "21c17c90-ab28-4faa-828a-d0b095a66af4": {"node_ids": ["bf60fcc5-8df9-42f2-b964-9d3ff5ea7b53"], "metadata": {"page_label": "240", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "06c7d0d7-1037-4c50-ba85-5d0287cb80d0": {"node_ids": ["f8692c69-720b-453a-8a30-f73c4b12746d"], "metadata": {"page_label": "241", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "6cb32b6a-8d69-4213-8e56-2475e553b488": {"node_ids": ["02550537-4e6e-490c-999c-9d6622e3d9f9"], "metadata": {"page_label": "242", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "621417a0-fade-426b-a9cc-0ae16f8eddf0": {"node_ids": ["f9f0964e-59e5-4f94-9021-913ecf3627c7"], "metadata": {"page_label": "243", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "c21c4975-ac8a-45dd-a918-7adbf9276cfd": {"node_ids": ["ee5981f6-84ef-4bab-b692-c4c14efdda6e"], "metadata": {"page_label": "244", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "9e13f3f6-9a15-445a-b89b-94064c440deb": {"node_ids": ["abc34b3a-b898-4acf-b77e-e021c0e82e0a"], "metadata": {"page_label": "245", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "38d4170c-00d0-46d3-8f53-bf0c2d5cd615": {"node_ids": ["f749a2c8-c7e7-438a-9033-1cdce0e6bbbc"], "metadata": {"page_label": "246", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "8942beb4-06af-4791-bdb9-ec46ce5af85b": {"node_ids": ["dabc6da1-0c12-47a8-8f70-38e431e2c87c"], "metadata": {"page_label": "247", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "7d692460-1447-4c90-ad40-225d06e3c6e1": {"node_ids": ["074c1ca4-8f8b-43fc-a161-463d908396f9"], "metadata": {"page_label": "248", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "6dea04da-ac6d-4810-a820-a663ab293c55": {"node_ids": ["2b83110f-8403-4c7a-b468-126a63d20847"], "metadata": {"page_label": "249", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "febd701f-eef3-48b3-95f4-28c343f9e48c": {"node_ids": ["2e439dd9-6b85-4be1-b9a6-16538a1d7362"], "metadata": {"page_label": "250", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "1c331643-ec85-4bd2-97af-17ba1d238ac6": {"node_ids": ["e967ada2-2b18-4724-85f0-f25908ecc66a"], "metadata": {"page_label": "251", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "11b6d544-fbeb-4fd2-94dd-64e81b524802": {"node_ids": ["b77b2abe-67c9-46dc-be55-0abc3a89b485"], "metadata": {"page_label": "252", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "ae53d6d2-8c67-45f1-9c9a-96e927b6aa19": {"node_ids": ["489a2b51-ae8d-4870-89e4-93b9e9879962"], "metadata": {"page_label": "253", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "c1e9ea9d-10e1-4477-b2cb-2db25670dcc5": {"node_ids": ["d6249839-9ce3-4840-b60b-efdbf409f335"], "metadata": {"page_label": "254", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "1dd86f1b-f223-428a-be80-4977f47aa5d5": {"node_ids": ["48f93d15-892c-4298-b27b-da90efa2770c"], "metadata": {"page_label": "255", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "69f37083-fc6f-4e7e-ad0a-4338b6a58039": {"node_ids": ["08e133cb-341f-4ea4-b393-9e47961b5251"], "metadata": {"page_label": "256", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "17337504-6eaa-4c84-9d8a-bb4ca713a4f5": {"node_ids": ["bc18ec94-26e8-4614-8b3c-248b580e6cbb"], "metadata": {"page_label": "257", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "4a2dae41-6db6-4a38-ba4a-baec9d4ab4cf": {"node_ids": ["dea4601f-32b0-4d92-953c-69bd68f61843"], "metadata": {"page_label": "258", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "67c7361c-2a01-4ab9-b72d-66766a606d1b": {"node_ids": ["8eaf02fd-be5c-45ab-bb7d-006a389b5123"], "metadata": {"page_label": "259", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "3e112cd4-9008-44b8-8412-a4576ecf12b5": {"node_ids": ["3f1d8d90-8697-4120-8528-91f1d30117e8"], "metadata": {"page_label": "260", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "877ec2e1-9385-459a-8d46-0d3fe278f76a": {"node_ids": ["f900ad0e-5a1d-44c7-bba8-5a2b4527ffbf"], "metadata": {"page_label": "261", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "ede089db-1b54-4574-90c4-89dea062f48b": {"node_ids": ["ee24e8fa-63dc-48b8-8824-dc2573102674"], "metadata": {"page_label": "262", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "8c3d4f5f-2679-4b4b-8018-519a4c2fc572": {"node_ids": ["207c5a1d-c24b-42be-889c-cd7e372c5f0a"], "metadata": {"page_label": "263", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "f4586d3c-e242-406a-b269-e0ed8a38420c": {"node_ids": ["64b53b74-9a7a-4bc0-9c20-26aba5609488"], "metadata": {"page_label": "264", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "c1200bc5-bc82-4044-aa10-d023e8b32c0c": {"node_ids": ["3684b8ec-7fff-48c1-8eed-d8b0bd65eae9"], "metadata": {"page_label": "265", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "f7e41abb-cd1a-4be2-b76b-6f00e4f9020b": {"node_ids": ["4d6fe5cb-c414-4a51-a213-d702f06dea54"], "metadata": {"page_label": "266", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "6e8cea08-d2d1-4484-a8bd-d46984906905": {"node_ids": ["7bfdce65-7757-4945-8c48-6a58196ee2a2"], "metadata": {"page_label": "267", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "1bceb46f-bd5e-4210-bff4-5a336c12dd99": {"node_ids": ["17393d01-f2e6-44b5-956e-359bfa2ab4cd"], "metadata": {"page_label": "268", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "26b2855c-4e30-458a-94cb-9726c6195e0a": {"node_ids": ["50a6d0eb-773b-45a1-b0cc-fae01398f7be"], "metadata": {"page_label": "269", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "01a92845-c01a-4d1c-9a11-36cb2676104a": {"node_ids": ["97b80597-248a-4277-8438-0737a134c979"], "metadata": {"page_label": "270", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "fd4720c2-3eac-43e9-833b-c7ec1ed8a843": {"node_ids": ["2d2006e4-6739-4562-918d-112cf2f53516"], "metadata": {"page_label": "271", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "819e8f6c-1e5d-4f20-8c60-ae62273c124c": {"node_ids": ["4c646280-00b9-43c8-ab7b-13ab26b6b1be"], "metadata": {"page_label": "272", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "c988fb12-5de4-4579-8e7d-d38710855bcd": {"node_ids": ["992cabfc-f295-4ff4-930f-5773add28a36"], "metadata": {"page_label": "273", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "4525e89f-e9d9-4dc4-b1bf-8de9ee01e4bc": {"node_ids": ["1e7cc2ad-be8c-4a18-b5cd-07378fbf234b"], "metadata": {"page_label": "274", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "3d12bf2b-4759-469a-bb84-c4067f574ec0": {"node_ids": ["54ba19aa-3d69-4885-8d66-c55cf46c8c40"], "metadata": {"page_label": "275", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "08407864-cf54-4209-b431-0e999e4820c1": {"node_ids": ["8193573c-7e0f-4ebb-a54b-ad17a077b004"], "metadata": {"page_label": "276", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "476860e1-3068-4237-8576-1e0a10731874": {"node_ids": ["472c72c8-44fd-4a80-b565-9ae39b4f6c5e"], "metadata": {"page_label": "277", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}, "7331707d-819b-4f58-8527-5c1f07c43899": {"node_ids": ["04cd2e79-8089-4999-bbc2-06591e813a77"], "metadata": {"page_label": "278", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}}}, "docstore/data": {"1c9b7fc8-1e2f-4686-b289-f0e51fc9eb44": {"__data__": {"id_": "1c9b7fc8-1e2f-4686-b289-f0e51fc9eb44", "embedding": null, "metadata": {"file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\blockchain_projects.md", "file_name": "blockchain_projects.md", "file_type": "text/markdown", "file_size": 844, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "db76cb0b-e7e4-40db-804e-7494c22977ea", "node_type": "4", "metadata": {"file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\blockchain_projects.md", "file_name": "blockchain_projects.md", "file_type": "text/markdown", "file_size": 844, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "6576e7babd6b80fc666afe9abce9db93d07cbaac022f536f5544d843c08c455c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Blockchain Research Projects\n============================\n\n1. Supply Chain Transparency System\n- Technology: Hyperledger Fabric\n- Key Features: \n  * IoT sensor integration\n  * Smart contracts for compliance\n  * QR code product tracking\n- Outcomes: 40% reduction in dispute cases\n\n2. Decentralized Identity Management\n- Platform: Ethereum (ERC-725 standard)\n- Innovations:\n  * Zero-knowledge proof authentication\n  * Biometric integration\n  * Cross-platform compatibility\n- Challenges: Regulatory compliance issues\n\n3. NFT for Academic Credentials\n- Framework: Polygon blockchain\n- Implementation:\n  * University pilot program\n  * Tamper-proof diploma issuance\n  * Wallet-based verification\n- Results: 12 institutions adopted in Phase 1\n\nEmerging Trends:\n- Blockchain + AI convergence\n- Layer 2 scaling solutions\n- CBDC interoperability research", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 844, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "58f7f627-795c-4280-bda3-28a223c75ba1": {"__data__": {"id_": "58f7f627-795c-4280-bda3-28a223c75ba1", "embedding": null, "metadata": {"file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\data_science_summaries.txt", "file_name": "data_science_summaries.txt", "file_type": "text/plain", "file_size": 844, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3dac29c3-4e14-43bc-bcda-33782b4e87fe", "node_type": "4", "metadata": {"file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\data_science_summaries.txt", "file_name": "data_science_summaries.txt", "file_type": "text/plain", "file_size": 844, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "1cfd9bee6c69b7544f2f721234c74c8b3459814942b42c30a8db8d09ba06a34d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Data Science Research Summaries\n===============================\n\n1. Predictive Modeling for Customer Churn\n- Dataset: Telecom company user logs (1M records)\n- Methods: Random Forest, XGBoost, Logistic Regression\n- Key Finding: 89% accuracy in predicting 30-day churn\n- Tools: Python (scikit-learn), Jupyter Notebooks\n\n2. NLP for Social Media Sentiment Analysis\n- Dataset: 500k tweets (COVID-19 related)\n- Methods: BERT, LSTM, TF-IDF + SVM\n- Key Finding: BERT achieved 92% F1-score\n- Challenges: Class imbalance\n\n3. Computer Vision for Medical Imaging\n- Dataset: 10k chest X-rays (COVID/normal)\n- Methods: ResNet-50, Transfer Learning\n- Key Finding: 94% sensitivity in detection\n- Ethical Consideration: Potential bias in training data\n\nFuture Research Directions:\n- Multimodal data fusion\n- Explainable AI techniques\n- Edge deployment of models", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 844, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "259d126d-75fe-44d4-94e7-bf61818afd26": {"__data__": {"id_": "259d126d-75fe-44d4-94e7-bf61818afd26", "embedding": null, "metadata": {"page_label": "1", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4eb28fbc-be8a-4798-be3d-223939be1bc5", "node_type": "4", "metadata": {"page_label": "1", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "8bb433ef292dd081e6e9d7fe982daa8251e842c24882e3a1b22453b96466d7b3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "1 | P a g e  \n \n \nFULL STACK DEVELOPMENT \n(R20A0516) \n \n \nLECTURE NOTES \nB.TECH III YEAR \u2013 II SEM (R20) \n(2022-2023) \n \n \nDEPARTMENT OF COMPUTATIONAL INTELLIGENCE \n(CSE-AIML,AIML,AI&DS) \n \n \n \n \nMALLA REDDY COLLEGE OF ENGINEERING &  TECHNOLOGY  \n(Autonomous Institution \u2013 UGC, Govt. of India) \n(Affiliated to JNTUH, Hyderabad, Approved by AICTE - Accredited by NBA & NAAC \u2013 \u2018A\u2019 Grade - ISO 9001:2015 \nCertified) Maisammaguda, Dhulapally (Post Via. Hakimpet), Secunderabad \u2013 500100, Telangana State, INDIA.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 509, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8dbacbc2-668f-476e-ab6d-7a9914447e0c": {"__data__": {"id_": "8dbacbc2-668f-476e-ab6d-7a9914447e0c", "embedding": null, "metadata": {"page_label": "2", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "57434039-675b-49cb-86fe-76cbd3e348a3", "node_type": "4", "metadata": {"page_label": "2", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "0c5078c5c64810fe84c3015f82d9af80d55b21b20009a95df14122a1864f3f2f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "2 | P a g e  \n \n(R20A0516) FULL STACK DEVELOPMENT \nCOURSE OBJECTIVES: \n \n1. To become knowledgeable about the most recent web development \ntechnologies.  \n2. Idea for creating two tier and three tier architectural web applications.   \n3. Design and Analyse real time web applications.  \n4. Constructing suitable client and server side applications.  \n5. To learn core concept of both front end and back end programming.  \n \nUNIT - I  \nWeb Development Basics: Web development Basics - HTML & \nWeb servers Shell - UNIX CLI Version control - Git &Github \nHTML, CSS \n \nUNIT - II  \nFrontend Development: Javascript basics OOPS Aspects of \nJavaScript Memory usage and Functions in JS AJAX for data \nexchange with server jQuery Framework jQuery events, UI \ncomponents etc. JSON data format. \n \nUNIT - III  \nREACT JS: Introduction to React React Router and Single Page \nApplications React Forms, Flow Architecture and Introduction to \nRedux More Redux and Client-Server Communication \n \nUNIT - IV  \nJava Web Development: JAVA PROGRAMMING BASICS, \nModel View Controller (MVC) Pattern MVC Architecture using \nSpring RESTful API using Spring Framework Building an \napplication usingMaven \n \nUNIT - V  \nDatabases & Deployment: Relational schemas and normalization \nStructured Query Language (SQL) Data persistence using Spring \nJDBC Agile development principles and deploying  application in \nCloud", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1390, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "54f2945a-6730-47c0-a27e-9aacdbf06e34": {"__data__": {"id_": "54f2945a-6730-47c0-a27e-9aacdbf06e34", "embedding": null, "metadata": {"page_label": "3", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2a3eb978-d87a-4926-bf4f-62d01c1556a3", "node_type": "4", "metadata": {"page_label": "3", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "d4d112e5ad0a250dd9aac93a0a5e31f661c6c6c913da8a89ea4e60554737d6e1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "3 | P a g e  \n \nTEXT BOOKS: \n \n1. Web Design with HTML, CSS, JavaScript and JQuery Set Book by \nJon Duckett ProfessionalJavaScript for Web Developers Book by \nNicholas C. Zakas \n2. Learning PHP, MySQL, JavaScript, CSS & HTML5: A Step -by-\nStep Guide to CreatingDynamic Websites by Robin Nixon \n3. Full Stack JavaScript: Learn Backbone.js, Node.js and MongoDB. \nCopyright \u00a9 2015 BYAZAT MARDAN \n \n \nREFERENCE BOOKS: \n \n1. Full-Stack JavaScript Development by Eric Bush. \n2. Mastering Full Stack React Web Development Paperback \u2013 April 28, \n2017 by TomaszDyl , Kamil Przeorski , Maciej Czarnecki \n  \n \nCOURSE OUTCOMES: \n1. Develop a fully functioning website and deploy on a web server.  \n2. Gain Knowledge about the front end and back end Tools  \n3. Find and use code packages based on their documentation to produce \nworking results ina project. \n4.Create web pages that function using external data. \n5.Implementation of web application employing efficient database  access.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 978, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f37289e5-1b52-4492-9e44-dc6822fa4ac0": {"__data__": {"id_": "f37289e5-1b52-4492-9e44-dc6822fa4ac0", "embedding": null, "metadata": {"page_label": "4", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fad15b88-8ef9-44f6-b688-7566bba1dcc9", "node_type": "4", "metadata": {"page_label": "4", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "ffcf97c99e576b41847f08d0aa68b19a91c09621067ea54e18ee0a5fcc4199c2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "4 | P a g e  \n \nUNIT TOPIC PAGE \nUNIT - I Web development Basics - HTML 6 \n \nWeb servers Shell - UNIX CLI 90 \n \nVersion control - Git &Github HTML 92 \n \nCSS 124 \nUnit-II Javascript basics 170 \n \nOOPS Aspects of JavaScript 179 \n \nMemory usage and Functions in JS 183 \n \nAJAX for data exchange with server 187 \n \njQuery Framework 191 \n \njQuery events 193 \n \nJSON data format. 194 \nUnit-III REACT JS: Introduction to React 195 \n \nReact Router and Single Page Applications 198 \n \nReact Forms 199 \n \nIntroduction to Redux 211 \n \nMore Redux 214 \n \nClient-Server Communication 215 \nUNIT-IV Java Web Development: 221 \n \nJAVA PROGRAMMING BASICS 225 \n \nModel View Controller (MVC) 237 \n \nMVC Architecture using Spring 242 \n \nRESTful API using Spring Framework 244 \n \nBuilding an application usingMaven 261 \nUnit-V Databases & Deployment 266 \n \nRelational schemas and normalization 268 \n \nStructured Query Language 269", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 911, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b55189c1-b18d-4599-bf84-4775100a34ce": {"__data__": {"id_": "b55189c1-b18d-4599-bf84-4775100a34ce", "embedding": null, "metadata": {"page_label": "5", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "03ea96e6-c351-4bf6-b054-9ecca983c699", "node_type": "4", "metadata": {"page_label": "5", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "802b64977a5baaf104f3473d385ae8e555eebd54d296729f2f20bcbff10dc266", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "5 | P a g e  \n \n \nData persistence using Spring 274 \n \nJDBC Agile development 276 \n \nprinciples and deploying application in Cloud 281", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 138, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2b7c0771-a8f4-4420-9355-d0953b5f45f5": {"__data__": {"id_": "2b7c0771-a8f4-4420-9355-d0953b5f45f5", "embedding": null, "metadata": {"page_label": "6", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "56613f9e-2b1d-4fe2-90c1-78684eb17131", "node_type": "4", "metadata": {"page_label": "6", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "0f51ab8d933e0b7cb10438ec9f4686b97b7958326cda1ce87867af1d9ee30c45", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "6 | P a g e  \n \nWhat is HTML \nHTML is an acronym which stands for Hyper Text Markup Language which is used for \ncreating web pages and web applications. Let's see what is meant by Hypertext Markup \nLanguage, and Web page. \nHyper Text:HyperText simply means \"Text within Text.\" A text has a link within it, is a \nhypertext. Whenever you click on a link which brings you to a new webpage, you have \nclicked on a hypertext. HyperText is a way to link two or more web pages (HTML \ndocuments) with each other.  \nMarkup language: A markup language is a computer language that is used to apply layout \nand formatting conventions to a text document. Markup language makes text more interactive \nand dynamic. It can turn text into images, tables, links, etc. \nWeb Page: A web page is a document which is commonly written in HTML and translated \nby a web browser. A web page can be identified by entering an URL. A Web page can be of \nthe static or dynamic type. With the help of HTML only, we can create static web pages.  \nHence, HTML is a markup language which is used for creating attractive web pages with the \nhelp of styling, and which looks in a nice format on a web browser. An HTML document is \nmade of many HTML tags and each HTML tag contains different content. \nLet's see a simple example of HTML. \n1. <!DOCTYPE>   \n2. <html>   \n3. <head>   \n4. <title>Web page title</title>   \n5. </head>   \n6. <body>   \n7. <h1>Write Your First Heading</h1>   \n8. <p>Write Your First Paragraph.</p>   \n9. </body>   \n10. </html>   \n \nDescription of HTML Example \n<!DOCTYPE>: It defines the document type or it instruct the browser about the version of \nHTML. \n<html > :This tag informs the browser that it is an HTML document. Text between html tag \ndescribes the web document. It is a container for all other elements of HTML except \n<!DOCTYPE>", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1835, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9424f4c2-aaca-470f-8e4e-9a626391fbba": {"__data__": {"id_": "9424f4c2-aaca-470f-8e4e-9a626391fbba", "embedding": null, "metadata": {"page_label": "7", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e3b9821a-97c3-475d-8df7-6695c069649c", "node_type": "4", "metadata": {"page_label": "7", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "75a997a7e87bd23db5c7bba1e99d75f9db937c7ac46958ce8fe2318bf955f4a9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "7 | P a g e  \n \n<head>: It should be the first element inside the <html> element, which contains the \nmetadata(information about the document). It must be closed before the body tag opens. \n<title>: As its name suggested, it is used to add title of that HTML page which appears at the \ntop of the browser window. It must be placed inside the head tag and should close \nimmediately. (Optional) \n<body>: Text between body tag describes the body content of the page that is visible to the \nend user. This tag contains the main content of the HTML document. \n<h1> : Text between <h1> tag describes the first level heading of the webpage. \n<p>: Text between <p> tag describes the paragraph of the webpage. \n \nBrief History of HTML \nIn the late 1980's , a physicist, Tim Berners-Lee who was a contractor at CERN, proposed a \nsystem for CERN researchers. In 1989, he wrote a memo proposing an internet based \nhypertext system. \nTim Berners-Lee is known as the father of HTML. The first available description of HTML \nwas a document called \"HTML Tags\" proposed by Tim in late 1991. The latest version of \nHTML is HTML5, which we will learn later in this tutorial. \n \nHTML Versions \nSince the time HTML was invented there are lots of HTML versions in market, the brief \nintroduction about the HTML version is given below:  \nHTML 1.0: The first version of HTML was 1.0, which was the barebones version of HTML \nlanguage, and it was released in1991.  \nHTML 2.0: This was the next version which was released in 1995, and it was standard \nlanguage version for website design. HTML 2.0 was able to support extra features such as \nform-based file upload, form elements such as text box, option button, etc.  \nHTML 3.2: HTML 3.2 version was published by W3C in early 1997. This version was \ncapable of creating tables and providing support for extra options for form elements. It can \nalso support a web page with complex mathematical equations. It became an official standard \nfor any browser till January 1997. Today it is practically supported by most of the browsers.  \nHTML 4.01: HTML 4.01 version was released on December 1999, and it is a very stable \nversion of HTML language. This version is the current official standard, and it provides \nadded support for stylesheets (CSS) and scripting ability for various multimedia elements.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 2327, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "efb601ae-2146-48fa-b342-69171cc5fdb7": {"__data__": {"id_": "efb601ae-2146-48fa-b342-69171cc5fdb7", "embedding": null, "metadata": {"page_label": "8", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8caa13ff-601f-4587-b672-566889d79fa0", "node_type": "4", "metadata": {"page_label": "8", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "a661223306e217675638d2403c198aa3bd9fe77b7028decf531771804474be75", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "8 | P a g e  \n \nHTML5 : HTML5 is the newest version of HyperText Markup language. The first draft of \nthis version was announced in January 2008. There are two major organizations one is W3C \n(World Wide Web Consortium), and another one is WHATWG( Web Hypertext Application \nTechnology Working Group) which are involved in the development of HTML 5 version, and \nstill, it is under development. \n \nFeatures of HTML \n1) It is a very easy and simple language. It can be easily understood and modified. \n2) It is very easy to make an effective presentation with HTML because it has a lot of \nformatting tags. \n3) It is a markup language, so it provides a flexible way to design web pages along with the \ntext. \n4) It facilitates programmers to add a link on the web pages (by html anchor tag), so it \nenhances the interest of browsing of the user. \n5) It is platform-independent because it can be displayed on any platform like Windows, \nLinux, and Macintosh, etc. \n6) It facilitates the programmer to add Graphics, Videos, and Sound to the web pages which \nmakes it more attractive and interactive. \n7) HTML is a case-insensitive language, which means we can use tags either in lower-case or \nupper-case. \nHTML text Editors \n\uf0b7 An HTML file is a text file, so to create an HTML file we can use any text editors. \n\uf0b7 Text editors are the programs which allow editing in a written text, hence to create a \nweb page we need to write our code in some text editor.  \n\uf0b7 There are various types of text editors available which you can directly download, but \nfor a beginner, the best text editor is Notepad (Windows) or TextEdit (Mac).  \n\uf0b7 After learning the basics, you can easily use other professional text editors which are, \nNotepad++, Sublime Text, Vim, etc.  \n\uf0b7 In our tutorial, we will use Notepad and sublime text editor. Following are some easy \nways to create your first web page with Notepad, and sublime text. \nA. HTML code with Notepad. (Recommended for \nBeginners) \nNotepad is a simple text editor and suitable for beginners to learn HTML. It is available in all \nversions of Windows, from where you easily access it.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 2125, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5cac0990-9091-4830-87e9-d9cc6fd8c7f7": {"__data__": {"id_": "5cac0990-9091-4830-87e9-d9cc6fd8c7f7", "embedding": null, "metadata": {"page_label": "9", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "363d08e0-fb8b-4c26-9d2e-71f446c37e38", "node_type": "4", "metadata": {"page_label": "9", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "8bfa5a3383a6181244f0d000dca4bfd9c5c5977e07f83387fdca71d4294f2435", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "9 | P a g e  \n \nStep 1: Open Notepad (Windows) \n \nStep 2: Write code in HTML \n \nStep 3: Save the HTML file with .htm or .html extension.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 140, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "424efeb7-5029-43cb-be6d-201903349af7": {"__data__": {"id_": "424efeb7-5029-43cb-be6d-201903349af7", "embedding": null, "metadata": {"page_label": "10", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0f1a0653-01a6-4af1-abb1-c34192a01123", "node_type": "4", "metadata": {"page_label": "10", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "1d30e209ec21f4b4701fe235fc7d267cb0fc3f8702e13ee50a3097104ac4f080", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "10 | P a g e  \n \n \nStep 4: Open the HTML page in your web browser. \nTo run the HTML page, you need to open the file location, where you have saved the file and \nthen either double-click on file or click on open with option", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 226, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "12117453-a70c-4009-a6ab-2b3b24bc9ab0": {"__data__": {"id_": "12117453-a70c-4009-a6ab-2b3b24bc9ab0", "embedding": null, "metadata": {"page_label": "11", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6c3b24be-efd2-4aae-8743-c1efe69fbc63", "node_type": "4", "metadata": {"page_label": "11", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "ced61c280be31f92aefedd163477cd294d8f87a1f86df605adc0db70a8b5993c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "11 | P a g e  \n \n \n \n \nB. HTML code with Sublime Text-editor.(Recommended \nafter learning basics of HTML) \nWhen you will learn the basics of HTML, then you can use some professional text editors, \nwhich will help you to write an efficient and fast code. So to use Sublime Text editors, first it \nneeds to download and install from internet. You can easily download it from this \nhttps://www.sublimetext.com/download link and can install in your PC. When installation of \nSublime text editor done then you can follow the simple steps to use it: \nStep 1: Open Sublime Text editor(Windows 8):", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 593, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "75995e1a-604e-482d-b3b0-ac024b9945a8": {"__data__": {"id_": "75995e1a-604e-482d-b3b0-ac024b9945a8", "embedding": null, "metadata": {"page_label": "12", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7aabc80a-11ce-477a-85ff-3feefb6022c4", "node_type": "4", "metadata": {"page_label": "12", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "e88060b68ad865b98c2ba9114381fde48c8eb07021c53e01554ce96cc241c194", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "12 | P a g e  \n \nTo open Sublime Text editor go to Start screen \u290f type Sublime Text\u290f Open it. To open a \nnew page press CTRL+N. \n \nStep 2: Save the page before writing any code. \nTo save your page in Sublime Text press Ctrl+S or go to File option \u290f save, to save a file use \nextension .htm or .html. We recommend to save the file first then write the code because after \nsaving the page sublime text editor will give you suggestions to write code. \n \nStep 3: Write the code in Sublime Text editor", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 500, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "56c568c9-3bc0-451b-a873-14702ebd5a88": {"__data__": {"id_": "56c568c9-3bc0-451b-a873-14702ebd5a88", "embedding": null, "metadata": {"page_label": "13", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9c2a47ef-d287-4800-bf69-08d2cbc0efbd", "node_type": "4", "metadata": {"page_label": "13", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "30925a1a0af7d903521f03e34ac1dba60383340b54e972a0a88567905e784a93", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "13 | P a g e  \n \n \nStep 4: Open the HTML page in your Browser \nTo execute or open this page in Web browser just right click by mouse on sublime text page \nand click on Open in Browser.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 188, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "715d7bfc-394b-41ac-b570-2af4d1f47c61": {"__data__": {"id_": "715d7bfc-394b-41ac-b570-2af4d1f47c61", "embedding": null, "metadata": {"page_label": "14", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "725930ab-8faa-4d2a-b4cf-363db2f9752e", "node_type": "4", "metadata": {"page_label": "14", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "ba85e6698c47497c2272e61da8249b857b8305503ea359b19cd4ba6a718dbadd", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "14 | P a g e  \n \nBuilding blocks of HTML \nAn HTML document consist of its basic building blocks which are: \n\uf0b7 Tags: An HTML tag surrounds the content and apply meaning to it. It is written \nbetween < and > brackets. \n\uf0b7 Attribute: An attribute in HTML provides extra information about the element, and it \nis applied within the start tag. An HTML attribute contains two fields: name & value. \nSyntax \n1. <tag name  attribute_name= \" attr_value\"> content </ tag name>    \n\uf0b7 Elements: An HTML element is an individual component of an HTML file. In an \nHTML file, everything written within tags are termed as HTML elements.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 623, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "da574436-f268-46a5-9bb3-0552efbd0b41": {"__data__": {"id_": "da574436-f268-46a5-9bb3-0552efbd0b41", "embedding": null, "metadata": {"page_label": "15", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ce4fb8a9-f259-417c-be48-c8789c324423", "node_type": "4", "metadata": {"page_label": "15", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "c1b12f276fca4862f67cb89697abd1156b095f78df865057c22d4c07900046e7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "15 | P a g e  \n \n \nExample: \n1. <!DOCTYPE html>   \n2. <html>   \n3.   <head>   \n4.     <title>The basic building blocks of HTML</title>   \n5.  </head>   \n6.   <body>   \n7.        <h2>The building blocks</h2>   \n8.        <p>This is a paragraph tag</p>   \n9.        <p style=\"color: red\">The style is attribute of paragraph tag</p>   \n10.        <span>The element contains tag, attribute and content</span>   \n11.   </body>   \n12. </html>      \n \nOutput: \nThe building blocks \nThis is a paragraph tag \nHTML Tags", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 513, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "25348ad1-6489-41fc-8752-212a0c7bbe2d": {"__data__": {"id_": "25348ad1-6489-41fc-8752-212a0c7bbe2d", "embedding": null, "metadata": {"page_label": "16", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "71c8305b-f0d8-4dbd-87db-6f56a2880de0", "node_type": "4", "metadata": {"page_label": "16", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "4a4de1764ecd76ddcc508b9c2be163b2bed52258a4189267ab84dd7ade4908d2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "16 | P a g e  \n \nHTML tags are like keywords which defines that how web browser will format and display \nthe content. With the help of tags, a web browser can distinguish between an HTML content \nand a simple content. HTML tags contain three main parts: opening tag, content and closing \ntag. But some HTML tags are unclosed tags. \nWhen a web browser reads an HTML document, browser reads it from top to bottom and left \nto right. HTML tags are used to create HTML documents and render their properties. Each \nHTML tags have different properties. \nAn HTML file must have some essential tags so that web browser can differentiate between a \nsimple text and HTML text. You can use as many tags you want as per your code \nrequirement. \n\uf0b7 All HTML tags must enclosed within <> these brackets.  \n\uf0b7 Every tag in HTML perform different tasks.  \n\uf0b7 If you have used an open tag <tag>, then you must use a close tag </tag> (except some tags) \n \nSyntax \n<tag> content </tag> \n \nHTML Tag Examples \nNote: HTML Tags are always written in lowercase letters. The basic HTML tags are given below: \n<p> Paragraph Tag </p> \n<h2> Heading Tag </h2> \n<b>Bold Tag</b> \n<i>Italic Tag</i> \n<u> Underline Tag</u> \n \nUnclosed HTML Tags \nSome HTML tags are not closed, for example br and hr. \n<br> Tag: br stands for break line, it breaks the line of the code. \n<hr> Tag: hr stands for Horizontal Rule. This tag is used to put a line across the webpage.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1429, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2f0c5819-72cd-42a4-9775-facb71456843": {"__data__": {"id_": "2f0c5819-72cd-42a4-9775-facb71456843", "embedding": null, "metadata": {"page_label": "17", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7c2fb7c0-6e5b-46a7-bc53-b7e891f57701", "node_type": "4", "metadata": {"page_label": "17", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "b70b52e69635e2798e7da1d303354fd2ad1ec50b119886b7b4f6c867366eab68", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "17 | P a g e  \n \n \nHTML Meta Tags \nDOCTYPE, title, link, meta and style \n \nHTML Text Tags \n<p>, <h1>, <h2>, <h3>, <h4>, <h5>, <h6>, <strong>, <em>, <abbr>, <acronym>, \n<address>, <bdo>, <blockquote>, <cite>, <q>, <code>, <ins>, <del>, <dfn>, <kbd>, <pre>, \n<samp>, <var> and <br> \n \nHTML Link Tags \n<a> and <base> \n \nHTML Image and Object Tags \n<img>, <area>, <map>, <param> and <object> \n \nHTML List Tags \n<ul>, <ol>, <li>, <dl>, <dt> and <dd> \n \nHTML Table Tags \ntable, tr, td, th, tbody, thead, tfoot, col, colgroup and caption \n \nHTML Form Tags \nform, input, textarea, select, option, optgroup, button, label, fieldset and legend", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 637, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "04e526d3-faff-4c99-a254-8a16bd61276c": {"__data__": {"id_": "04e526d3-faff-4c99-a254-8a16bd61276c", "embedding": null, "metadata": {"page_label": "18", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "918c7072-d1d8-43aa-8796-ca9da3cf8391", "node_type": "4", "metadata": {"page_label": "18", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "ebc50f778eb201190d6a032410560f11af93f01e32797a65f0603d90425af310", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "18 | P a g e  \n \nHTML Scripting Tags \nscript and noscript \nNote: We will see examples using these tags in later charters. \nHTML Tags List \nFollowing is the complete list of HTML tags with the description which are arranged \nalphabetically. \nHTML Attribute \n\uf0b7 HTML attributes are special words which provide additional information about the elements \nor attributes are the modifier of the HTML element.  \n\uf0b7 Each element or tag can have attributes, which defines the behaviour of that element.  \n\uf0b7 Attributes should always be applied with start tag.  \n\uf0b7 The Attribute should always be applied with its name and value pair.  \n\uf0b7 The Attributes name and values are case sensitive, and it is recommended by W3C that it \nshould be written in Lowercase only.  \n\uf0b7 You can add multiple attributes in one HTML element, but need to give space between two \nattributes. \n \nSyntax \n1. <element attribute_name=\"value\">content</element>   \n \nExample \n1.  <!DOCTYPE html>   \n2. <html>   \n3. <head>   \n4. </head>   \n5. <body>   \n6.     <h1> This is Style attribute</h1>   \n7.    <p style=\"height: 50px; color: blue\">It will add style property in element</p>   \n8.     <p style=\"color: red\">It will change the color of content</p>   \n9. </body>   \n10. </html>   \nOutput:", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1254, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d35eea21-fa31-46b3-a5ca-d0186fd6e13b": {"__data__": {"id_": "d35eea21-fa31-46b3-a5ca-d0186fd6e13b", "embedding": null, "metadata": {"page_label": "19", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a9cee286-a10e-48fb-b2f4-79fc0ff7fbcb", "node_type": "4", "metadata": {"page_label": "19", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "89bce27f0825e1fce989b8b2511de05cb53f3fbf647dd7959afc08ad6e5c5848", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "19 | P a g e  \n \n \nExplanation of above example: \n1. <p style=\"height: 50px; color: blue\">It will add style property in element</p>   \nIn the above statement, we have used paragraph tags in which we have applied style attribute. \nThis attribute is used for applying CSS property on any HTML element. It provides height to \nparagraph element of 50px and turns it colour to blue.  \n1. <p style=\"color: red\">It will change the color of content</p>   \nIn the above statement we have again used style attribute in paragraph tag, which turns its \ncolour red.  \nNote: There are some commonly used attributes are given below, and the complete list and \nexplanation of all attributes are given in HTML attributes List. \n \nThe title attribute in HTML \nDescription: The title attribute is used as text tooltip in most of the browsers. It display its \ntext when user move the cursor over a link or any text. You can use it with any text or link to \nshow the description about that link or text. In our example, we are taking this with paragraph \ntag and heading tag.  \nExample \nWith <h1> tag: \n1. <h1 title=\"This is heading tag\">Example of title attribute</h1>   \nWith <p> tag:  \n1. <p title=\"This is paragraph tag\">Move the cursor over the heading and paragraph, and\n you will see a description as a tooltip</p>", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1304, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ec69e2ed-8ef4-4914-bee6-63d7f6a20275": {"__data__": {"id_": "ec69e2ed-8ef4-4914-bee6-63d7f6a20275", "embedding": null, "metadata": {"page_label": "20", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f521decb-91ca-42bb-81b8-f1a6acdeb463", "node_type": "4", "metadata": {"page_label": "20", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "74418ddbe3e71e7928e6048ffa70c9f9a1fbbe1c7808fc06fa9ff636a85aab9c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "20 | P a g e  \n \nCode: \n1. <!DOCTYPE html>   \n2. <html>   \n3.   <head>   \n4.  </head>   \n5. <body>   \n6.        \n7.   <h1 title=\"This is heading tag\">Example of title attribute</h1>   \n8.   <p title=\"This is paragraph tag\">Move the cursor over the heading and paragraph, and you \nwill see a description as a tooltip</p>   \n9.    \n10. </body>   \n11. </html>   \nOutput: \n \n \nThe href attribute in HTML \nDescription: The href attribute is the main attribute of <a> anchor tag. This attribute gives \nthe link address which is specified in that link. The href attribute provides the hyperlink, \nand if it is blank, then it will remain in same page. \nExample \nWith link address:  \n1. <a href=\"https://www.javatpoint.com/html-anchor\">This is a link</a>   \nWithout link address:  \n1. <a href=\"\">This is a link</a>", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 809, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f7047329-48d4-4b78-9ef1-c9d190061dee": {"__data__": {"id_": "f7047329-48d4-4b78-9ef1-c9d190061dee", "embedding": null, "metadata": {"page_label": "21", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c9240459-d289-490f-80a6-b4c7fc417a05", "node_type": "4", "metadata": {"page_label": "21", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "effa5e20e031d021c72d5d2f60d53761599c40cfa86b3c5e0cf5306e29d4150d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "21 | P a g e  \n \n \n \nThe src Attribute \nThe src attribute is one of the important and required attribute of <img> element. It is source \nfor the image which is required to display on browser. This attribute can contain image in \nsame directory or another directory. The image name or source should be correct else \nbrowser will not display the image.  \nExample \n1. <img src=\"whitepeacock.jpg\" height=\"400\" width=\"600\">   \nNote: The above example also have height and width attribute, which define the height and width of \nimage on web page. \nOutput:", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 553, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f6fea37b-8998-4c0a-a555-b06aa1e14302": {"__data__": {"id_": "f6fea37b-8998-4c0a-a555-b06aa1e14302", "embedding": null, "metadata": {"page_label": "22", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2ab95fc2-6bbe-413c-bacb-c8b621cfadee", "node_type": "4", "metadata": {"page_label": "22", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "1973ba6f5301f76779f1c86813b256d3ff4aad7df8e4dc11c8e12dc64e2801d9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "22 | P a g e  \n \n \n \nQuotes: single quotes or double quotes? \nIn this chapter you have seen that, we have used attribute with double quotes, but some \npeople might use single quotes in HTML. So use of single quotes with HTML attribute, is \nalso allowed. The following both statements are absolutely fine. \n1. <a href=\"https://www.javatpoint.com\">A link to HTML.</a>   \n2. <a href='https://www.javatpoint.com'>A link to HTML.</a>   \nIN HTML5, you can also omit use of quotes around attribute values.  \n1. <a href=https://www.javatpoint.com>A link to HTML.</a> \nHTML Elements \nAn HTML file is made of elements. These elements are responsible for creating web pages \nand define content in that webpage. An element in HTML usually consist of a start tag <tag \nname>, close tag </tag name> and content inserted between them. Technically, an element \nis a collection of start tag, attributes, end tag, content between them.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 921, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "14bd5ff2-3a5f-4def-b2b5-ba9b20e52e48": {"__data__": {"id_": "14bd5ff2-3a5f-4def-b2b5-ba9b20e52e48", "embedding": null, "metadata": {"page_label": "23", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5859a78d-4996-406c-b459-aeedac7e47c3", "node_type": "4", "metadata": {"page_label": "23", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "a8817a86336d8a4dddcca092077d26a2e28c53d03eaaf3e9d5a5c384ba4d6db9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "23 | P a g e  \n \nNote: Some elements does not have end tag and content, these elements are termed as empty elements \nor self-closing element or void elements.  \nSuch as:  \n1. <p> Hello world!!! </p>    \nExample \n1. <!DOCTYPE html>   \n2. <html>   \n3. <head>   \n4.     <title>WebPage</title>   \n5. </head>   \n6. <body>   \n7.    <h1>This is my first web page</h1>   \n8.     <h2> How it looks?</h2>   \n9.      <p>It looks Nice!!!!!</p>   \n10. </body>   \n11. </html>   \n \n\uf0b7 All the content written between body elements are visible on web page. \nVoid element: All the elements in HTML do not require to have start tag and end tag, some \nelements does not have content and end tag such elements are known as Void elements or \nempty elements. These elements are also called as unpaired tag. \nSome Void elements are <br> (represents a line break) ,<hr>(represents a horizontal \nline), etc.  \nNested HTML Elements: HTML can be nested, which means an element can contain \nanother element.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 982, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "efb5d0c7-3a03-4789-836d-c026d7fe2c55": {"__data__": {"id_": "efb5d0c7-3a03-4789-836d-c026d7fe2c55", "embedding": null, "metadata": {"page_label": "24", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2f0f4cdb-2162-4a73-bcd3-d1d99fd4e367", "node_type": "4", "metadata": {"page_label": "24", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "64632ce54eba461242be0e43520283ab116205964a95676c77d3a562284f4657", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "24 | P a g e  \n \n \nBlock-level and Inline HTML elements \nFor the default display and styling purpose in HTML, all the elements are divided into two \ncategories:  \n\uf0b7 Block-level element \n\uf0b7 Inline element \n \nBlock-level element: \n\uf0b7 These are the elements, which structure main part of web page, by dividing a page into \ncoherent blocks.  \n\uf0b7 A block-level element always start with new line and takes the full width of web page, from \nleft to right.  \n\uf0b7 These elements can contain block-level as well as inline elements. \nFollowing are the block-level elements in HTML. \n<address>, <article>, <aside>, <blockquote>, <canvas>, <dd>, <div>, <dl>, <dt>, <fieldset>, \n<figcaption>, <figure>, <footer>, <form>, <h1>-<h6>, <header>, <hr>, <li>, <main>, \n<nav>, <noscript>, <ol>, <output>, <p>, <pre>, <section>, <table>, <tfoot>, <ul> and \n<video>. \nNote: All these elements are described in later chapters. \nExample: \n1. <!DOCTYPE html>   \n2. <html>   \n3.              <head>   \n4.     </head>   \n5. <body>   \n6.     <div style=\"background-color: lightblue\">This is first div</div>   \n7.     <div style=\"background-color: lightgreen\">This is second div</div>   \n8.     <p style=\"background-color: pink\">This is a block level element</p>   \n9. </body>   \n10. </html>   \nOutput:", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1272, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "cb488ce2-5d46-4123-ab72-abd7b981a0b4": {"__data__": {"id_": "cb488ce2-5d46-4123-ab72-abd7b981a0b4", "embedding": null, "metadata": {"page_label": "25", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d7eb7878-9d87-44c8-b188-157a4310d91a", "node_type": "4", "metadata": {"page_label": "25", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "a4e9ec371629482b703d4fb1e5a5a0fa379e3f4ac068272b2b4d5b8c555a39d0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "25 | P a g e  \n \n \nIn the above example we have used  \ntag, which defines a section in a web page, and takes full width of page. \nWe have used style attribute which is used to styling the HTML content, and the background \ncolor are showing that it's a block level element. \n \nInline elements: \n\uf0b7 Inline elements are those elements, which differentiate the part of a given text and provide it a \nparticular function.  \n\uf0b7 These elements does not start with new line and take width as per requirement.  \n\uf0b7 The Inline elements are mostly used with other elements.  \n<a>, <abbr>, <acronym>, <b>, <bdo>, <big>, <br>, <button>, <cite>, <code>, <dfn>, <em>, \n<i>, <img>, <input>, <kbd>, <label>, <map>, <object>, <q>, <samp>, <script>, <select>, \n<small>, <span>, <strong>, <sub>, <sup>, <textarea>, <time>, <tt>, <var>. \nExample: \n1. <!DOCTYPE html>   \n2. <html>   \n3.     <head>   \n4.     </head>   \n5. <body>   \n6.     <a href=\"https://www.javatpoint.com/html-tutorial\">Click on link</a>   \n7.     <span style=\"background-color: lightblue\">this is inline element</span>   \n8.     <p>This will take width of text only</p>   \n9.  </body>   \n10. </html>    \nOutput:", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1161, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "bd972c2a-1f98-4606-855e-03494b5b27ff": {"__data__": {"id_": "bd972c2a-1f98-4606-855e-03494b5b27ff", "embedding": null, "metadata": {"page_label": "26", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b0eea355-d026-450f-a1af-a854a4e1831e", "node_type": "4", "metadata": {"page_label": "26", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "2936006cf3bb08c212d87dc81ba0089f4039e763ccdafbd628d0b83838856a52", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "26 | P a g e  \n \n \nFollowing is the list of the some main elements used in HTML: \nHTML Formatting \nHTML Formatting is a process of formatting text for better look and feel. HTML provides \nus ability to format text without using CSS. There are many formatting tags in HTML. These \ntags are used to make text bold, italicized, or underlined. There are almost 14 options \navailable that how text appears in HTML and XHTML. \nIn HTML the formatting tags are divided into two categories: \n\uf0b7 Physical tag: These tags are used to provide the visual appearance to the text.  \n\uf0b7 Logical tag: These tags are used to add some logical or semantic value to the text. \nNOTE: There are some physical and logical tags which may give same visual appearance, but they \nwill be different in semantics. \nHere, we are going to learn 14 HTML formatting tags. Following is the list of HTML \nformatting text. \nElement \nname Description \n<b> This is a physical tag, which is used to bold the text written between it. \n<strong> This is a logical tag, which tells the browser that the text is important. \n<i> This is a physical tag which is used to make text italic.  \n<em> This is a logical tag which is used to display content in italic.  \n<mark> This tag is used to highlight text.  \n<u> This tag is used to underline text written between it.  \n<tt> This tag is used to appear a text in teletype. (not supported in HTML5) \n<strike> This tag is used to draw a strikethrough on a section of text. (Not supported in \nHTML5)  \n<sup> It displays the content slightly above the normal line.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1563, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4812daae-72a3-446d-a14b-50bb4187c6d8": {"__data__": {"id_": "4812daae-72a3-446d-a14b-50bb4187c6d8", "embedding": null, "metadata": {"page_label": "27", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0d02e631-42e7-4bc4-88d2-8eeee9a5f1bc", "node_type": "4", "metadata": {"page_label": "27", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "88b09f4a46405597ce2eeafd4e384a9f26c3baf5bfc29deffaf6e0cda9b6742c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "27 | P a g e  \n \n<sub> It displays the content slightly below the normal line.  \n<del> This tag is used to display the deleted content.  \n<ins> This tag displays the content which is added \n<big> This tag is used to increase the font size by one conventional unit. \n<small> This tag is used to decrease the font size by one unit from base font size.  \n \n1) Bold Text \nHTML<b> and <strong> formatting elements  \nThe HTML <b> element is a physical tag which display text in bold font, without any logical \nimportance. If you write anything within <b>............</b> element, is shown in bold letters. \nSee this example: \n1. <p> <b>Write Your First Paragraph in bold text.</b></p>      \nOutput: \nWrite Your First Paragraph in bold text. \nThe HTML <strong> tag is a logical tag, which displays the content in bold font and informs \nthe browser about its logical importance. If you write anything between \n<strong>???????.</strong>, is shown important text. \nSee this example: \n1. <p><strong>This is an important content</strong>, and this is normal content</p>   \nOutput: \nThis is an important content, and this is normal content \nExample \n1. <!DOCTYPE html>   \n2. <html>   \n3. <head>   \n4.     <title>formatting elements</title>   \n5. </head>   \n6. <body>   \n7. <h1>Explanation of formatting element</h1>   \n8. <p><strong>This is an important content</strong>, and this is normal content</p>   \n9. </body>   \n10. </html>", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1422, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5ef16dd2-de25-4ad8-8589-5926eb957dea": {"__data__": {"id_": "5ef16dd2-de25-4ad8-8589-5926eb957dea", "embedding": null, "metadata": {"page_label": "28", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4623334b-26ba-4171-b230-020cd4e7c495", "node_type": "4", "metadata": {"page_label": "28", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "09a3433c183bf8b62a79aef016b831501c5571d673670a041e19a9e9beea2d14", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "28 | P a g e  \n \n \n2) Italic Text \nHTML <i> and <em> formatting elements \nThe HTML <i> element is physical element, which display the enclosed content in italic font, \nwithout any added importance. If you write anything within <i>............</i> element, is \nshown in italic letters. \nSee this example: \n1. <p> <i>Write Your First Paragraph in italic text.</i></p>   \nOutput: \nWrite Your First Paragraph in italic text. \nThe HTML <em> tag is a logical element, which will display the enclosed content in italic \nfont, with added semantics importance. \nSee this example: \n1. <p><em>This is an important content</em>, which displayed in italic font.</p>   \nOutput: \nThis is an important content, which displayed in italic font. \n1. <!DOCTYPE html>   \n2. <html>   \n3. <head>   \n4.     <title>formatting elements</title>   \n5. </head>   \n6. <body>   \n7. <h1>Explanation of italic formatting element</h1>   \n8. <p><em>This is an important content</em>, which displayed in italic font.</p>   \n9. </body>   \n10. </html>   \n \n3) HTML Marked formatting \nIf you want to mark or highlight a text, you should write the content within \n<mark>.........</mark>. \nSee this example:", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1170, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7186eaf6-9d23-4e5d-812a-42a0c5e4b752": {"__data__": {"id_": "7186eaf6-9d23-4e5d-812a-42a0c5e4b752", "embedding": null, "metadata": {"page_label": "29", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e43f72ea-cca2-4704-9ce9-7d6ca0d97767", "node_type": "4", "metadata": {"page_label": "29", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "1e411d544cacdad303fe46c3ae420b3e9eac29d1308a7a60873544811b769898", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "29 | P a g e  \n \n1. <h2>  I want to put a <mark> Mark</mark> on your face</h2>    \nOutput: \nI want to put a Mark on your face \n \n4) Underlined Text \nIf you write anything within <u>.........</u> element, is shown in underlined text. \nSee this example: \n1. <p> <u>Write Your First Paragraph in underlined text.</u></p>   \nOutput: \nWrite Your First Paragraph in underlined text. \n \n5) Strike Text \nAnything written within <strike>.......................</strike> element is displayed with \nstrikethrough. It is a thin line which cross the statement. \nSee this example: \n1. <p> <strike>Write Your First Paragraph with strikethrough</strike>.</p>   \nOutput: \nWrite Your First Paragraph with strikethrough. \n \n6) Monospaced Font \nIf you want that each letter has the same width then you should write the content within \n<tt>.............</tt> element. \nNote: We know that most of the fonts are known as variable-width fonts because different \nletters have different width. (for example: 'w' is wider than 'i'). Monospaced Font provides \nsimilar space among every letter. \nSee this example:", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1088, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "18c999b9-4ed9-4ca5-9cbd-53d76a70d59a": {"__data__": {"id_": "18c999b9-4ed9-4ca5-9cbd-53d76a70d59a", "embedding": null, "metadata": {"page_label": "30", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0042e0ad-6f13-4eba-a0ca-ee0070520503", "node_type": "4", "metadata": {"page_label": "30", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "7bd1b98915db0322d15ff6cd23ceed8e7dfd51a437909d13a44589a9d0fc2b5e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "30 | P a g e  \n \n1. <p>Hello <tt>Write Your First Paragraph in monospaced font.</tt></p>      \nOutput: \nHello Write Your First Paragraph in monospaced font. \n \n7) Superscript Text \nIf you put the content within <sup>..............</sup> element, is shown in superscript; means it \nis displayed half a character's height above the other characters. \nSee this example: \n1. <p>Hello <sup>Write Your First Paragraph in superscript.</sup></p>      \nOutput: \nHello Write Your First Paragraph in superscript.  \n \n8) Subscript Text \nIf you put the content within <sub>..............</sub> element, is shown in subscript ; means it \nis displayed half a character's height below the other characters. \nSee this example: \n1. <p>Hello <sub>Write Your First Paragraph in subscript.</sub></p>   \nOutput: \nHello Write Your First Paragraph in subscript.  \nHTML Heading \nA HTML heading or HTML h tag can be defined as a title or a subtitle which you want to \ndisplay on the webpage. When you place the text within the heading tags <h1>.........</h1>, it \nis displayed on the browser in the bold format and size of the text depends on the number of \nheading.  \nThere are six different HTML headings which are defined with the <h1> to <h6> tags, from \nhighest level h1 (main heading) to the least level h6 (least important heading).  \nh1 is the largest heading tag and h6 is the smallest one. So h1 is used for most important \nheading and h6 is used for least important.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1455, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3798c5df-b908-4799-a81e-8f16bd8fe639": {"__data__": {"id_": "3798c5df-b908-4799-a81e-8f16bd8fe639", "embedding": null, "metadata": {"page_label": "31", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "80905e45-e42c-49c2-b094-d9f9278421fd", "node_type": "4", "metadata": {"page_label": "31", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "dfac61126182b350d8ff854768543a559148c52298281a3cbd28d1ba411b162a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "31 | P a g e  \n \nHeadings in HTML helps the search engine to understand and index the structure of \nweb page. \nNote: The main keyword of the whole content of a webpage should be display by h1 heading tag. \nSee this example: \n1. <h1>Heading no. 1</h1>   \n2. <h2>Heading no. 2</h2>   \n3. <h3>Heading no. 3</h3>   \n4. <h4>Heading no. 4</h4>   \n5. <h5>Heading no. 5</h5>   \n6. <h6>Heading no. 6</h6>   \nOutput: \nHeading no. 1 \nHeading no. 2 \nHeading no. 3 \nHeading no. 4 \nHeading no. 5 \nHeading no. 6 \nHeading elements (h1....h6) should be used for headings only. They should not be used just to make \ntext bold or big. \n\uf0b7 HTML headings can also be used with nested elements. Following are different codes to \ndisplay the way to use heading elements. \nExample: \n1. <!DOCTYPE html>   \n2. <html>   \n3.  <head>   \n4.     <title>Heading elements</title>   \n5.  </head>   \n6.  <body>   \n7.      <h1>This is main heading of page. </h1>   \n8.       <p>h1 is the most important heading, which is used to display the keyword of page </p>   \n9.      <h2>This is first sub-heading</h2>   \n10.       <p>h2 describes the first sub heading of page. </p>   \n11.      <h3>This is Second sub-heading</h3>   \n12.       <p>h3 describes the second sub heading of page.</p>   \n13.       <p>We can use h1 to h6 tag to use the different sub-\nheading with their paragraphs if          \n14.                      required.    \n15.                 </p>   \n16.    </body>", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1443, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "bd3f63c9-e933-4b6d-9b8b-5886aa7894ae": {"__data__": {"id_": "bd3f63c9-e933-4b6d-9b8b-5886aa7894ae", "embedding": null, "metadata": {"page_label": "32", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "82af4aab-61f5-4318-af34-845dbf2f9cf6", "node_type": "4", "metadata": {"page_label": "32", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "efae7180d60307ba305cc847e866aacf950c1e2c811c9ed6b362dd97950c2fff", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "32 | P a g e  \n \n17. </html>   \nOutput: \n \n \nHTML Paragraph \nHTML paragraph or HTML p tag is used to define a paragraph in a webpage. Let's take a \nsimple example to see how it work. It is a notable point that a browser itself add an empty \nline before and after a paragraph. An HTML <p> tag indicates starting of new paragraph. \nNote: If we are using various <p> tags in one HTML file then browser automatically adds a single \nblank line between the two paragraphs.  \nSee this example: \n1. <p>This is first paragraph.</p>   \n2. <p>This is second paragraph.</p>   \n3. <p>This is third paragraph.</p>   \nOutput: \nThis is first paragraph. \nThis is second paragraph. \nThis is third paragraph. \n \nSpace inside HTML Paragraph", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 724, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ca12d9cb-e1e3-4180-a76f-35e2c2e1b576": {"__data__": {"id_": "ca12d9cb-e1e3-4180-a76f-35e2c2e1b576", "embedding": null, "metadata": {"page_label": "33", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "161e55d6-122d-469c-b58d-6e6268fde7cb", "node_type": "4", "metadata": {"page_label": "33", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "57283c43dc964416791ed06cdcb4d801d93b5d723dba895969782e57afa9a25f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "33 | P a g e  \n \nIf you put a lot of spaces inside the HTML p tag, browser removes extra spaces and extra line \nwhile displaying the page. The browser counts number of spaces and lines as a single one. \n1. <p>   \n2. I am   \n3. going to provide   \n4. you a tutorial on HTML   \n5. and hope that it will   \n6. be very beneficial for you.   \n7. </p>   \n8. <p>   \n9. Look, I put here a lot   \n10. of spaces                    but            I know, Browser will ignore it.   \n11. </p>   \n12. <p>   \n13. You cannot determine the display of HTML</p>   \n14. <p>because resized windows may create different result.   \n15. </p>   \nOutput: \nI am going to provide you a tutorial on HTML and hope that it will be very beneficial for \nyou.  \nLook, I put here a lot of spaces but I know, Browser will ignore it.  \nYou cannot determine the display of HTML \nbecause resized windows may create different result.  \nAs you can see, all the extra lines and unnecessary spaces are removed by the browser. \n \nHow to Use <br> and <hr> tag with paragraph?  \nAn HTML <br> tag is used for line break and it can be used with paragraph elements. \nFollowing is the example to show how to use <br> with <p> element.  \nExample: \n1. <!DOCTYPE html>   \n2. <html>   \n3.      <head>   \n4.     </head>   \n5.   <body>   \n6.       <h2> Use of line break with pragraph tag</h2>   \n7.           <p><br>Papa and mama, and baby and Dot,   \n8.      <br>Willie and me?the whole of the lot   \n9.                <br>Of us all went over in Bimberlie's sleigh,", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1515, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ea6c8421-9bed-43fb-9ec4-ad61236bd6d8": {"__data__": {"id_": "ea6c8421-9bed-43fb-9ec4-ad61236bd6d8", "embedding": null, "metadata": {"page_label": "34", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "20db598b-26ea-4b2c-a2aa-f6cbeee26ec5", "node_type": "4", "metadata": {"page_label": "34", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "310b3cd796821dafd4a5862fefe58b76d54035f6a11b5f95c12974452b651fc0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "34 | P a g e  \n \n10.                  <br>To grandmama's house on Christmas day.   \n11.           </p>   \n12.    </body>   \n13. </html>   \nOutput: \n \nAn HTML <hr> tag is used to apply a horizontal line between two statements or two \nparagraphs. Following is the example which is showing use of <hr> tag with paragraph.  \nExample: \n1. <!DOCTYPE html>   \n2. <html>   \n3.  <head>   \n4.     </head>   \n5.  <body>   \n6.    <h2> Example to show a horizontal line with paragraphs</h2>   \n7.      <p> An HTML hr tag draw a horizontal line and separate two paragraphs with that\n line.<hr> it will start a new paragraph.   \n8.      </p>   \n9.   </body>   \n10. </html>   \nOutput:", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 672, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0e2b01cb-7197-468a-9561-af3a93c1d753": {"__data__": {"id_": "0e2b01cb-7197-468a-9561-af3a93c1d753", "embedding": null, "metadata": {"page_label": "35", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9de51659-385c-4ace-8e21-bafcdbb723ee", "node_type": "4", "metadata": {"page_label": "35", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "544f47da0197c14389ba92eda4062a2eca972b1db4d1aaa38e394423461eac34", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "35 | P a g e  \n \n \n \nHTML Anchor \nThe HTML anchor tag defines a hyperlink that links one page to another page. It can create \nhyperlink to other web page as well as files, location, or any URL. The \"href\" attribute is the \nmost important attribute of the HTML a tag. and which links to destination page or URL.  \nhref attribute of HTML anchor tag \nThe href attribute is used to define the address of the file to be linked. In other words, it \npoints out the destination page. \nThe syntax of HTML anchor tag is given below. \n<a href = \"...........\"> Link Text </a> \nLet's see an example of HTML anchor tag. \n1. <a href=\"second.html\">Click for Second Page</a>   \n \nSpecify a location for Link using target attribute \nIf we want to open that link to another page then we can use target attribute of <a> tag. With \nthe help of this link will be open in next page. \nExample: \n1. <!DOCTYPE html>   \n2. <html>   \n3. <head>   \n4.     <title></title>", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 945, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "dedc11f4-ff7b-4049-b232-612de4384a2c": {"__data__": {"id_": "dedc11f4-ff7b-4049-b232-612de4384a2c", "embedding": null, "metadata": {"page_label": "36", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "095a9765-5d18-4f6d-aceb-b11bfe488f38", "node_type": "4", "metadata": {"page_label": "36", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "ccbd1cf985872ba699b41184a84a0558a78e86a8b50f12a7fea2765aaa858c9c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "36 | P a g e  \n \n5. </head>   \n6. <body>   \n7. <p>Click on <a href=\"https://www.javatpoint.com/\" target=\"_blank\"> this-\nlink </a>to go on home page of JavaTpoint.</p>   \n8. </body>   \n9. </html>   \nOutput: \n \nNote: \n\uf0b7 The target attribute can only use with href attribute in anchor tag.  \n\uf0b7 If we will not use target attribute then link will open in same page.  \n \nAppearance of HTML anchor tag \nAn unvisited link is displayed underlined and blue. \nA visited link displayed underlined and purple. \nAn active link is underlined and red. \nHTML Image \nHTML img tag is used to display image on the web page. HTML img tag is an empty tag \nthat contains attributes only, closing tags are not used in HTML image element. \nLet's see an example of HTML image. \n1. <h2>HTML Image Example</h2>   \n2. <img src=\"good_morning.jpg\" alt=\"Good Morning Friends\"/>", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 849, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "84097fc2-16b3-43fe-bd2b-99d5b88f331a": {"__data__": {"id_": "84097fc2-16b3-43fe-bd2b-99d5b88f331a", "embedding": null, "metadata": {"page_label": "37", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e1179edb-419f-4bf4-8ce0-276785d40884", "node_type": "4", "metadata": {"page_label": "37", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "be0ea9cbc748b25ca5c2117f4243dc6d8467aa52b5eee9dfb4be631789841ef8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "37 | P a g e  \n \nOutput: \n \n \nAttributes of HTML img tag \nThe src and alt are important attributes of HTML img tag. All attributes of HTML image tag \nare given below. \n1) src \nIt is a necessary attribute that describes the source or path of the image. It instructs the \nbrowser where to look for the image on the server. \nThe location of image may be on the same directory or another server. \n2) alt \nThe alt attribute defines an alternate text for the image, if it can't be displayed. The value of \nthe alt attribute describe the image in words. The alt attribute is considered good for SEO \nprospective. \n3) width \nIt is an optional attribute which is used to specify the width to display the image. It is not \nrecommended now. You should apply CSS in place of width attribute. \n4) height \nIt h3 the height of the image. The HTML height attribute also supports iframe, image and \nobject elements. It is not recommended now. You should apply CSS in place of height \nattribute. \n \nUse of height and width attribute with img tag \nYou have learnt about how to insert an image in your web page, now if we want to give some \nheight and width to display image according to our requirement, then we can set it with \nheight and width attributes of image.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1251, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "42d296d9-1ba2-4370-9946-12bd7a4125ff": {"__data__": {"id_": "42d296d9-1ba2-4370-9946-12bd7a4125ff", "embedding": null, "metadata": {"page_label": "38", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8436d163-6935-44cd-b3bd-a28873ffa2a1", "node_type": "4", "metadata": {"page_label": "38", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "efb4d56ba2f39aaac7a4f31b43c1f13c7e1cc3b2f911e32b9c8a0fb8d7df591a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "38 | P a g e  \n \nExample: \n1. <img src=\"animal.jpg\" height=\"180\" width=\"300\" alt=\"animal image\">   \nOutput: \n \nNote: Always try to insert the image with height and width, else it may flicker while displaying on \nwebpage.  \n \nUse of alt attribute \nWe can use alt attribute with tag. It will display an alternative text in case if image \ncannot be displayed on browser. Following is the example for alt attribute:  \n1. <img src=\"animal.png\" height=\"180\" width=\"300\" alt=\"animal image\">       \nOutput:", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 502, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4da1df9f-bff7-4d4d-bddf-6028b47644df": {"__data__": {"id_": "4da1df9f-bff7-4d4d-bddf-6028b47644df", "embedding": null, "metadata": {"page_label": "39", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "79473ffa-c9eb-499e-893a-bba37cdb9be4", "node_type": "4", "metadata": {"page_label": "39", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "1d64f95b63cf035d1f4e4ee5d030470d23831ac0e43b0afed851c75ca5bb4f44", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "39 | P a g e  \n \n \n \nHow to get image from another directory/folder? \nTo insert an image in your web, that image must be present in your same folder where you \nhave put the HTML file. But if in some case image is available in some other directory then \nyou can access the image like this: \n1. <img src=\"E:/images/animal.png\" height=\"180\" width=\"300\" alt=\"animal image\">   \nIn above statement we have put image in local disk E------>images folder------>animal.png.  \nNote: If src URL will be incorrect or misspell then it will not display your image on web page, so try \nto put correct URL. \n \nUse <img> tag as a link \nWe can also link an image with other page or we can use an image as a link. To do this, put \n<img> tag inside the <a> tag.  \nExample: \n1. <a href=\"https://www.javatpoint.com/what-is-\nrobotics\"><img src=\"robot.jpg\" height=\"100\" width=\"100\"></a>   \nOutput:", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 876, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "30c71e31-9fff-4802-97d1-702d0994d6a6": {"__data__": {"id_": "30c71e31-9fff-4802-97d1-702d0994d6a6", "embedding": null, "metadata": {"page_label": "40", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d0f36477-c84d-4f83-84f0-515680847e50", "node_type": "4", "metadata": {"page_label": "40", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "35c765febba253115b0145e5f6da5d8af57ba9c14f2e44f030e64a862d65e6a3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "40 | P a g e  \n \n \nHTML Table \nHTML table tag is used to display data in tabular form (row * column). There can be many \ncolumns in a row. \nWe can create a table to display data in tabular form, using <table> element, with the help of \n<tr> ,<td>, and <th> elements.  \nIn Each table, table row is defined by <tr> tag, table header is defined by <th>, and table data \nis defined by <td> tags. \nHTML tables are used to manage the layout of the page e.g. header section, navigation bar, \nbody content, footer section etc. But it is recommended to use div tag over table to manage \nthe layout of the page . \n \nHTML Table Tags \nTag Description \n<table> It defines a table. \n<tr> It defines a row in a table. \n<th> It defines a header cell in a table. \n<td> It defines a cell in a table. \n<caption> It defines the table caption. \n<colgroup> It specifies a group of one or more columns in a table for formatting. \n<col> It is used with <colgroup> element to specify column properties for each column. \n<tbody> It is used to group the body content in a table. \n<thead> It is used to group the header content in a table. \n<tfooter> It is used to group the footer content in a table.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1177, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a486735d-0483-4dbc-933a-7b16a43e4eda": {"__data__": {"id_": "a486735d-0483-4dbc-933a-7b16a43e4eda", "embedding": null, "metadata": {"page_label": "41", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3ccad799-5463-4d8f-8cb8-801eda2ce454", "node_type": "4", "metadata": {"page_label": "41", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "54b6d50022037c23aee0fcd2194294d2f47db5c532c5318bb00c8995af1a69a0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "41 | P a g e  \n \nHTML Table Example \nLet's see the example of HTML table tag. It output is shown above. \n1. <table>   \n2. <tr><th>First_Name</th><th>Last_Name</th><th>Marks</th></tr>   \n3. <tr><td>Sonoo</td><td>Jaiswal</td><td>60</td></tr>   \n4. <tr><td>James</td><td>William</td><td>80</td></tr>   \n5. <tr><td>Swati</td><td>Sironi</td><td>82</td></tr>   \n6. <tr><td>Chetna</td><td>Singh</td><td>72</td></tr>   \n7. </table>   \nOutput: \nFirst_Name Last_Name Marks \nSonoo Jaiswal 60 \nHTML Lists \nHTML Lists are used to specify lists of information. All lists may contain one or more list \nelements. There are three different types of HTML lists: \n1. Ordered List or Numbered List (ol) \n2. Unordered List or Bulleted List (ul) \n3. Description List or Definition List (dl) \nNote: We can create a list inside another list, which will be termed as nested List. \n \nHTML Ordered List or Numbered List \nIn the ordered HTML lists, all the list items are marked with numbers by default. It is known \nas numbered list also. The ordered list starts with <ol> tag and the list items start with <li> \ntag. \n1. <ol>   \n2.  <li>Aries</li>   \n3.  <li>Bingo</li>   \n4.  <li>Leo</li>   \n5.  <li>Oracle</li>   \n6. </ol>   \nOutput: \n1. Aries \n2. Bingo \n3. Leo \n4. Oracle", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1252, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1d4c0ed6-1ac5-4c4c-92b1-6c2c61fcc674": {"__data__": {"id_": "1d4c0ed6-1ac5-4c4c-92b1-6c2c61fcc674", "embedding": null, "metadata": {"page_label": "42", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "21654204-db9a-4606-b41e-f59654e02bcf", "node_type": "4", "metadata": {"page_label": "42", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "775149c020826775f130745dc073c2a5ad3e5392f51a24ff3423c410ed81d5da", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "42 | P a g e  \n \n \nClick here for full details of HTML ordered list. HTML Ordered List \n \nHTML Unordered List or Bulleted List \nIn HTML Unordered list, all the list items are marked with bullets. It is also known as \nbulleted list also. The Unordered list starts with <ul> tag and list items start with the <li> tag. \n1. <ul>   \n2.  <li>Aries</li>   \n3.  <li>Bingo</li>   \n4.  <li>Leo</li>   \n5.  <li>Oracle</li>   \n6. </ul>   \nOutput: \n\uf0b7 Aries \n\uf0b7 Bingo \n\uf0b7 Leo \n\uf0b7 Oracle \n \n \nHTML Description List or Definition List \nHTML Description list is also a list style which is supported by HTML and XHTML. It is \nalso known as definition list where entries are listed like a dictionary or encyclopedia. \nThe definition list is very appropriate when you want to present glossary, list of terms or \nother name-value list.  \nThe HTML definition list contains following three tags: \n1. <dl> tag defines the start of the list. \n2. <dt> tag defines a term. \n3. <dd> tag defines the term definition (description). \n1. <dl>   \n2.   <dt>Aries</dt>   \n3.   <dd>-One of the 12 horoscope sign.</dd>   \n4.   <dt>Bingo</dt>   \n5.   <dd>-One of my evening snacks</dd>   \n6.  <dt>Leo</dt>   \n7.  <dd>-It is also an one of the 12 horoscope sign.</dd>   \n8.   <dt>Oracle</dt>", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1254, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c4041bc9-5540-409c-aa9a-5bf90f13acf1": {"__data__": {"id_": "c4041bc9-5540-409c-aa9a-5bf90f13acf1", "embedding": null, "metadata": {"page_label": "43", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bc61e95f-9144-42e2-80a7-c5c2391cba9a", "node_type": "4", "metadata": {"page_label": "43", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "8681de56d25dceac481c8a47463eaf7432e866e24d8f630dd1e2e1fe489602d0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "43 | P a g e  \n \n9.   <dd>-It is a multinational technology corporation.</dd>    \n10. </dl>   \nOutput: \nAries \n-One of the 12 horoscope sign. \nBingo \n-One of my evening snacks \nLeo \n-It is also an one of the 12 horoscope sign. \nOracle \n-It is a multinational technology corporation. \n \nClick here for full details of HTML description list. HTML Description List \n \nHTML Nested List \nA list within another list is termed as nested list. If you want a bullet list inside a numbered \nlist then such type of list will called as nested list. \nCode: \n1. <!DOCTYPE html>   \n2. <html>   \n3. <head>   \n4.     <title>Nested list</title>   \n5. </head>   \n6. <body>   \n7.     <p>List of Indian States with thier capital</p>   \n8. <ol>   \n9.     <li>Delhi   \n10.         <ul>   \n11.             <li>NewDelhi</li>   \n12.         </ul>   \n13.     </li>   \n14.     <li>Haryana   \n15.         <ul>   \n16.             <li>Chandigarh</li>   \n17.         </ul>   \n18.     </li>   \n19.     <li>Gujarat   \n20.         <ul>", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1004, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d3b06769-bda1-4eac-88b4-99f7592cb9f8": {"__data__": {"id_": "d3b06769-bda1-4eac-88b4-99f7592cb9f8", "embedding": null, "metadata": {"page_label": "44", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1ad82ce8-e7fd-4b83-bea8-533b0de6d01e", "node_type": "4", "metadata": {"page_label": "44", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "ebe0bebf13e9e6374d5bd2e3a994e19af106591307a8f01fabecac52de2e0b8f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "44 | P a g e  \n \n21.             <li>Gandhinagar</li>   \n22.         </ul>   \n23.     </li>   \n24.     <li>Rajasthan    \n25.         <ul>   \n26.             <li>Jaipur</li>   \n27.         </ul>   \n28.     </li>   \n29.     <li>Maharashtra   \n30.         <ul>   \n31.             <li>Mumbai</li>   \n32.         </ul>   \n33.     </li>   \n34.     <li>Uttarpradesh   \n35.         <ul>   \n36.             <li>Lucknow</li></ul>   \n37.     </li>   \n38. </ol>   \n39. </body>   \n40. </html>   \nOutput: \n \nHTML Ordered List | HTML Numbered \nList", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 537, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "90196853-2573-4356-8a6e-395b1994a6ee": {"__data__": {"id_": "90196853-2573-4356-8a6e-395b1994a6ee", "embedding": null, "metadata": {"page_label": "45", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0d8388a3-6b23-441a-9ed0-8d1d3c4dd506", "node_type": "4", "metadata": {"page_label": "45", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "dd0a4968977ff3316f1ffe577e5e5cd289d0704ec548e5488191a60b617b1813", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "45 | P a g e  \n \nHTML Ordered List or Numbered List displays elements in numbered format. The HTML \nol tag is used for ordered list. We can use ordered list to represent items either in numerical \norder format or alphabetical order format, or any format where an order is emphasized. There \ncan be different types of numbered list: \n\uf0b7 Numeric Number (1, 2, 3) \n\uf0b7 Capital Roman Number (I II III) \n\uf0b7 Small Romal Number (i ii iii) \n\uf0b7 Capital Alphabet (A B C) \n\uf0b7 Small Alphabet (a b c) \nTo represent different ordered lists, there are 5 types of attributes in <ol> tag. \nType Description \nType \"1\" This is the default type. In this type, the list items are numbered with numbers. \nType \"I\" In this type, the list items are numbered with upper case roman numbers. \nType \"i\" In this type, the list items are numbered with lower case roman numbers. \nType \"A\" In this type, the list items are numbered with upper case letters. \nType \"a\" In this type, the list items are numbered with lower case letters. \n \nHTML Ordered List Example \nLet's see the example of HTML ordered list that displays 4 topics in numbered list. Here we \nare not defining type=\"1\" because it is the default type. \n1. <ol>   \n2.  <li>HTML</li>   \n3.  <li>Java</li>   \n4.  <li>JavaScript</li>   \n5.  <li>SQL</li>   \n6. </ol>   \nOutput: \n1. HTML \n2. Java \n3. JavaScript \n4. SQL \n \nol type=\"I\" \nLet's see the example to display list in roman number uppercase. \n1. <ol type=\"I\">", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1441, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8e8164e9-ab1c-45ff-9f15-6df35a0db830": {"__data__": {"id_": "8e8164e9-ab1c-45ff-9f15-6df35a0db830", "embedding": null, "metadata": {"page_label": "46", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1edf5369-f138-436c-b217-c6cae3594368", "node_type": "4", "metadata": {"page_label": "46", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "10e68a2c271160da172b9ab89bb5f2a5f9d60a1bef3b19a886ae0c3c447dd871", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "46 | P a g e  \n \n2.  <li>HTML</li>   \n3.  <li>Java</li>   \n4.  <li>JavaScript</li>   \n5.  <li>SQL</li>   \n6. </ol>   \nOutput: \nI. HTML \nII. Java \nIII. JavaScript \nIV. SQL \n \nol type=\"i\" \nLet's see the example to display list in roman number lowercase. \n1. <ol type=\"i\">   \n2.  <li>HTML</li>   \n3.  <li>Java</li>   \n4.  <li>JavaScript</li>   \n5.  <li>SQL</li>   \n6. </ol>   \nOutput: \ni. HTML \nii. Java \niii. JavaScript \niv. SQL \n \nol type=\"A\" \nLet's see the example to display list in alphabet uppercase. \n1. <ol type=\"A\">   \n2.  <li>HTML</li>   \n3.  <li>Java</li>   \n4.  <li>JavaScript</li>   \n5.  <li>SQL</li>   \n6. </ol>   \nOutput: \nA. HTML", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 646, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8c4bc6c0-d599-4e16-aeb7-7c688b5016b6": {"__data__": {"id_": "8c4bc6c0-d599-4e16-aeb7-7c688b5016b6", "embedding": null, "metadata": {"page_label": "47", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "eb7fb40a-4352-4d9d-896e-e6280aab9baa", "node_type": "4", "metadata": {"page_label": "47", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "5cb6797ba54b671967544eb0c10255943d7be04efe5e4e06944586ab6a63b183", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "47 | P a g e  \n \nB. Java \nC. JavaScript \nD. SQL \n \nol type=\"a\" \nLet's see the example to display list in alphabet lowercase. \n1. <ol type=\"a\">   \n2.  <li>HTML</li>   \n3.  <li>Java</li>   \n4.  <li>JavaScript</li>   \n5.  <li>SQL</li>   \n6. </ol>   \nOutput: \na. HTML \nb. Java \nc. JavaScript \nd. SQL \n \nstart attribute \nThe start attribute is used with ol tag to specify from where to start the list items. \n<ol type=\"1\" start=\"5\"> : It will show numeric values starting with \"5\". \n<ol type=\"A\" start=\"5\"> : It will show capital alphabets starting with \"E\". \n<ol type=\"a\" start=\"5\"> : It will show lower case alphabets starting with \"e\". \n<ol type=\"I\" start=\"5\"> : It will show Roman upper case value starting with \"V\". \n<ol type=\"i\" start=\"5\"> : It will show Roman lower case value starting with \"v\". \n1. <ol type=\"i\" start=\"5\">   \n2.  <li>HTML</li>   \n3.  <li>Java</li>   \n4.  <li>JavaScript</li>   \n5.  <li>SQL</li>   \n6. </ol>   \nOutput:", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 941, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5f2d7bd0-f731-4c2f-a0bf-1290e9112e86": {"__data__": {"id_": "5f2d7bd0-f731-4c2f-a0bf-1290e9112e86", "embedding": null, "metadata": {"page_label": "48", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c2776121-9715-4263-82f1-f6982c5c2681", "node_type": "4", "metadata": {"page_label": "48", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "44ee62752db8fb4b173aaf1fab3f0a37fae576e0857fb700466528ed0a720938", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "48 | P a g e  \n \nv. HTML \nvi. Java \nvii. JavaScript \nviii. SQL \nHTML Form \nAn HTML form is a section of a document which contains controls such as text fields, \npassword fields, checkboxes, radio buttons, submit button, menus etc. \nAn HTML form facilitates the user to enter data that is to be sent to the server for processing \nsuch as name, email address, password, phone number, etc. . \n \nWhy use HTML Form \nHTML forms are required if you want to collect some data from of the site visitor. \nFor example: If a user want to purchase some items on internet, he/she must fill the form such \nas shipping address and credit/debit card details so that item can be sent to the given address.  \n \nHTML Form Syntax \n1. <form action=\"server url\" method=\"get|post\">   \n2.   //input controls e.g. textfield, textarea, radiobutton, button   \n3. </form>   \n \nHTML Form Tags \nLet's see the list of HTML 5 form tags. \nTag Description \n<form> It defines an HTML form to enter inputs by the used side. \n<input> It defines an input control. \n<textarea> It defines a multi-line input control. \n<label> It defines a label for an input element. \n<fieldset> It groups the related element in a form.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1182, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "bfd77798-185c-4cfb-989d-92ec293dda23": {"__data__": {"id_": "bfd77798-185c-4cfb-989d-92ec293dda23", "embedding": null, "metadata": {"page_label": "49", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4f45779b-b106-434c-afba-567bc0e38eaa", "node_type": "4", "metadata": {"page_label": "49", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "dece15c64ca466938a1918e2f5ec766375c0c186a9fd3beba6ba2733fb480ef5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "49 | P a g e  \n \n<legend> It defines a caption for a <fieldset> element. \n<select> It defines a drop-down list. \n<optgroup> It defines a group of related options in a drop-down list. \n<option> It defines an option in a drop-down list. \n<button> It defines a clickable button. \nHTML 5 Form Tags \nLet's see the list of HTML 5 form tags. \nTag Description \n<datalist> It specifies a list of pre-defined options for input control. \n<keygen> It defines a key-pair generator field for forms. \n<output> It defines the result of a calculation. \n \nHTML <form> element \nThe HTML <form> element provide a document section to take input from user. It provides \nvarious interactive controls for submitting information to web server such as text field, text \narea, password field, etc.  \nNote: The <form> element does not itself create a form but it is container to contain all required form \nelements, such as <input>, <label>, etc. \nSyntax:  \n1. <form>   \n2. //Form elements   \n3. </form>   \n \nHTML <input> element \nThe HTML <input> element is fundamental form element. It is used to create form fields, to \ntake input from user. We can apply different input filed to gather different information form \nuser. Following is the example to show the simple text input. \nExample:", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1265, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ba03cf8b-9f1e-407c-b94d-38ba7aa8b2f7": {"__data__": {"id_": "ba03cf8b-9f1e-407c-b94d-38ba7aa8b2f7", "embedding": null, "metadata": {"page_label": "50", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "502cb76f-1f1a-4835-bcb3-83633ff0f893", "node_type": "4", "metadata": {"page_label": "50", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "98ea1099bba7a45a0e87bcb34426874d0f3e7fef3effa3554e30d4dcaacd8b47", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "50 | P a g e  \n \n1. <body>   \n2.   <form>   \n3.      Enter your name  <br>   \n4.     <input type=\"text\" name=\"username\">   \n5.   </form>   \n6. </body>   \nOutput: \n \n \nHTML TextField Control \nThe type=\"text\" attribute of input tag creates textfield control also known as single line \ntextfield control. The name attribute is optional, but it is required for the server side \ncomponent such as JSP, ASP, PHP etc. \n1. <form>   \n2.     First Name: <input type=\"text\" name=\"firstname\"/> <br/>   \n3.     Last Name:  <input type=\"text\" name=\"lastname\"/> <br/>   \n4.  </form>   \nOutput:", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 582, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "59708d29-7524-41fa-8e71-2b31536a1c85": {"__data__": {"id_": "59708d29-7524-41fa-8e71-2b31536a1c85", "embedding": null, "metadata": {"page_label": "51", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6caafe20-4175-43b5-8555-af71b26eba7b", "node_type": "4", "metadata": {"page_label": "51", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "ae25f9cdfa133b8cdba5b094251d30a31e77443cb0d56e724d1b72748f552f9f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "51 | P a g e  \n \nNote: If you will omit 'name' attribute then the text filed input will not be submitted to server. \n \nHTML <textarea> tag in form \nThe <textarea> tag in HTML is used to insert multiple-line text in a form. The size of \n<textarea> can be specify either using \"rows\" or \"cols\" attribute or by CSS. \nExample: \n1. <!DOCTYPE html>   \n2. <html>   \n3. <head>   \n4.     <title>Form in HTML</title>   \n5. </head>   \n6. <body>   \n7.   <form>   \n8.         Enter your address:<br>   \n9.       <textarea rows=\"2\" cols=\"20\"></textarea>   \n10.   </form>   \n11. </body>   \n12. </html>   \nOutput: \n \n \nLabel Tag in Form \nIt is considered better to have label in form. As it makes the code parser/browser/user \nfriendly.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 724, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b7078e0b-6b94-42bf-a792-3046db3405ca": {"__data__": {"id_": "b7078e0b-6b94-42bf-a792-3046db3405ca", "embedding": null, "metadata": {"page_label": "52", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cf7c6d98-ea56-4e75-8e1a-7409d67ff1e7", "node_type": "4", "metadata": {"page_label": "52", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "96106da38feb5058994480d028afbb029132601b92f21028af16548316494e6d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "52 | P a g e  \n \nIf you click on the label tag, it will focus on the text control. To do so, you need to have for \nattribute in label tag that must be same as id attribute of input tag. \nNOTE: It is good to use <label> tag with form, although it is optional but if you will use it, then it \nwill provide a focus when you tap or click on label tag. It is more worthy with touchscreens. \n1. <form>   \n2.     <label for=\"firstname\">First Name: </label> <br/>   \n3.               <input type=\"text\" id=\"firstname\" name=\"firstname\"/> <br/>   \n4.    <label for=\"lastname\">Last Name: </label>   \n5.               <input type=\"text\" id=\"lastname\" name=\"lastname\"/> <br/>   \n6.  </form>   \nOutput: \n \n \nHTML Password Field Control \nThe password is not visible to the user in password field control. \n1. <form>   \n2.     <label for=\"password\">Password: </label>   \n3.               <input type=\"password\" id=\"password\" name=\"password\"/> <br/>   \n4. </form>   \nOutput:", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 961, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "78ff9c8d-b5d9-44d6-afe1-e644dc1dfc1c": {"__data__": {"id_": "78ff9c8d-b5d9-44d6-afe1-e644dc1dfc1c", "embedding": null, "metadata": {"page_label": "53", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "01d2f9d2-eb93-42ce-b666-7d19edab6b55", "node_type": "4", "metadata": {"page_label": "53", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "778b94c7e8844e9b1ae2583a34ff2b25474efee7731229a384355124d1d51668", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "53 | P a g e  \n \n \n \nHTML 5 Email Field Control \nThe email field in new in HTML 5. It validates the text for correct email address. You must \nuse @ and . in this field. \n1. <form>   \n2.     <label for=\"email\">Email: </label>   \n3.               <input type=\"email\" id=\"email\" name=\"email\"/> <br/>   \n4. </form>   \nIt will display in browser like below:  \n \nNote: If we will not enter the correct email, it will display error like:", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 434, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1f13f017-0688-4d47-9304-121bae14dd0b": {"__data__": {"id_": "1f13f017-0688-4d47-9304-121bae14dd0b", "embedding": null, "metadata": {"page_label": "54", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d8a5566d-54b1-4c78-ac89-681688ff2232", "node_type": "4", "metadata": {"page_label": "54", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "a21d7269ea2e1397592cfe68f7949d7e05e09c1f026147ad01bb2e0e3f5778fe", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "54 | P a g e  \n \n \nRadio Button Control \nThe radio button is used to select one option from multiple options. It is used for selection of \ngender, quiz questions etc. \nIf you use one name for all the radio buttons, only one radio button can be selected at a time. \nUsing radio buttons for multiple options, you can only choose a single option at a time.  \n1. <form>   \n2.     <label for=\"gender\">Gender: </label>   \n3.               <input type=\"radio\" id=\"gender\" name=\"gender\" value=\"male\"/>Male   \n4.               <input type=\"radio\" id=\"gender\" name=\"gender\" value=\"female\"/>Female <br/>   \n5. </form>   \n \n \nCheckbox Control \nThe checkbox control is used to check multiple options from given checkboxes. \n1. <form>   \n2. Hobby:<br>   \n3.               <input type=\"checkbox\" id=\"cricket\" name=\"cricket\" value=\"cricket\"/>   \n4.                  <label for=\"cricket\">Cricket</label> <br>   \n5.               <input type=\"checkbox\" id=\"football\" name=\"football\" value=\"football\"/>   \n6.                  <label for=\"football\">Football</label> <br>   \n7.               <input type=\"checkbox\" id=\"hockey\" name=\"hockey\" value=\"hockey\"/>   \n8.                  <label for=\"hockey\">Hockey</label>   \n9. </form>   \nNote: These are similar to radio button except it can choose multiple options at a time and radio \nbutton can select one button at a time, and its display. \nOutput:", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1380, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6c96ba8f-0ee3-4fb6-91cd-678fea4ac19a": {"__data__": {"id_": "6c96ba8f-0ee3-4fb6-91cd-678fea4ac19a", "embedding": null, "metadata": {"page_label": "55", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c09bb191-7702-4cd2-b6ad-c4bbb70000c3", "node_type": "4", "metadata": {"page_label": "55", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "0debe8668470bbb9275b9d271b40e7435a33b22b27b3842d73f06e58f92383f8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "55 | P a g e  \n \n \n \nSubmit button control \nHTML <input type=\"submit\"> are used to add a submit button on web page. When user \nclicks on submit button, then form get submit to the server.  \nSyntax:  \n1. <input type=\"submit\" value=\"submit\">   \nThe type = submit , specifying that it is a submit button  \nThe value attribute can be anything which we write on button on web page.  \nThe name attribute can be omit here.  \nExample:  \n1. <form>   \n2.     <label for=\"name\">Enter name</label><br>   \n3.     <input type=\"text\" id=\"name\" name=\"name\"><br>   \n4.     <label for=\"pass\">Enter Password</label><br>   \n5.     <input type=\"Password\" id=\"pass\" name=\"pass\"><br>   \n6.     <input type=\"submit\" value=\"submit\">   \n7. </form>   \nOutput:", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 736, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "82bcf605-8274-4502-81c8-a23a0a5f1bd3": {"__data__": {"id_": "82bcf605-8274-4502-81c8-a23a0a5f1bd3", "embedding": null, "metadata": {"page_label": "56", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "47713349-f5fb-45d3-bb93-54425e866dfe", "node_type": "4", "metadata": {"page_label": "56", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "4365b8635bd8a48081cd5c98a6213d3aab498339cafac72fa4fd89e55735d068", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "56 | P a g e  \n \n \n \nHTML <fieldset> element:  \nThe <fieldset> element in HTML is used to group the related information of a form. This \nelement is used with <legend> element which provide caption for the grouped elements.  \nExample:  \n1.  <form>   \n2.      <fieldset>   \n3.       <legend>User Information:</legend>   \n4.     <label for=\"name\">Enter name</label><br>   \n5. <input type=\"text\" id=\"name\" name=\"name\"><br>   \n6. <label for=\"pass\">Enter Password</label><br>   \n7. <input type=\"Password\" id=\"pass\" name=\"pass\"><br>   \n8. <input type=\"submit\" value=\"submit\">   \n9. </fieldset>   \n10. lt;/form>   \nOutput:", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 618, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3e152e59-4909-4f3e-b32c-7f66463636ff": {"__data__": {"id_": "3e152e59-4909-4f3e-b32c-7f66463636ff", "embedding": null, "metadata": {"page_label": "57", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "01f7b517-bb5a-4608-a449-283b01530060", "node_type": "4", "metadata": {"page_label": "57", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "13b1d621e89a11a853dade3afd931b1e54407c20db618e93d746d7130cc316de", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "57 | P a g e  \n \nHTML Form Example \nFollowing is the example for a simple form of registration.  \n1. <!DOCTYPE html>   \n2.  <html>   \n3.  <head>   \n4.   <title>Form in HTML</title>   \n5. </head>   \n6.  <body>   \n7.      <h2>Registration form</h2>   \n8.     <form>   \n9.      <fieldset>   \n10.         <legend>User personal information</legend>   \n11.         <label>Enter your full name</label><br>   \n12.         <input type=\"text\" name=\"name\"><br>   \n13.          <label>Enter your email</label><br>   \n14.          <input type=\"email\" name=\"email\"><br>   \n15.          <label>Enter your password</label><br>   \n16.          <input type=\"password\" name=\"pass\"><br>   \n17.          <label>confirm your password</label><br>   \n18.          <input type=\"password\" name=\"pass\"><br>   \n19.          <br><label>Enter your gender</label><br>   \n20.          <input type=\"radio\" id=\"gender\" name=\"gender\" value=\"male\"/>Male  <br>   \n21.          <input type=\"radio\" id=\"gender\" name=\"gender\" value=\"female\"/>Female <br/\n>     \n22.          <input type=\"radio\" id=\"gender\" name=\"gender\" value=\"others\"/>others <br/>    \n23.           <br>Enter your Address:<br>   \n24.          <textarea></textarea><br>   \n25.          <input type=\"submit\" value=\"sign-up\">   \n26.      </fieldset>   \n27.   </form>   \n28.  </body>   \n29. </html>   \nOutput:", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1337, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "14c54966-3412-440c-916c-873b15e4b6ff": {"__data__": {"id_": "14c54966-3412-440c-916c-873b15e4b6ff", "embedding": null, "metadata": {"page_label": "58", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a37707be-4c71-4fa1-84a3-699f7989ec72", "node_type": "4", "metadata": {"page_label": "58", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "f2ee9ac9365bc47b0af783bcb591598500b00c98e87095ba67d21aea7044d8f0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "58 | P a g e  \n \nHTML Form Input Types \nIn HTML <input type=\" \"> is an important element of HTML form. The \"type\" attribute of \ninput element can be various types, which defines information field. Such as <input \ntype=\"text\" name=\"name\"> gives a text box.  \nFollowing is a list of all types of <input> element of \nHTML.  \ntype=\" \" Description \ntext Defines a one-line text input field \npassword Defines a one-line password input field \nsubmit Defines a submit button to submit the form to server \nreset Defines a reset button to reset all values in the form.  \nradio Defines a radio button which allows select one option.  \ncheckbox Defines checkboxes which allow select multiple options form.  \nbutton Defines a simple push button, which can be programmed to perform a task on an event. \nfile Defines to select the file from device storage. \nimage Defines a graphical submit button.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 887, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a7de8a5d-a3dc-4f48-8fe5-6291f15aebbe": {"__data__": {"id_": "a7de8a5d-a3dc-4f48-8fe5-6291f15aebbe", "embedding": null, "metadata": {"page_label": "59", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "680cf164-0707-460e-8adf-992cb4372ede", "node_type": "4", "metadata": {"page_label": "59", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "ec68318a346a1c1b3a33a63139bc341ab0d5ff345be6e42ebdd1a29273263234", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "59 | P a g e  \n \nHTML5 added new types on <input> element. Following is the list of types of elements \nof HTML5 \ntype=\" \" Description \ncolor Defines an input field with a specific color.  \ndate Defines an input field for selection of date. \ndatetime-local Defines an input field for entering a date without time zone. \nemail Defines an input field for entering an email address.  \nmonth Defines a control with month and year, without time zone.  \nnumber Defines an input field to enter a number. \nurl Defines a field for entering URL \nweek Defines a field to enter the date with week-year, without time zone. \nsearch Defines a single line text field for entering a search string. \ntel Defines an input field for entering the telephone number. \n \nFollowing is the description about types of <input> element with examples.  \n1. <input type=\"text\">:  \n<input> element of type \"text\" are used to define a single-line input text field.  \nExample:  \n1. <form>   \n2.     <label>Enter first name</label><br>   \n3.     <input type=\"text\" name=\"firstname\"><br>   \n4.     <label>Enter last name</label><br>   \n5.     <input type=\"text\" name=\"lastname\"><br>   \n6.     <p><strong>Note:</strong>The default maximum cahracter lenght is 20.</p>   \n7. </form>   \nOutput: \nInput \"text\" type: \nThe \"text\"field defines a sinlge line input text field.  \nEnter first name", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1353, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "73d84eb6-20bf-4662-b052-6008d4195c11": {"__data__": {"id_": "73d84eb6-20bf-4662-b052-6008d4195c11", "embedding": null, "metadata": {"page_label": "60", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5fb840f6-b2a6-4793-87a6-2e4dfba56418", "node_type": "4", "metadata": {"page_label": "60", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "acb9856dc4fa16d141a836a8ac99f9c688594c355c19978fdf0530fe6211f4f6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "60 | P a g e  \n \nEnter last name \n \nNote:The default maximum cahracterlenght is 20. \n \n2. <input type=\"password\">:  \nThe <input> element of type \"password\" allow a user to enter the password securely in a \nwebpage. The entered text in password filed converted into \"*\" or \".\", so that it cannot be \nread by another user.  \nExample:  \n1. <form>   \n2.     <label>Enter User name</label><br>   \n3.     <input type=\"text\" name=\"firstname\"><br>   \n4.     <label>Enter Password</label><br>   \n5.     <input type=\"Password\" name=\"password\"><br>   \n6.     <br><input type=\"submit\" value=\"submit\">   \n7. </form>   \nOutput: \nInput \"password\" type: \nThe \"password\"field defines a sinlge line input password field to enter the password \nsecurely.  \nEnter User name \n \nEnter Password \n \n \n3. <input type=\"submit\">: \nThe <input> element of type \"submit\" defines a submit button to submit the form to the \nserver when the \"click\" event occurs.  \nExample:  \n1. <form action=\"https://www.javatpoint.com/html-tutorial\">   \n2.     <label>Enter User name</label><br>   \n3.     <input type=\"text\" name=\"firstname\"><br>   \n4.     <label>Enter Password</label><br>   \n5.     <input type=\"Password\" name=\"password\"><br>   \n6.     <br><input type=\"submit\" value=\"submit\">", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1250, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "07fa5598-de4c-4f6b-8142-b7340c47d85f": {"__data__": {"id_": "07fa5598-de4c-4f6b-8142-b7340c47d85f", "embedding": null, "metadata": {"page_label": "61", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6aff1379-6672-4f7f-8565-1a126fd91692", "node_type": "4", "metadata": {"page_label": "61", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "ef9b896e45d45589233d043f62b311fef2ab7e8e2699dd7b13e713144dc38c74", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "61 | P a g e  \n \n7. </form>   \nOutput: \nInput \"submit\" type: \nEnter User name \n \nEnter Password \n \nAfter clicking on submit button, this will submit the form to server and will redirect the page \nto action value.We will learn about \"action\" attribute in later chapters \n \n4. <input type=\"reset\">: \nThe <input> type \"reset\" is also defined as a button but when the user performs a click event, \nit by default reset the all inputted values.  \nExample:  \n1. <form>   \n2.     <label>User id: </label>   \n3.      <input type=\"text\" name=\"user-id\" value=\"user\">   \n4.               <label>Password: </label>   \n5.      <input type=\"password\" name=\"pass\" value=\"pass\"><br><br>    \n6.      <input type=\"submit\" value=\"login\">   \n7.       <input type=\"reset\" value=\"Reset\">   \n8. </form>   \nOutput: \nInput \"reset\" type: \nUser id: \nuser Password: \n****  \nTry to change the input values of user id and password, then when you click on reset, it will \nreset input fields with default values.  \n \n5. <input type=\"radio\">:  \nThe <input> type \"radio\" defines the radio buttons, which allow choosing an option between \na set of related options. At a time only one radio button option can be selected at a time.  \nExample:  \n1. <form>", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1221, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d23a5717-eae9-4b82-8c28-8d4c6ae2fb5d": {"__data__": {"id_": "d23a5717-eae9-4b82-8c28-8d4c6ae2fb5d", "embedding": null, "metadata": {"page_label": "62", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6d35efa5-1d78-4d6c-bc8d-712f6aede4e7", "node_type": "4", "metadata": {"page_label": "62", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "2bd09b2d2a4160ac0067a8f28fbc88ae4ab9ef5e509b5c73e0c9dd4b46719aeb", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "62 | P a g e  \n \n2.   <p>Kindly Select your favorite color</p>   \n3.   <input type=\"radio\" name=\"color\" value=\"red\"> Red <br>   \n4.   <input type=\"radio\" name=\"color\" value=\"blue\"> blue <br>   \n5.   <input type=\"radio\" name=\"color\" value=\"green\">green <br>   \n6.   <input type=\"radio\" name=\"color\" value=\"pink\">pink <br>   \n7.   <input type=\"submit\" value=\"submit\">   \n8. </form>   \nOutput: \nInput \"radio\" type \nKindly Select your favoritecolor \nRed  \nblue  \ngreen  \npink  \n \n6. <input type=\"checkbox\">:  \nThe <input> type \"checkbox\" are displayed as square boxes which can be checked or \nunchecked to select the choices from the given options.  \nNote: The \"radio\" buttons are similar to checkboxes, but there is an important difference between \nboth types: radio buttons allow the user to select only one option at a time, whereas checkbox allows \na user to select zero to multiple options at a time.  \nExample:  \n1. <form>    \n2.       <label>Enter your Name:</label>   \n3.       <input type=\"text\" name=\"name\">   \n4.       <p>Kindly Select your favourite sports</p>   \n5.       <input type=\"checkbox\" name=\"sport1\" value=\"cricket\">Cricket<br>   \n6.       <input type=\"checkbox\" name=\"sport2\" value=\"tennis\">Tennis<br>   \n7.       <input type=\"checkbox\" name=\"sport3\" value=\"football\">Football<br>   \n8.       <input type=\"checkbox\" name=\"sport4\" value=\"baseball\">Baseball<br>   \n9.       <input type=\"checkbox\" name=\"sport5\" value=\"badminton\">Badminton<br><br>\n   \n10.       <input type=\"submit\" value=\"submit\">   \n11.   </form>   \nOutput: \nInput \"checkbox\" type", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1569, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3194403c-c730-43c9-896d-2b56133584d4": {"__data__": {"id_": "3194403c-c730-43c9-896d-2b56133584d4", "embedding": null, "metadata": {"page_label": "63", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6c0e4ea5-2209-4d30-b863-219228260e96", "node_type": "4", "metadata": {"page_label": "63", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "0348c92bda6024b9952fb7734f84c538a4f2d0e1c7cb65cdc2572fb41e92d316", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "63 | P a g e  \n \n \nRegistration Form \nEnter your Name: \n  \nKindly Select your favorite sports \nCricket \nTennis \nFootball \nBaseball \nBadminton \n \n7. <input type=\"button\">: \nThe <input> type \"button\" defines a simple push button, which can be programmed to control \na functionally on any event such as, click event.  \nNote: It mainly works with JavaScript.  \nExample:  \n1. <form>   \n2.      <input type=\"button\" value=\"Clcik me \" onclick=\"alert('you are learning HTML')\">   \n3. </form>   \nOutput: \nInput \"button\" type. \nClick the button to see the result:  \nNote: In the above example we have used the \"alert\" of JS, which you will learn in our JS tutorial. It \nis used to show a pop window.  \n \n8. <input type=\"file\">:  \nThe <input> element with type \"file\" is used to select one or more files from user device \nstorage. Once you select the file, and after submission, this file can be uploaded to the server \nwith the help of JS code and file API.  \nExample:  \n1. <form>   \n2.      <label>Select file to upload:</label>", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1023, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "99b56f5d-b06a-4771-b1e8-43ebd9b11e4e": {"__data__": {"id_": "99b56f5d-b06a-4771-b1e8-43ebd9b11e4e", "embedding": null, "metadata": {"page_label": "64", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1aedcc24-899a-43ee-9086-3ccdaee16272", "node_type": "4", "metadata": {"page_label": "64", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "74f35357c71335a11019b16351fedd5dc85d59368de95a2a99d11ff013e59e06", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "64 | P a g e  \n \n3.      <input type=\"file\" name=\"newfile\">   \n4.      <input type=\"submit\" value=\"submit\">   \n5. </form>   \nOutput: \nInput \"file\" type. \nWe can choose any type of file until we do not specify it! The selected file will appear at next \nto \"choose file\" option \nSelect file to upload:  \n \n9. <input type=\"image\">:  \nThe <input> type \"image\" is used to represent a submit button in the form of image.  \nExample:  \n1. <!DOCTYPE html>   \n2. <html>   \n3. <body>   \n4. <h2>Input \"image\" type.</h2>   \n5. <p>We can create an image as submit button</p>   \n6.   <form>   \n7.     <label>User id:</label><br>   \n8.      <input type=\"text\" name=\"name\"><br><br>   \n9.      <input type=\"image\" alt=\"Submit\" src=\"login.png\"  width=\"100px\">   \n10.   </form>   \n11.    \n12.  </body>   \n13. </html>   \n \nHTML5 newly added <input> types element \n1. <input type=\"color\">:  \nThe <input> type \"color\" is used to define an input field which contains a colour. It allows a \nuser to specify the colour by the visual colour interface on a browser.  \nNote: The \"color\" type only supports color value in hexadecimal format, and the default value is \n#000000 (black). \nExample:  \n1. <form>   \n2.     Pick your Favorite color: <br><br>", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1225, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "cbc8d5a3-88dd-4849-a3be-fd63a28067aa": {"__data__": {"id_": "cbc8d5a3-88dd-4849-a3be-fd63a28067aa", "embedding": null, "metadata": {"page_label": "65", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c4df5388-8f0b-4c4e-b0f0-aa1c88361f90", "node_type": "4", "metadata": {"page_label": "65", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "b5732aff5c531ae4ded4f3b0b645d0203cc0b455394e3c1348fb3338c241a1a8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "65 | P a g e  \n \n3.     <input type=\"color\" name=\"upclick\" value=\"#a52a2a\"> Upclick<br><br>   \n4.     <input type=\"color\" name=\"downclick\" value=\"#f5f5dc\"> Downclick   \n5. </form>   \nOutput: \nInput \"color\" types: \nPick your Favoritecolor:  \nUp-click \nDown-click  \nNote:The default value of \"color\" type is #000000 (black). It only supports color value in \nhexadecimal format. \n \n2. <input type=\"date\">:  \nThe <input> element of type \"date\" generates an input field, which allows a user to input the \ndate in a given format. A user can enter the date by text field or by date picker interface.  \nExample:  \n1. <form>   \n2.     Select Start and End Date: <br><br>   \n3.       <input type=\"date\" name=\"Startdate\"> Start date:<br><br>   \n4.       <input type=\"date\" name=\"Enddate\"> End date:<br><br>   \n5.      <input type=\"submit\">   \n6. </form>   \nOutput: \nInput \"date\" type \nSelect Start and End Date:  \n \nStart date: \n \nEnd date: \n \n3. <input type=\"datetime-local\">:  \nThe <input> element of type \"datetime-local\" creates input filed which allow a user to select \nthe date as well as local time in the hour and minute without time zone information.  \nExample:  \n1. <form>   \n2.     <label>", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1193, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2f875a16-ade1-468d-97e1-a1366d332eab": {"__data__": {"id_": "2f875a16-ade1-468d-97e1-a1366d332eab", "embedding": null, "metadata": {"page_label": "66", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5730c063-339c-46f5-8b53-29067b908177", "node_type": "4", "metadata": {"page_label": "66", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "d0121e7105dbca905c531dcc27034f23f09e49bef28f2253bcceea6172a9b1f6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "66 | P a g e  \n \n3.       Select the meeting schedule: <br><br>   \n4.       Select date & time: <input type=\"datetime-local\" name=\"meetingdate\"> <br><br>   \n5.     </label>   \n6.       <input type=\"submit\">   \n7. </form>   \nOutput: \nInput \"datetime-local\" type \nSelect the meeting schedule:  \n \nSelect date & time:  \n \n \n \n4. <input type=\"email\">:  \nThe <input> type \"email\" creates an input filed which allow a user to enter the e-mail address \nwith pattern validation. The multiple attributes allow a user to enter more than one email \naddress.  \nExample:  \n1. <form>   \n2.          <label><b>Enter your Email-address</b></label>   \n3.         <input type=\"email\" name=\"email\" required>   \n4.         <input type=\"submit\">   \n5.          <p><strong>Note:</strong>User can also enter multiple email addresses separat\ning by comma or whitespace as following: </p>   \n6.          <label><b>Enter multiple Email-addresses</b></label>   \n7.          <input type=\"email\" name=\"email\"  multiple>   \n8.         <input type=\"submit\">   \n9. </form>      \nOutput: \nInput \"email\" type \nEnter your Email-address \nNote:User can also enter multiple email addresses separating by comma or whitespace as \nfollowing:  \nEnter multiple Email-addresses", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1237, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7372305e-2893-4628-a0bb-14e47b8d289c": {"__data__": {"id_": "7372305e-2893-4628-a0bb-14e47b8d289c", "embedding": null, "metadata": {"page_label": "67", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "396aa6bb-9f1c-4ab3-a444-35075462f894", "node_type": "4", "metadata": {"page_label": "67", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "84671bc2ce8b87c78232c4351950facf7136cf6b9cd17b49269477b7718b51af", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "67 | P a g e  \n \n5. <input type=\"month\">:  \nThe <input> type \"month\" creates an input field which allows a user to easily enter month \nand year in the format of \"MM, YYYY\" where MM defines month value, and YYYY defines \nthe year value. New  \nExample:  \n1. <form>   \n2.     <label>Enter your Birth Month-year: </label>   \n3.     <input type=\"month\" name=\"newMonth\">   \n4.     <input type=\"submit\">   \n5. </form>   \nOutput: \nInput \"month\" type: \nEnter your Birth Month-year:  \nHTML form Attribute \nHTML <form> element attributes \nIn HTML there are various attributes available for <form> element which are given below: \nHTML action attribute \nThe action attribute of <form> element defines the process to be performed on form when \nform is submitted, or it is a URI to process the form information.  \nThe action attribute value defines the web page where information proceed. It can be .php, \n.jsp, .asp, etc. or any URL where you want to process your form. \nNote: If action attribute value is blank then form will be processed to the same page. \nExample: \n1. <form action=\"action.html\" method=\"post\">   \n2. <label>User Name:</label><br>   \n3. <input type=\"text\" name=\"name\"><br><br>   \n4. <label>User Password</label><br>   \n5. <input type=\"password\" name=\"pass\"><br><br>   \n6.  <input type=\"submit\">   \n7.    </form>   \nOutput: \nDemo of action attribute of form element", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1373, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7d806deb-c08a-4286-b339-907212deb5e8": {"__data__": {"id_": "7d806deb-c08a-4286-b339-907212deb5e8", "embedding": null, "metadata": {"page_label": "68", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1adea7d1-a367-46ef-b0da-ad544de6ae09", "node_type": "4", "metadata": {"page_label": "68", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "6a33f1bab69f6fd9eaf96d5f8964c0b04acbc36eb36380b559c86df3aab2e558", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "68 | P a g e  \n \nUser Name: \n \n \nUser Password \n \nIt will redirect to a new page \"action.html\" when you click on submit button \n \nHTML method attribute \nThe method attribute defines the HTTP method which browser used to submit the form. The \npossible values of method attribute can be: \n\uf0b7 post: We can use the post value of method attribute when we want to process the sensitive \ndata as it does not display the submitted data in URL. \nExample: \n1. <form action=\"action.html\" method=\"post\">   \n\uf0b7 get: The get value of method attribute is default value while submitting the form. But this is \nnot secure as it displays data in URL after submitting the form. \nExample: \n1. <form action=\"action.html\" method=\"get\">   \nWhen submitting the data, it will display the entered data in the form of: \n1. file:///D:/HTML/action.html?name=JavaTPoint&pass=123   \n \nHTML target attribute \nThe target attribute defines where to open the response after submitting the form. The \nfollowing are the keywords used with the target attribute. \n\uf0b7 _self: If we use _self as an attribute value, then the response will display in current page only. \nExample: \n1. <form action=\"action.html\" method=\"get\" target=\"_self\">   \n\uf0b7 _blank: If we use _blank as an attribute it will load the response in a new page.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1284, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d9d7baf7-28ce-4d47-8167-cd35fb928a44": {"__data__": {"id_": "d9d7baf7-28ce-4d47-8167-cd35fb928a44", "embedding": null, "metadata": {"page_label": "69", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6973b224-8005-4694-b9f8-b765cb7823f3", "node_type": "4", "metadata": {"page_label": "69", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "ee009a65168b8b462c3247f990c5007a493f09e93fad91e230cb771bf4df93b1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "69 | P a g e  \n \nExample: \n1. <form action=\"action.html\" method=\"get\" target=\"_blank\">   \n \nHTML autocomplete attribute \nThe HTML autocomplete attribute is a newly added attribute of HTML5 which enables an \ninput field to complete automatically. It can have two values \"on\" and \"off\" which enables \nautocomplete either ON or OFF. The default value of autocomplete attribute is \"on\". \nExample: \n1. <form action=\"action.html\" method=\"get\" autocomplete=\"on\">   \nExample: \n1. <form action=\"action.html\" method=\"get\" autocomplete=\"off\">   \nNote: it can be used with <form> element and <input> element both. \n \nHTML enctype attribute \nThe HTML enctype attribute defines the encoding type of form-content while submitting the \nform to the server. The possible values of enctype can be: \n\uf0b7 application/x-www-form-urlencoded: It is default encoding type if the enctype attribute is \nnot included in the form. All characters are encoded before submitting the form. \nExample: \n1. <form action=\"action.html\" method=\"post\" enctype=\"application/x-www-form-\nurlencoded\" >   \n\uf0b7 multipart/form-data: It does not encode any character. It is used when our form contains \nfile-upload controls.  \nExample: \n1. <form action=\"action.html\" method=\"post\" enctype=\"multipart/form-data\">   \n\uf0b7 text/plain (HTML5): In this encoding type only space are encoded into + symbol and no any \nother special character encoded. \nExample: \n1. <form action=\"action.html\" method=\"post\" enctype=\"text/plain\" >", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1471, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3ecaf7ed-fb88-4e89-999f-ea1ef73aaec7": {"__data__": {"id_": "3ecaf7ed-fb88-4e89-999f-ea1ef73aaec7", "embedding": null, "metadata": {"page_label": "70", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f3e3118e-c22c-4d20-8e60-dc03f69d06b6", "node_type": "4", "metadata": {"page_label": "70", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "a787ca5233086a3ac0226e6711e52f4986b6f2bf7acc53a408663859bc160596", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "70 | P a g e  \n \n \nHTML novalidate attribute HTML5 \nThe novalidate attribute is newly added Boolean attribute of HTML5. If we apply this \nattribute in form then it does not perform any type of validation and submit the form. \nExample: \n1. <form action = \"action.html\" method = \"get\" novalidate>   \nOutput: \nFill the form \nEnter name: \n \nEnter age: \n \nEnter email: \n \nTry to change the form detials with novalidateatttribute and without novalidate \nattribute and see the difference. \n \nHTML <input> element attribute \nHTML name attribute \nThe HTML name attribute defines the name of an input element. The name and value \nattribute are included in HTTP request when we submit the form.  \nNote: One should not omit the name attribute as when we submit the form the HTTP request includes \nboth name-value pair and if name is not available it will not process that input field. \nExample: \n1. <form action = \"action.html\" method = \"get\">   \n2.          Enter name:<br><input type=\"name\" name=\"uname\"><br>   \n3.          Enter age:<br><input type=\"number\" name=\"age\"><br>   \n4.          Enter email:<br><input type=\"email\"><br>   \n5.          <input type=\"submit\" value=\"Submit\">   \n6.       </form>   \nOutput:", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1207, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "886fed0c-edce-454b-ab8b-682251d444f9": {"__data__": {"id_": "886fed0c-edce-454b-ab8b-682251d444f9", "embedding": null, "metadata": {"page_label": "71", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4b512246-a8d9-4e5f-a031-808612addc82", "node_type": "4", "metadata": {"page_label": "71", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "2e085e9a8736b2c4488f8289f6851fd39d3493d4cab80fef18214d3d4c0af520", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "71 | P a g e  \n \nFill the form \nEnter name: \n \nEnter age: \n \nEnter email: \n \nNote: If you will not use name attribute in any input field, then that input field will not \nbe submitted, when submit the form. \nClick on submit and see the URL where email is not included in HTTP request as we have \nnot used name attribute in the email input field \n \nHTML value attribute \nThe HTML value attribute defines the initial value or default value of an input field. \nExample: \n1. <form>   \n2.         <label>Enter your Name</label><br>   \n3.         <input type=\"text\" name=\"uname\" value=\"Enter Name\"><br><br>   \n4.         <label>Enter your Email-address</label><br>   \n5.         <input type=\"text\" name=\"uname\" value=\"Enter email\"><br><br>   \n6.           <label>Enter your password</label><br>   \n7.         <input type=\"password\" name=\"pass\" value=\"\"><br><br>   \n8.         <input type=\"submit\" value=\"login\">   \n9.    </form>    \nOutput: \nFill the form \nEnter your Name \nE nter Name\n \n \nEnter your Email-address \nE nter email\n \n \nEnter your password \n \nNote: In password input filed the value attribute will always unclear", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1122, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "bf9e894e-0cb3-4663-be3e-d76bead94032": {"__data__": {"id_": "bf9e894e-0cb3-4663-be3e-d76bead94032", "embedding": null, "metadata": {"page_label": "72", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "eacc659a-6a20-41f0-928c-4d5f554f8515", "node_type": "4", "metadata": {"page_label": "72", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "1d6afe6bc761c51684762005b6c6eae32750e8e9d9fbd27dc18bc12e05c31b7f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "72 | P a g e  \n \n \nHTML required attribute HTML5 \nHTML required is a Boolean attribute which specifies that user must fill that filed before \nsubmitting the form. \nExample: \n1. <form>   \n2.         <label>Enter your Email-address</label><br>   \n3.         <input type=\"text\" name=\"uname\" required><br><br>   \n4.          <label>Enter your password</label><br>   \n5.         <input type=\"password\" name=\"pass\"><br><br>   \n6.         <input type=\"submit\" value=\"login\">   \n7.    </form>   \nOutput: \nFill the form \nEnter your Email-address \n \n \nEnter your password \n \nIf you will try to submit the form without completing email field then it will give an \nerror pop up. \n \nHTML autofocus attribute HTML5 \nThe autofocus is a Boolean attribute which enables a field automatically focused when a \nwebpage loads. \nExample: \n1. <form>   \n2.         <label>Enter your Email-address</label><br>   \n3.         <input type=\"text\" name=\"uname\" autofocus><br><br>   \n4.          <label>Enter your password</label><br>   \n5.         <input type=\"password\" name=\"pass\"><br><br>   \n6.         <input type=\"submit\" value=\"login\">   \n7.    </form>", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1132, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7c8dd347-48f6-4c60-9b42-b98af9296b2b": {"__data__": {"id_": "7c8dd347-48f6-4c60-9b42-b98af9296b2b", "embedding": null, "metadata": {"page_label": "73", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "857c3d33-be61-4de7-a660-249ac65f6d78", "node_type": "4", "metadata": {"page_label": "73", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "77fee741f88bf2d7801099834733d46c084ef89aaa8d6f7a28bdb2d61ba7dfbc", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "73 | P a g e  \n \nHTML placeholder attribute HTML5 \nThe placeholder attribute specifies a text within an input field which informs the user about \nthe expected input of that filed.  \nThe placeholder attribute can be used with text, password, email, and URL values.  \nWhen the user enters the value, the placeholder will be automatically removed. \nExample: \n1. <form>   \n2.         <label>Enter your name</label><br>   \n3.         <input type=\"text\" name=\"uname\" placeholder=\"Your name\"><br><br>   \n4.             <label>Enter your Email address</label><br>   \n5.         <input type=\"email\" name=\"email\" placeholder=\"example@gmail.com\"><br><\nbr>   \n6.             <label>Enter your password</label><br>   \n7.         <input type=\"password\" name=\"pass\" placeholder=\"your password\"><br><br>   \n8.         <input type=\"submit\" value=\"login\">   \n9.     </form>   \nOutput: \nRegistration form \nEnter your name \n \n \nEnter your Email address \n \n \nEnter your password \n \n \nHTML disabled attribute \nThe HTML disabled attribute when applied then it disable that input field. The disabled field \ndoes not allow the user to interact with that field.  \nThe disabled input filed does not receive click events, and these input value will not be sent \nto the server when submitting the form. \nExample: \n1. <input type=\"text\" name=\"uname\" disabled><br><br>", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1341, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a5771adc-3094-42f2-9be0-c7691a45a576": {"__data__": {"id_": "a5771adc-3094-42f2-9be0-c7691a45a576", "embedding": null, "metadata": {"page_label": "74", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0ba5e8ff-a10b-4a3d-995e-acb7efaa5d33", "node_type": "4", "metadata": {"page_label": "74", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "83922c03eee38403f8d9ba868d451cda8f27cc2e0cd225e8062f892a174f2586", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "74 | P a g e  \n \nOutput: \nRegistration form \nEnter User name \nUSE R\n \n \nEnter your Email address \n \n \nEnter your password \n \n \nHTML size attribute \nThe size attribute controls the size of the input field in typed characters. \nExample: \n1. <label>Account holder name</label><br>   \n2.         <input type=\"text\" name=\"uname\" size=\"40\" required><br><br>   \n3.         <label>Account number</label><br>   \n4.         <input type=\"text\" name=\"an\" size=\"30\" required><br><br>   \n5.         <label>CVV</label><br>   \n6.         <input type=\"text\" name=\"cvv\"  size=\"1\" required><br><br>   \nOutput: \nRegistration form with disbaled attribute \nAccount holder name \n \n \nAccount number \n \n \nCVV \n \n \nHTML form attribute \nHTML form attribute allows a user to specify an input filed outside the form but remains the \npart of the parent form.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 832, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d4388c65-7c1b-4fe4-b408-d53a011aebdf": {"__data__": {"id_": "d4388c65-7c1b-4fe4-b408-d53a011aebdf", "embedding": null, "metadata": {"page_label": "75", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "436c39c7-cee0-4ed4-8299-55c25dbc341f", "node_type": "4", "metadata": {"page_label": "75", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "78439aeb69a34f44ba8fd6e2e40ab0e81f81103204ceba99fc224ac164aa8d45", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "75 | P a g e  \n \nExample: \n1. User email: <br><input type=\"email\" name=\"email\"  form=\"fcontrol\"  required><br>\n   \n2.          <input type=\"submit\" form=\"fcontrol\">   \nOutput: \nUser Name: \n \n \nUser password: \n \nThe email field is outside the form but still it will remain part of the form \nUser email:  \n \nHTML style using CSS \nLet's suppose we have created our web page using a simple HTML code, and we want \nsomething which can present our page in a correct format, and visibly attractive. So to do \nthis, we can style our web page with CSS (Cascading Stylesheet) properties. \nCSS is used to apply the style in the web page which is made up of HTML elements. It \ndescribes the look of the webpage. \nCSS provides various style properties such as background color, padding, margin, border-\ncolor, and many more, to style a webpage. \nEach property in CSS has a name-value pair, and each property is separated by a semicolon \n(;). \nNote: In this chapter, we have given a small overview of CSS. You will learn everything in depth \nabout CSS in our CSS tutorial. \nExample: \n1. <body style=\"text-align: center;\">   \n2.       <h2 style=\"color: red;\">Welcome to javaTpoint</h2>   \n3.       <p style=\"color: blue; font-size: 25px; font-\nstyle: italic ;\">This is a great website to learn technologies in very simple way. </p>   \n4. </body>   \nIn the above example, we have used a style attribute to provide some styling format to our \ncode. \nOutput:", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1444, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "521c7ece-3915-4493-81de-11b3c4d4ba3c": {"__data__": {"id_": "521c7ece-3915-4493-81de-11b3c4d4ba3c", "embedding": null, "metadata": {"page_label": "76", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0af0d4a3-c661-4ccf-90a8-5bfc5ea79af1", "node_type": "4", "metadata": {"page_label": "76", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "f68bb45e9a9ec932cda3a633531bf948ea179211d75f4f58ea69055564230804", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "76 | P a g e  \n \nWelcome to javaTpoint \nThis is a great website to learn technologies in very simple way. \n \nThree ways to apply CSS \nTo use CSS with HTML document, there are three ways: \n\uf0b7 Inline CSS: Define CSS properties using style attribute in the HTML elements.  \n\uf0b7 Internal or Embedded CSS: Define CSS using <style> tag in <head> section. \n\uf0b7 External CSS: Define all CSS property in a separate .css file, and then include the file with \nHTML file using tag in section. \n \nInline CSS: \nInline CSS is used to apply CSS in a single element. It can apply style uniquely in each \nelement. \nTo apply inline CSS, you need to use style attribute within HTML element. We can use as \nmany properties as we want, but each property should be separated by a semicolon (;). \nExample: \n1. <h3 style=\"color: red;   \n2.             font-style: italic;   \n3.             text-align: center;   \n4.             font-size: 50px;   \n5.             padding-top: 25px;\">Learning HTML using Inline CSS</h3>   \nOutput: \nLearning HTML using Inline CSS \n \nInternal CSS: \nAn Internal stylesheets contains the CSS properties for a webpage in <head> section of \nHTML document. To use Internal CSS, we can use class and id attributes. \nWe can use internal CSS to apply a style for a single HTML page. \nExample: \n1. <!DOCTYPE html>", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1309, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1706eb3e-b3b6-4903-b828-93d79e94fa48": {"__data__": {"id_": "1706eb3e-b3b6-4903-b828-93d79e94fa48", "embedding": null, "metadata": {"page_label": "77", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a1a62f1c-3963-45fb-a51e-7a61f29ae0d3", "node_type": "4", "metadata": {"page_label": "77", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "623f7bc24e6356a817f807f26fc1ab9cc65679ee84eb73624a395aae7b3774f2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "77 | P a g e  \n \n2. <html>   \n3. <head>   \n4.                   <style>   \n5.       /*Internal CSS using element name*/   \n6.             body{background-color:lavender;   \n7.              text-align: center;}   \n8.              h2{font-style: italic;   \n9.               font-size: 30px;   \n10.               color: #f08080;}   \n11.             p{font-size: 20px;}   \n12.         /*Internal CSS using class name*/   \n13.             .blue{color: blue;}   \n14.             .red{color: red;}   \n15.             .green{color: green;}   \n16.       </style>   \n17.     </head>   \n18.   <body>   \n19.    <h2>Learning HTML with internal CSS</h2>   \n20.     <p class=\"blue\">This is a blue color paragraph</p>   \n21.     <p class=\"red\">This is a red color paragraph</p>   \n22.     <p class=\"green\">This is a green color paragraph</p>   \n23.   </body>   \n24. </html>   \nNote: In the above example, we have used a class attribute which you will learn in the next chapter. \n \nExternal CSS: \nAn external CSS contains a separate CSS file which only contains style code using the class \nname, id name, tag name, etc. We can use this CSS file in any HTML file by including it in \nHTML file using <link> tag.  \nIf we have multiple HTML pages for an application and which use similar CSS, then we can \nuse external CSS.  \nThere are two files need to create to apply external CSS \n\uf0b7 First, create the HTML file \n\uf0b7 Create a CSS file and save it using the .css extension (This file only will only contain the \nstyling code.) \n\uf0b7 Link the CSS file in your HTML file using tag in header section of HTML document. \nExample: \n1. <!DOCTYPE html>   \n2. <html>   \n3. <head>   \n4.     <link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">   \n5.     </head>   \n6.   <body>", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1749, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3bfb8c9d-d897-48e5-a333-811c6cc8e24e": {"__data__": {"id_": "3bfb8c9d-d897-48e5-a333-811c6cc8e24e", "embedding": null, "metadata": {"page_label": "78", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "732e8b8c-1a07-48e3-84b2-b44eda8ae17a", "node_type": "4", "metadata": {"page_label": "78", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "49e73c2358190d3a26b20554c8bf471c73a2d474b3ed43846f8c96f574e54564", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "78 | P a g e  \n \n7.    <h2>Learning HTML with External CSS</h2>   \n8.     <p class=\"blue\">This is a blue color paragraph</p>   \n9.     <p class=\"red\">This is a red color paragraph</p>   \n10.     <p class=\"green\">This is a green color paragraph</p>   \n11.   </body>   \n12. </html>   \nCSS file: \nbody{ \nbackground-color:lavender; \ntext-align: center; \n} \nh2{ \nfont-style: italic; \nsize: 30px; \ncolor: #f08080; \n} \np{ \nfont-size: 20px; \n} \n \n.blue{ \ncolor: blue; \n} \n.red{ \ncolor: red; \n} \n.green{ \ncolor: green; \n} \n \nCommonly used CSS properties: \nProperties-name Syntax Description \nbackground-color background-color:red; It defines the background color of that element. \ncolor color: lightgreen; It defines the color of text of an element \npadding padding: 20px; It defines the space between content and the border. \nmargin margin: 30px; margin-left: It creates space around an element. \nfont-family font-family: cursive; Font-family defines a font for a particular element. \nFont-size font-size: 50px; Font-size defines a font size for a particular element. \ntext-align text-align: left; It is used to align the text in a selected position.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1146, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1186a5d9-d2a9-468c-a814-0a829c139c4d": {"__data__": {"id_": "1186a5d9-d2a9-468c-a814-0a829c139c4d", "embedding": null, "metadata": {"page_label": "79", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7e57de75-5c94-4914-a99a-f4230b2f0dd1", "node_type": "4", "metadata": {"page_label": "79", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "a783b908944f919423fb9d47095536666ee1194f125be943bc153ea30808cc4b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "79 | P a g e  \n \nHTML Classes  \nClass Attribute in HTML \nThe HTML class attribute is used to specify a single or multiple class names for an HTML \nelement. The class name can be used by CSS and JavaScript to do some tasks for HTML \nelements. You can use this class in CSS with a specific class, write a period (.) character, \nfollowed by the name of the class for selecting elements. \nA class attribute can be defined within <style> tag or in separate file using the (.) character. \nIn an HTML document, we can use the same class attribute name with different elements. \nDefining an HTML class \nTo create an HTML class, firstly define style for HTML class using <style> tag within \n<head> section as following example: \nExample: \n1. <head>   \n2.     <style>   \n3.         .headings{    \n4.             color: lightgreen;   \n5.             font-family: cursive;   \n6.             background-color: black; }   \n7.     </style>   \n8. </head>   \nWe have define style for a class name \"headings\", and we can use this class name with any of \nHTML element in which we want to provide such styling. We just need to follow the \nfollowing syntax to use it.  \n1. <tag class=\"ghf\"> content </tag>   \nExample 1: \n1. <!DOCTYPE html>   \n2. <html>   \n3. <head>   \n4.     <style>   \n5.         .headings{    \n6.             color: lightgreen;   \n7.             font-family: cursive;   \n8.             background-color: black; }   \n9.     </style>   \n10. </head>   \n11. <body>   \n12. <h1 class=\"headings\">This is first heading</h1>", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1517, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a1c8fbcb-8a69-44be-be30-db573616b5d5": {"__data__": {"id_": "a1c8fbcb-8a69-44be-be30-db573616b5d5", "embedding": null, "metadata": {"page_label": "80", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1aa7e01a-99ac-4ff5-a85a-070e951fd07a", "node_type": "4", "metadata": {"page_label": "80", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "f84e8104b179241c83fe23ab1365aa5f6560e56d733dfd94c0225e179ba4df27", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "80 | P a g e  \n \n13. <h2 class=\"headings\">This is Second heading</h2>   \n14. <h3 class=\"headings\">This is third heading</h3>   \n15. <h4 class=\"headings\">This is fourth heading</h4>   \n16. </body>   \n17. </html>   \n \nAnother Example with different class name \nExample: \nLet's use a class name \"Fruit\" with CSS to style all elements. \n1. <style>     \n2. .fruit {     \n3.     background-color: orange;     \n4.     color: white;     \n5.     padding: 10px;     \n6. }      \n7. </style>     \n8.      \n9. <h2 class=\"fruit\">Mango</h2>     \n10. <p>Mango is king of all fruits.</p>     \n11.      \n12. <h2 class=\"fruit\">Orange</h2>     \n13. <p>Oranges are full of Vitamin C.</p>     \n14.      \n15. <h2 class=\"fruit\">Apple</h2>     \n16. <p>An apple a day, keeps the Doctor away.</p>     \nHere you can see that we have used the class name \"fruit\" with (.) to use all its elements. \nNote: You can use class attribute on any HTML element. The class name is case-sensitive. \n \nClass Attribute in JavaScript \nYou can use JavaScript access elements with a specified class name by using the \ngetElementsByClassName() method. \nExample: \nLet's hide all the elements with class name \"fruit\" when the user click on the button. \n1. <!DOCTYPE html>     \n2. <html>     \n3. <body>     \n4.      \n5. <h2>Class Attribute with JavaScript</h2>", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1314, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d335346d-3c5a-4c54-acf0-61b76e08c06e": {"__data__": {"id_": "d335346d-3c5a-4c54-acf0-61b76e08c06e", "embedding": null, "metadata": {"page_label": "81", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "eda820d9-bf1e-4e65-9963-0ae2d03f2508", "node_type": "4", "metadata": {"page_label": "81", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "6810e44eaad601af86cafc2ef437ae4b4a79b4994626054a6d04c6ae9f70b458", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "81 | P a g e  \n \n6. <p>Click the button, to hide all elements with the class name \"fruit\", with JavaScript:</p>     \n7.      \n8. <button onclick=\"myFunction()\">Hide elements</button>     \n9.      \n10.      \n11. <h2 class=\"fruit\">Mango</h2>     \n12. <p>Mango is king of all fruits.</p>     \n13.      \n14. <h2 class=\"fruit\">Orange</h2>     \n15. <p>Oranges are full of Vitamin C.</p>     \n16.      \n17. <h2 class=\"fruit\">Apple</h2>     \n18. <p>An apple a day, keeps the Doctor away.</p>     \n19.      \n20. <script>     \n21. function myFunction() {     \n22.   var x = document.getElementsByClassName(\"fruit\");     \n23.   for (var i = 0; i < x.length; i++) {     \n24.     x[i].style.display = \"none\";     \n25.   }     \n26. }     \n27. </script>     \n28.      \n29. </body>     \n30. </html>     \nNote: You will learn more about JavaScript in our JavaScript tutorial. \n \nMultiple Classes \nYou can use multiple class names (more than one) with HTML elements. These class names \nmust be separated by a space. \nExample: \nLet's style elements with class name \"fruit\" and also with a class name \"center\". \n1. <!DOCTYPE html>     \n2. <html>     \n3. <style>     \n4. .fruit {     \n5.     background-color: orange;     \n6.     color: white;     \n7.     padding: 10px;     \n8. }      \n9.      \n10. .center {     \n11.     text-align: center;     \n12. }     \n13. </style>", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1354, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6618af7b-a3d7-4dfc-9562-ce34c50d654b": {"__data__": {"id_": "6618af7b-a3d7-4dfc-9562-ce34c50d654b", "embedding": null, "metadata": {"page_label": "82", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "85e43d90-38ff-42ab-8bab-47bd4804eb15", "node_type": "4", "metadata": {"page_label": "82", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "f7d8bc815c2396fa6d16f096e515aca1cc79c179f5574d5e8a40eae45bf2d621", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "82 | P a g e  \n \n14. <body>     \n15.      \n16. <h2>Multiple Classes</h2>     \n17. <p>All three elements have the class name \"fruit\". In addition, Mango also have the cl\nass name \"center\", which center-aligns the text.</p>     \n18.      \n19. <h2 class=\"fruit center\">Mango</h2>     \n20. <h2 class=\"fruit\">Orange</h2>     \n21. <h2 class=\"fruit\">Apple</h2>     \n22.      \n23. </body>     \n24. </html>     \nYou can see that the first element <h2> belongs to both the \"fruit\" class and the \"center\" \nclass. \n \nSame class with Different Tag \nYou can use the same class name with different tags like <h2> and <p> etc. to share the same \nstyle. \nExample: \n1. <!DOCTYPE html>     \n2. <html>     \n3. <style>     \n4. .fruit {     \n5.   background-color: orange;     \n6.   color: white;     \n7.   padding: 10px;     \n8. }      \n9. </style>     \n10. <body>     \n11. <h2>Same Class with Different Tag</h2>     \n12. <h2 class=\"fruit\">Mango</h2>     \n13. <p class=\"fruit\">Mango is the king of all fruits.</p>     \n14. </body>     \n15. </html>   \nTest it NowHTML Id Attribute \nThe id attribute is used to specify the unique ID for an element of the HTML document. It \nallocates the unique identifier which is used by the CSS and the JavaScript for performing \ncertain tasks.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1261, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5dda6c9f-cfae-4b48-9ad5-494861089a5d": {"__data__": {"id_": "5dda6c9f-cfae-4b48-9ad5-494861089a5d", "embedding": null, "metadata": {"page_label": "83", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f0d06ae8-be1b-4b7a-8ceb-4155b5f5c3da", "node_type": "4", "metadata": {"page_label": "83", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "0bab806565dba139db38f284f17f55a0644f5f895d467e5f93022a1cf095a009", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "83 | P a g e  \n \nNote: In the Cascading Style sheet (CSS), we can easily select an element with the specific id by using \nthe # symbol followed by id. \nNote: JavaScript can access an element with the given ID by using the getElementById() method. \nSyntax \n1. <tag id=\"value\">   \nExample 1: The following example describes how to use the id attribute in CSS document: \n1. <!DOCTYPE html>   \n2. <html>   \n3. <head>   \n4. <title>   \n5. Example of Id attribute in CSS   \n6. </title>   \n7. <style>   \n8. #Cars {   \n9. padding: 40px;   \n10. background-color: lightblue;   \n11. color: black;       \n12. text-align: center;   \n13. }    \n14.    \n15. #Bikes   \n16. {   \n17. padding: 50px;   \n18. background-color: lightGreen;   \n19. text-align: center;   \n20. }   \n21. </style>   \n22. </head>   \n23. <body>   \n24. <p> Use CSS to style an element with the id: </p>   \n25. <h1 id=\"Cars\"> Cars </h1>   \n26. <h1 id=\"Bikes\"> Bikes </h1>   \n27. </body>   \n28. </html>    \nOutput:", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 967, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e8ef6c3b-d602-4c62-b535-b0952ea1caef": {"__data__": {"id_": "e8ef6c3b-d602-4c62-b535-b0952ea1caef", "embedding": null, "metadata": {"page_label": "84", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3df45d45-aeb0-4729-8100-1fc7c872e758", "node_type": "4", "metadata": {"page_label": "84", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "ac073307a6369b8a2a027d19aab17bac6de973ed1b6d42324259ee03c5168237", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "84 | P a g e  \n \n \nExample 2: The following example describes how to use the ID attribute in JavaScript. \n1. <!DOCTYPE html>   \n2. <html>    \n3. <head>    \n4. <title> Date Attribute </title>    \n5. <script>    \n6. function viewdate() {    \n7. var x = document.getElementById(\"dob\").value;    \n8. document.getElementById(\"demo\").innerHTML = x;    \n9. </script>    \n10. </head>    \n11. <body>    \n12. Employee Name: <input type=\"text\" placeholder=\"Your Good name\"/>    \n13. <br>   \n14. <br>   \n15. Date of Joining:    \n16. <input type=\"date\" id=\"dob\">   \n17. <br>    \n18. <button onclick=\"viewdate()\"> Submit    \n19. </button>    \n20. <br>   \n21. <h2 id=\"demo\"> </h2>    \n22. </body>    \n23. </html>", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 701, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "761e395d-e22f-49db-b29d-04f3464def3f": {"__data__": {"id_": "761e395d-e22f-49db-b29d-04f3464def3f", "embedding": null, "metadata": {"page_label": "85", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8caafaed-fa69-40f1-957c-5dfa0b3f75db", "node_type": "4", "metadata": {"page_label": "85", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "f5ab0c5658ec2e4dfb7a46cb00cfaef8e80496c0ff0cf8f054f05f6e13a5d206", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "85 | P a g e  \n \nOutput: \nHTML \nList Box \nThe list box is a graphical control element in the HTML document that allows a user to select \none or more options from the list of options. \nSyntax \nTo create a list box, use the HTML element<select> which contains two attributes Name and \nSize. The Name attribute is used to define the name for calling the list box, and size attribute \nis used to specify the numerical value that shows the how many options it contains. \n1. <select Name=\"Name_of_list_box\" Size=\"Number_of_options\">   \n2.   <option> List item 1 </option>   \n3.   <option> List item 2 </option>   \n4.   <option> List item 3 </option>   \n5.   <option> List item N </option>   \n6. </select>   \nExamples: \nExample 1: Consider the below example that creates a simple list box. \n1. <!DOCTYPE html>     \n2. <html>", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 821, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ad8cab5b-ab33-46a4-8533-3ff625e5fa8c": {"__data__": {"id_": "ad8cab5b-ab33-46a4-8533-3ff625e5fa8c", "embedding": null, "metadata": {"page_label": "86", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d8c40a68-57de-4f8a-8636-08575d3f58a5", "node_type": "4", "metadata": {"page_label": "86", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "0737aba7a2bc43b893fab1ac898ae8ed9f4fdb9d15e1ebfd1d2c74efb5faab21", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "86 | P a g e  \n \n3. <title>   \n4. Example of List Box   \n5. </title>   \n6. <body>     \n7. Customer Name:  <input type=\"text\" Placeholder=\"Enter the Customer Name\"/>   \n8. <br>   \n9. <br>   \n10. <select name=\"Cars\" size=\"5\">   \n11.     <option value=\"Merceders\"> Merceders </option>   \n12.     <option value=\"BMW\"> BMW </option>   \n13.     <option value=\"Jaguar\"> Jaguar </option>   \n14.     <option value=\"Lamborghini\"> Lamborghini </option>   \n15.     <option value=\"Ferrari\"> Ferrari </option>   \n16.     <option value=\"Ford\"> Ford </option>   \n17. </select>   \n18. </body>     \n19. </html>     \nOutput: \n \nExample 2: Below example uses the multipleattribute for selecting the multiple options in a \nlist. We can select multiple options from list box by holding the ctrl key. \n1. <!DOCTYPE html>     \n2. <html>     \n3. <title>   \n4. Example of List Box with multiple attribute   \n5. </title>   \n6. <body>     \n7. Customer Name:  <input type=\"text\" Placeholder=\"Enter the Customer Name\"/>", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 993, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "57266b88-d0cb-4663-b42b-a6157f07d5f8": {"__data__": {"id_": "57266b88-d0cb-4663-b42b-a6157f07d5f8", "embedding": null, "metadata": {"page_label": "87", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ec47f889-5b45-4978-aec8-979026432615", "node_type": "4", "metadata": {"page_label": "87", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "a8e2e030ea089917e4988096c1c8a72960850652af5fd789d021a667e9e5fbc2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "87 | P a g e  \n \n8. <br>   \n9. <br>   \n10. <select name=\"Cars\" size=\"5\" multiple=\"multiple\">   \n11.     <option value=\"Merceders\"> Merceders </option>   \n12.     <option value=\"BMW\"> BMW </option>   \n13.     <option value=\"Jaguar\"> Jaguar </option>   \n14.     <option value=\"Lamborghini\"> Lamborghini </option>   \n15.     <option value=\"Ferrari\"> Ferrari </option>   \n16.     <option value=\"Ford\"> Ford </option>   \n17. </select>   \n18. </body>     \n19. </html>     \nOutput: \n \n \nUnix commands list \n \nThis guide has been prepared by me to help myself with the list of frequently used basic \ncommands in UNIX/LINUX to be on my finger tip. Thought of sharing it with the others, in \ncase, it might turn out helpful to other readers as well. This is Unix/Linux basic commands - \n1,for 2nd part follow the link given at the end of this article.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 845, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6c4553a5-ef75-4262-8f23-6f66431ebd31": {"__data__": {"id_": "6c4553a5-ef75-4262-8f23-6f66431ebd31", "embedding": null, "metadata": {"page_label": "88", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9c101772-2e3b-4697-99ff-759843706198", "node_type": "4", "metadata": {"page_label": "88", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "6bfa2591ee42a6b62f5074d17785aab95f06f1ac65939462644b53577a74676e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "88 | P a g e  \n \nWeb servers Shell \nUnix/Linux file commands guide \nThis article will serve as a 5 minute guide or tutorial to learn/revisit basic unix or linux \ncommands frequently used while working with files. Unix/Linux command is given along \nwith their usage or description. \n\uf0b7 ls \u25ba use this command in unix/linux to see all the directory listing. However, any \nhidden files will not be listed. \n\uf0b7 ls -al \u25ba use this command in unix/linux to see formatted directory listing along with \nthe hidden files. \n\uf0b7 ls -lt \u25ba use this command in unix/linux to sort the directory listing by their time of \nmodification. \n\uf0b7 pwd \u25ba use this command in unix/linux to show your current working directory. \n\uf0b7 touch fileName \u25ba use this command in unix/linux to create new file with its name as \nfilename. \n\uf0b7 cd \u25ba use this command in unix/linux to move to home directory. \n\uf0b7 cd dirName \u25ba use this command in unix/linux to change current directory to \ndirName directory. \n\uf0b7 mkdirdirName \u25ba use this command in unix/linux to make or create directory having \nname as dirName. \n\uf0b7 rm fileName \u25ba use this command in unix/linux to remove or delete file having name \nas fileName. \n\uf0b7 rm -r dirName \u25ba use this command in unix/linux to remove or delete directory \ndirName. \n\uf0b7 rm -f filename \u25ba use this command in unix/linux to force remove the file filename. \n\uf0b7 more fileName \u25ba use this command in unix/linux to get the content of file having \nname as filename \n\uf0b7 head fileName \u25ba use this command in unix/linux to get output of first 10 lines of the \nfile fileName. \n\uf0b7 tail fileName \u25ba use this command in unix/linux to get output of last 10 lines of the \nfile filename. \n\uf0b7 cp fileAfileB \u25ba use this command in unix/linux to copy the content of fileA to fileB. \n\uf0b7 cp -r dirAdirB \u25ba use this command in unix/linux to copy directory dirA to directory \ndirB and create dirB if not already created. \n\uf0b7 mv fileAfileB \u25ba use this command in unix/linux to rename or move fileA to fileB. \n\uf0b7 cat >file \u25ba use this command in unix/linux to place standard input into the file. \n \nUnix or Linux process management commands guide \nThis section will serve as a 5 minute guide or tutorial to learn/revisit basic unix or linux \ncommands frequently used while working with process management. Unix/Linux command \nis given along with their usage or description. \n\uf0b7 ps \u25ba use this command in unix/linux to see currently working processes. \n\uf0b7 top \u25ba use this command in unix/linux to display all the running processes.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 2469, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5d2cebac-96f0-4015-80c7-51dcd16a3785": {"__data__": {"id_": "5d2cebac-96f0-4015-80c7-51dcd16a3785", "embedding": null, "metadata": {"page_label": "89", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "17b2bc7b-375c-45e8-ab6e-bdfc8b5eda99", "node_type": "4", "metadata": {"page_label": "89", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "11e623aa92944548ff17235b4409d43cc2b83bdb5671dd119b8d93fd02a4b0b4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "89 | P a g e  \n \n\uf0b7 kill pid \u25ba use this command in unix/linux to kill the process with given pid. \n\uf0b7 killallprocessA \u25ba use this command in unix/linux to kill all the process named as \nprocessA \n\uf0b7 pkill pattern \u25ba use this command in unix/linux to kill all processes matching the \ngiven pattern. \n\uf0b7 bg \u25ba use this command in unix/linux to list all the background jobs. \n\uf0b7 fg \u25ba use this command in unix/linux to bring the most recent job to foreground. \n\uf0b7 fg n1 \u25ba use this command in unix/linux to bring job n1 to the foreground. \n \nUnix/Linux system info commands guide \nThis section will serve as a 5 minute guide or tutorial to learn/revisit basic unix or linux \ncommands frequently used while working with system. Unix/Linux command is given along \nwith their usage or description. \n\uf0b7 cal \u25ba use this command in unix/linux to show current months calendar. \n\uf0b7 date \u25ba use this command in unix/linux to show current date and time. \n\uf0b7 w \u25ba use this command in unix/linux to see who all are currently logged in to the \nsystem. \n\uf0b7 whoami \u25ba use this command in unix/linux to see who you are currently logged in as \nin the system. \n\uf0b7 uname -a \u25ba use this command in unix/linux to see kernel information. \n\uf0b7 finger user \u25ba use this command in unix/linux to display information about user. \n\uf0b7 man command \u25ba use this command in unix/linux to show the manual for command. \n\uf0b7 free \u25ba use this command in unix/linux to show memory and swap usage. \n\uf0b7 df \u25ba use this command in unix/linux to see the disk usage. \n\uf0b7 du \u25ba use this command in unix/linux to see the directory space usage. \n\uf0b7 whereis app \u25ba use this command in unix/linux to show possible location of app. \n\uf0b7 which app \u25ba use this command in unix/linux to show which application will be run \nby default.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1744, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3557de32-a593-493d-ba2f-30b90ccf036e": {"__data__": {"id_": "3557de32-a593-493d-ba2f-30b90ccf036e", "embedding": null, "metadata": {"page_label": "90", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e4c3482a-23dc-4726-aa10-6f879255b476", "node_type": "4", "metadata": {"page_label": "90", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "27def73cb4534a57996b126f6ae4173ac4400872a28f42c67a8062677b402d4c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "90 | P a g e  \n \nVersion control \nGit GitHub Pages \nCreate a New Repository \nStart by signing in to GitHub. GitHub pages need a special name and setup to work, so we \nstart by creating a new repository: \n \nThis repository needs a special name to function as a GitHub page. It needs to be your \nGitHub username, followed by .github.io:", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 338, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "27d7d452-877b-41ae-9f1f-d548a041193d": {"__data__": {"id_": "27d7d452-877b-41ae-9f1f-d548a041193d", "embedding": null, "metadata": {"page_label": "91", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "38f73c67-df23-4371-a305-9e9b205b443c", "node_type": "4", "metadata": {"page_label": "91", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "7374d815b433540a7e4f7aa766b4dd04bfc54bfcfa487f10845b83b22350df7a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "91 | P a g e  \n \nPush Local Repository to GitHub Pages \nWe add this new repository as a remote for our local repository, we are calling it gh-page (for \nGitHub Pages). \nCopy the URL from here: \n \nAnd add it as a new remote: \nExample \ngit remote addgh-page https://github.com/w3schools-test/w3schools-test.github.io.git \nMake sure you are on the masterbranch, then push the masterbranch to the new remote: \nExample \ngit push gh-page master \nEnumerating objects: 33, done. \nCounting objects: 100% (33/33), done. \nDelta compression using up to 16 threads \nCompressing objects: 100% (33/33), done. \nWriting objects: 100% (33/33), 94.79 KiB | 15.80 MiB/s, done. \nTotal 33 (delta 18), reused 0 (delta 0), pack-reused 0 \nremote: Resolving deltas: 100% (18/18), done. \nTo https://github.com/w3schools-test/w3schools-test.github.io.git \n * [new branch]      master -> master \nNote: If this is the first time you are connecting to GitHub, you will get some kind of \nnotification to authenticate this connection. \nCheck that the new repository has received all the files:", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1064, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "36b35c60-ec60-42f8-bae5-70094bd496fc": {"__data__": {"id_": "36b35c60-ec60-42f8-bae5-70094bd496fc", "embedding": null, "metadata": {"page_label": "92", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8db0a2b0-6142-4fc8-96ad-9f87d8ff1bac", "node_type": "4", "metadata": {"page_label": "92", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "73c0fafd6f1db48eca9f9064d3a1fd13bc05810283cb3a35208ac751caf35e89", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "92 | P a g e  \n \nCheck Out Your Own GitHub Page \nThat looks good, now click the Settings menu and navigate to the Pages tab: \n \nThe GitHub page is created, and you can click the URL to view the result! \nGit Tutorial \nLearning by Examples \nIn this tutorial, we will show you Git commands like this: \nExample \ngit --version \ngit version 2.30.2.windows.1 \nFor new users, using the terminal view can seem a bit complicated. Don't worry! We will \nkeep it really simple, and learning this way gives you a good grasp of how Git works. \nIn the code above, you can see commands (input) and output. \nLines like this are commands we input: \nExample \ngit --version \nLines like this are the output/response to our commands: \nExample \ngit version 2.30.2.windows.1", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 753, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2b87197b-a060-49a5-9c1e-e0f175d5b7bc": {"__data__": {"id_": "2b87197b-a060-49a5-9c1e-e0f175d5b7bc", "embedding": null, "metadata": {"page_label": "93", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "56785bdd-3dd4-4f66-882b-926fbfadc611", "node_type": "4", "metadata": {"page_label": "93", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "a2be2b48f3abcbc39d6bf01a445f68dd3fcf3c452db6ed93072c0b0785880878", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "93 | P a g e  \n \nIn general, lines with $ in front of it is input. These are the commands you can copy and run \nin your terminal. \nGit and Remote Repositories \nGit and GitHub are different things. \nIn this tutorial you will understand what Git is and how to use it on the remote repository \nplatforms, like GitHub. \nYou can choose, and change, which platform to focus on by clicking in the menu on the right: \n \nGit Exercises \nTest Yourself With Exercises \nExercise: \nInsert the missing part of the command to check which version of Git (if any) is installed. \ngit \n  \nWhat is Git? \nGit is a popular version control system. It was created by Linus Torvalds in 2005, and has \nbeen maintained by Junio Hamano since then. \nIt is used for: \n\uf0b7 Tracking code changes \n\uf0b7 Tracking who made changes \n\uf0b7 Coding collaboration \nWhat does Git do? \n\uf0b7 Manage projects with Repositories \n\uf0b7 Clone a project to work on a local copy \n\uf0b7 Control and track changes with Staging and Committing \n\uf0b7 Branch and Merge to allow for work on different parts and versions of a project \n\uf0b7 Pull the latest version of the project to a local copy \n\uf0b7 Push local updates to the main project \nWorking with Git \n\uf0b7 Initialize Git on a folder, making it a Repository \n\uf0b7 Git now creates a hidden folder to keep track of changes in that folder", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1303, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b1085350-da18-4c2c-a338-97ff4fda27a7": {"__data__": {"id_": "b1085350-da18-4c2c-a338-97ff4fda27a7", "embedding": null, "metadata": {"page_label": "94", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "91e75d1f-767e-43f4-842e-ff7824053d19", "node_type": "4", "metadata": {"page_label": "94", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "01baa1c0e34dc7d7384fe3a45f81ac87a0c03e3462fad926fed0830686964283", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "94 | P a g e  \n \n\uf0b7 When a file is changed, added or deleted, it is considered modified \n\uf0b7 You select the modified files you want to Stage \n\uf0b7 The Staged files are Committed, which prompts Git to store a permanent snapshot of the \nfiles \n\uf0b7 Git allows you to see the full history of every commit. \n\uf0b7 You can revert back to any previous commit. \n\uf0b7 Git does not store a separate copy of every file in every commit, but keeps track of changes \nmade in each commit! \nWhy Git? \n\uf0b7 Over 70% of developers use Git! \n\uf0b7 Developers can work together from anywhere in the world. \n\uf0b7 Developers can see the full history of the project. \n\uf0b7 Developers can revert to earlier versions of a project. \nWhat is GitHub? \n\uf0b7 Git is not the same as GitHub. \n\uf0b7 GitHub makes tools that use Git. \n\uf0b7 GitHub is the largest host of source code in the world, and has been owned by Microsoft since \n2018. \n\uf0b7 In this tutorial, we will focus on using Git with GitHub. \n \nGit Install \nYou can download Git for free from the following website: https://www.git-scm.com/ \n \nUsing Git with Command Line \nTo start using Git, we are first going to open up our Command shell. \nFor Windows, you can use Git bash, which comes included in Git for Windows. For Mac and \nLinux you can use the built-in terminal. \nThe first thing we need to do, is to check if Git is properly installed: \nExample \ngit --version \ngit version 2.30.2.windows.1 \nIf Git is installed, it should show something like git version X.Y \n \nConfigure Git", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1477, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a6721acb-d7ef-404f-89a9-d3d18c5d520c": {"__data__": {"id_": "a6721acb-d7ef-404f-89a9-d3d18c5d520c", "embedding": null, "metadata": {"page_label": "95", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "41ba24ba-a8b0-440d-9a5b-2236e072b3f3", "node_type": "4", "metadata": {"page_label": "95", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "9868e27d919c0d16f0783fcf30ef7a1c2751a1b2754bf358f119504cf4d8af95", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "95 | P a g e  \n \nNow let Git know who you are. This is important for version control systems, as each Git \ncommit uses this information: \nExample \ngit config --global user.name \"w3schools-test\" \ngit config --global user.email\"test@w3schools.com\" \nChange the user name and e-mail address to your own. You will probably also want to use \nthis when registering to GitHub later on. \nNote: Use global to set the username and e-mail for every repository on your computer. \nIf you want to set the username/e-mail for just the current repo, you can remove global \nCreating Git Folder \nNow, let's create a new folder for our project: \nExample \nmkdirmyproject \ncdmyproject \nmkdirmakes a new directory. \ncdchanges the current working directory. \nNow that we are in the correct directory. We can start by initializing Git! \nNote: If you already have a folder/directory you would like to use for Git: \nNavigate to it in command line, or open it in your file explorer, right-click and select \"Git \nBash here\" \n \nInitialize Git \nOnce you have navigated to the correct folder, you can initialize Git on that folder: \nExample \ngitinit \nInitialized empty Git repository in /Users/user/myproject/.git/ \nYou just created your first Git Repository! \nNote: Git now knows that it should watch the folder you initiated it on. \nGit creates a hidden folder to keep track of changes.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1360, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b805d233-742b-4e45-b29c-931b31c0a995": {"__data__": {"id_": "b805d233-742b-4e45-b29c-931b31c0a995", "embedding": null, "metadata": {"page_label": "96", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b6897aa2-908b-4d5b-8161-fb8ba69b9149", "node_type": "4", "metadata": {"page_label": "96", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "efac2e9b6a17716bd3011755d6c38738f34642dbcdc074be8be5e69636a3d921", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "96 | P a g e  \n \nGit Adding New Files \nYou just created your first local Git repo. But it is empty. \nSo let's add some files, or create a new file using your favourite text editor. Then save or \nmove it to the folder you just created. \nIf you want to learn how to create a new file using a text editor, you can visit our HTML \ntutorial: \nHTML Editors \nFor this example, I am going to use a simple HTML file like this: \nExample \n<!DOCTYPE html> \n<html> \n<head> \n<title>Hello World!</title> \n</head> \n<body> \n \n<h1>Hello world!</h1> \n<p>This is the first file in my new Git Repo.</p> \n \n</body> \n</html> \nAnd save it to our new folder as index.html. \nLet's go back to the terminal and list the files in our current working directory: \nExample \nls \nindex.html \nls will list the files in the directory. We can see that index.html is there. \nThen we check the Git status and see if it is a part of our repo: \nExample \ngit status \nOn branch master \n \nNo commits yet \n \nUntracked files: \n  (use \"git add ...\" to include in what will be committed) \n    index.html \n \nnothing added to commit but untracked files present (use \"git add\" to track)", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1139, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c6a887d0-2d39-4c63-b70b-0111cbc5befb": {"__data__": {"id_": "c6a887d0-2d39-4c63-b70b-0111cbc5befb", "embedding": null, "metadata": {"page_label": "97", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "437a5ac0-36e3-4349-a979-08267b3aeeca", "node_type": "4", "metadata": {"page_label": "97", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "82d3271ed47076faef1bece0744f020c6ca249a16ccddfad60beee486986fdce", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "97 | P a g e  \n \nNow Git is aware of the file, but has not added it to our repository! \nFiles in your Git repository folder can be in one of 2 states: \n\uf0b7 Tracked - files that Git knows about and are added to the repository \n\uf0b7 Untracked - files that are in your working directory, but not added to the repository \n When you first add files to an empty repository, they are all untracked. To get Git to track \nthem, you need to stage them, or add them to the staging environment. \nGit Staging Environment \nOne of the core functions of Git is the concepts of the Staging Environment, and the Commit. \nAs you are working, you may be adding, editing and removing files. But whenever you hit a \nmilestone or finish a part of the work, you should add the files to a Staging Environment. \nStaged files are files that are ready to be committed to the repository you are working on. \nYou will learn more about commit shortly. \nFor now, we are done working with index.html. So we can add it to the Staging Environment: \nExample \ngitadd index.html \nThe file should be Staged. Let's check the status:: \nExample \ngit status \nOn branch master \n \nNo commits yet \n \nChanges to be committed: \n  (use \"git rm --cached ...\" to unstage) \n    new file: index.html \nNow the file has been added to the Staging Environment. \n \nGit Add More than One File \nYou can also stage more than one file at a time. Let's add 2 more files to our working folder. \nUse the text editor again. \nA README.md file that describes the repository (recommended for all repositories):", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1540, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7efd4498-ebe6-43f4-95cd-a7dc1726e32e": {"__data__": {"id_": "7efd4498-ebe6-43f4-95cd-a7dc1726e32e", "embedding": null, "metadata": {"page_label": "98", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e5b83dce-b00d-4752-9fdf-3b7a449dc762", "node_type": "4", "metadata": {"page_label": "98", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "4030bacf43df836dc2ba7c4a27e4c42d813cd3b3dbd41f2adaabd903176ec4d2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "98 | P a g e  \n \nExample \n# hello-world \nHello World repository for Git tutorial \nThis is an example repository for the Git tutoial on https://www.w3schools.com \n \nThis repository is built step by step in the tutorial.  \nA basic external style sheet (bluestyle.css): \nExample \nbody { \nbackground-color: lightblue; \n} \n \nh1 { \ncolor: navy; \nmargin-left: 20px; \n}  \nAnd update index.html to include the stylesheet: \nExample \n<!DOCTYPE html> \n<html> \n<head> \n<title>Hello World!</title> \n<linkrel=\"stylesheet\"href=\"bluestyle.css\"> \n</head> \n<body> \n \n<h1>Hello world!</h1> \n<p>This is the first file in my new Git Repo.</p> \n \n</body> \n</html> \nNow add all files in the current directory to the Staging Environment: \nExample \ngitadd --all \nUsing --all instead of individual filenames will stage all changes (new, modified, and deleted) \nfiles. \nExample \ngit status \nOn branch master \n \nNo commits yet \n \nChanges to be committed:", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 929, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "58caaa64-7f8b-49da-8074-a99fc55e6a93": {"__data__": {"id_": "58caaa64-7f8b-49da-8074-a99fc55e6a93", "embedding": null, "metadata": {"page_label": "99", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "78a495fa-cd26-4dcb-9142-1866d4302537", "node_type": "4", "metadata": {"page_label": "99", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "54496a6274d0b65311c33757315b230496c78d3b46fa2d25fb2b59ad8a975644", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "99 | P a g e  \n \n  (use \"git rm --cached ...\" to unstage) \n        new file:   README.md \n        new file:   bluestyle.css \n        new file:   index.html \nNow all 3 files are added to the Staging Environment, and we are ready to do our first commit. \nGit Commit \nSince we have finished our work, we are ready move from stage to commit for our repo. \nAdding commits keep track of our progress and changes as we work. Git considers each \ncommit change point or \"save point\". It is a point in the project you can go back to if you find \na bug, or want to make a change. \nWhen we commit, we should always include a message. \nBy adding clear messages to each commit, it is easy for yourself (and others) to see what has \nchanged and when. \nExample \ngit commit -m \"First release of Hello World!\" \n[master (root-commit) 221ec6e] First release of Hello World! \n 3 files changed, 26 insertions(+) \n create mode 100644 README.md \n create mode 100644 bluestyle.css \n create mode 100644 index.html \nThe commit command performs a commit, and the -m \"message\" adds a message. \nThe Staging Environment has been committed to our repo, with the message: \n\"First release of Hello World!\" \n \nGit Commit without Stage \nSometimes, when you make small changes, using the staging environment seems like a waste \nof time. It is possible to commit changes directly, skipping the staging environment. The -a \noption will automatically stage every changed, already tracked file. \nLet's add a small update to index.html: \nExample \n<!DOCTYPE html> \n<html> \n<head> \n<title>Hello World!</title> \n<linkrel=\"stylesheet\"href=\"bluestyle.css\"> \n</head> \n<body>", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1630, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4cf94126-87b9-4341-bcf2-85fdc0b95e53": {"__data__": {"id_": "4cf94126-87b9-4341-bcf2-85fdc0b95e53", "embedding": null, "metadata": {"page_label": "100", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5c8cb371-cba2-44f8-b716-f242b3002cfd", "node_type": "4", "metadata": {"page_label": "100", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "24a2820b92509b68b1a2df1a52cec433be64e78c10557955d05ab795b9b8e89b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "100 | P a g e  \n \n \n<h1>Hello world!</h1> \n<p>This is the first file in my new Git Repo.</p> \n<p>A new line in our file!</p> \n \n</body> \n</html> \nAnd check the status of our repository. But this time, we will use the --short option to see the \nchanges in a more compact way: \nExample \ngit status --short \n M index.html \nGit Help \nIf you are having trouble remembering commands or options for commands, you can use Git \nhelp. \nThere are a couple of different ways you can use the help command in command line: \n\uf0b7 git command -help-  See all the available options for the specific command \n\uf0b7 git help --all-  See all possible commands \n Let's go over the different commands. \n \nGit -help See Options for a Specific Command \nAny time you need some help remembering the specific option for a command, you can use \ngit command -help: \nExample \ngit commit -help \nusage: git commit [] [--] ... \n \n    -q, --quiet           suppress summary after successful commit \n    -v, --verbose         show diff in commit message template \n \nCommit message options \n    -F, --file      read message from file \n    --author      override author for commit \n    --date          override date for commit \n    -m, --message  \n                          commit message \n    -c, --reedit-message  \n                          reuse and edit message from specified commit \n    -C, --reuse-message  \n                          reuse message from specified commit \n    --fixup       use autosquash formatted message to fixup specified commit", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1514, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "64351fbf-ed26-45c7-9922-72962d5db87c": {"__data__": {"id_": "64351fbf-ed26-45c7-9922-72962d5db87c", "embedding": null, "metadata": {"page_label": "101", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "49f5f0a5-a4c8-4c29-adf7-ecfbdbc03972", "node_type": "4", "metadata": {"page_label": "101", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "edb5e7a6bb2c9f4065ba282311588d22628c9c91d7cb05610ee2dc2268dc97f0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "101 | P a g e  \n \n    --squash      use autosquash formatted message to squash specified commit \n    --reset-author        the commit is authored by me now (used with -C/-c/--amend) \n    -s, --signoff         add a Signed-off-by trailer \n    -t, --template  \n                          use specified template file \n    -e, --edit            force edit of commit \n    --cleanup       how to strip spaces and #comments from message \n    --status              include status in commit message template \n    -S, --gpg-sign[=] \n                          GPG sign commit \n \nCommit contents options \n    -a, --all             commit all changed files \n    -i, --include         add specified files to index for commit \n    --interactive         interactively add files \n    -p, --patch           interactively add changes \n    -o, --only            commit only specified files \n    -n, --no-verify       bypass pre-commit and commit-msg hooks \n    --dry-run             show what would be committed \n    --short               show status concisely \n    --branch              show branch information \n    --ahead-behind        compute full ahead/behind values \n    --porcelain           machine-readable output \n    --long                show status in long format (default) \n    -z, --null            terminate entries with NUL \n    --amend               amend previous commit \n    --no-post-rewrite     bypass post-rewrite hook \n    -u, --untracked-files[=] \n                          show untracked files, optional modes: all, normal, no. (Default: all) \n    --pathspec-from-file  \n                          read pathspec from file \n    --pathspec-file-nul   with --pathspec-from-file, pathspec elements are separated with NUL character \nNote: You can also use --help instead of -help to open the relevant Git manual page \n \n \nGit help --all See All Possible Commands \nTo list all possible commands, use the help --all command: \nWarning: This will display a very long list of commands \nExample \n$ githelp --all \nSee 'git help ' to read about a specific subcommand \n \nMain Porcelain Commands \n   add                  Add file contents to the index \n   am                   Apply a series of patches from a mailbox \n   archive              Create an archive of files from a named tree \n   bisect               Use binary search to find the commit that introduced a bug \n   branch               List, create, or delete branches \n   bundle               Move objects and refs by archive \n   checkout             Switch branches or restore working tree files", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 2551, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b8cc7f4b-3413-4680-8948-373a70f6221f": {"__data__": {"id_": "b8cc7f4b-3413-4680-8948-373a70f6221f", "embedding": null, "metadata": {"page_label": "102", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d5b24b23-5036-48dc-8708-24e12d404eed", "node_type": "4", "metadata": {"page_label": "102", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "abbace5092f7a6aa61c19176284fe3e14a2818e8254473fea949a97625a501e5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "102 | P a g e  \n \n   cherry-pick          Apply the changes introduced by some existing commits \ncitool               Graphical alternative to git-commit \n   clean                Remove untracked files from the working tree \n   clone                Clone a repository into a new directory \n   commit               Record changes to the repository \n   describe             Give an object a human readable name based on an available ref \n   diff                 Show changes between commits, commit and working tree, etc \n   fetch                Download objects and refs from another repository \n   format-patch         Prepare patches for e-mail submission \ngcCleanup unnecessary files and optimize the local repository \ngitk                 The Git repository browser \n   grep                 Print lines matching a pattern \ngui                  A portable graphical interface to Git \ninit                 Create an empty Git repository or reinitialize an existing one \n   log                  Show commit logs \n   maintenance          Run tasks to optimize Git repository data \n   merge                Join two or more development histories together \n   mv                   Move or rename a file, a directory, or a symlink \n   notes                Add or inspect object notes \n   pull                 Fetch from and integrate with another repository or a local branch \n   push                 Update remote refs along with associated objects \n   range-diff           Compare two commit ranges (e.g. two versions of a branch) \n   rebase               Reapply commits on top of another base tip \n   reset                Reset current HEAD to the specified state \n   restore              Restore working tree files \n   revert               Revert some existing commits \n   rm                   Remove files from the working tree and from the index \nshortlog             Summarize 'git log' output \n   show                 Show various types of objects \n   sparse-checkout      Initialize and modify the sparse-checkout \n   stash                Stash the changes in a dirty working directory away \n   status               Show the working tree status \n   submodule            Initialize, update or inspect submodules \n   switch               Switch branches \n   tag                  Create, list, delete or verify a tag object signed with GPG \nworktree             Manage multiple working trees \n \nAncillary Commands / Manipulators \n   config               Get and set repository or global options \n   fast-export          Git data exporter \n   fast-import          Backend for fast Git data importers \n   filter-branch        Rewrite branches \nmergetool            Run merge conflict resolution tools to resolve merge conflicts \n   pack-refs            Pack heads and tags for efficient repository access \n   prune                Prune all unreachable objects from the object database \nreflog               Manage reflog information \n   remote               Manage set of tracked repositories \n   repack               Pack unpacked objects in a repository \n   replace              Create, list, delete refs to replace objects \n \nAncillary Commands / Interrogators \n   annotate             Annotate file lines with commit information \n   blame                Show what revision and author last modified each line of a file \nbugreport            Collect information for user to file a bug report \n   count-objects        Count unpacked number of objects and their disk consumption \ndifftool             Show changes using common diff tools \nfsck                 Verifies the connectivity and validity of the objects in the database \ngitweb               Git web interface (web frontend to Git repositories) \n   help                 Display help information about Git \ninstaweb             Instantly browse your working repository in gitweb", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 3841, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "32d61e79-d245-4eca-9257-22e578654686": {"__data__": {"id_": "32d61e79-d245-4eca-9257-22e578654686", "embedding": null, "metadata": {"page_label": "103", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c2ac627f-466e-4556-8114-60ae785693cb", "node_type": "4", "metadata": {"page_label": "103", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "21378ffa1ba5a49fa941e4afacb1dfe3d2a1b089b102bb94bf75326d15570849", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "103 | P a g e  \n \n   merge-tree           Show three-way merge without touching index \nrerere               Reuse recorded resolution of conflicted merges \n   show-branch          Show branches and their commits \n   verify-commit        Check the GPG signature of commits \n   verify-tag           Check the GPG signature of tags \nwhatchanged          Show logs with difference each commit introduces \n \nInteracting with Others \narchimport           Import a GNU Arch repository into Git \ncvsexportcommit      Export a single commit to a CVS checkout \ncvsimport            Salvage your data out of another SCM people love to hate \ncvsserver            A CVS server emulator for Git \nimap-send            Send a collection of patches from stdin to an IMAP folder \n   p4                   Import from and submit to Perforce repositories \nquiltimport          Applies a quilt patchset onto the current branch \n   request-pull         Generates a summary of pending changes \n   send-email           Send a collection of patches as emails \nsvn                  Bidirectional operation between a Subversion repository and Git \n \nLow-level Commands / Manipulators \n   apply                Apply a patch to files and/or to the index \n   checkout-index       Copy files from the index to the working tree \n   commit-graph         Write and verify Git commit-graph files \n   commit-tree          Create a new commit object \n   hash-object          Compute object ID and optionally creates a blob from a file \n   index-pack           Build pack index file for an existing packed archive \n   merge-file           Run a three-way file merge \n   merge-index          Run a merge for files needing merging \nmktag                Creates a tag object \nmktree               Build a tree-object from ls-tree formatted text \n   multi-pack-index     Write and verify multi-pack-indexes \n   pack-objects         Create a packed archive of objects \n   prune-packed         Remove extra objects that are already in pack files \n   read-tree            Reads tree information into the index \n   symbolic-ref         Read, modify and delete symbolic refs \n   unpack-objects       Unpack objects from a packed archive \n   update-index         Register file contents in the working tree to the index \n   update-ref           Update the object name stored in a ref safely \n   write-tree           Create a tree object from the current index \n \nLow-level Commands / Interrogators \n   cat-file             Provide content or type and size information for repository objects \n   cherry               Find commits yet to be applied to upstream \n   diff-files           Compares files in the working tree and the index \n   diff-index           Compare a tree to the working tree or index \n   diff-tree            Compares the content and mode of blobs found via two tree objects \n   for-each-ref         Output information on each ref \n   for-each-repo        Run a Git command on a list of repositories \n   get-tar-commit-id    Extract commit ID from an archive created using git-archive \n   ls-files             Show information about files in the index and the working tree \n   ls-remote            List references in a remote repository \n   ls-tree              List the contents of a tree object \n   merge-base           Find as good common ancestors as possible for a merge \n   name-rev             Find symbolic names for given revs \n   pack-redundant       Find redundant pack files \n   rev-list             Lists commit objects in reverse chronological order \n   rev-parse            Pick out and massage parameters \n   show-index           Show packed archive index \n   show-ref             List references in a local repository \n   unpack-file          Creates a temporary file with a blob's contents", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 3779, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b2e9a988-acf6-40cc-82c2-b8e7657e166b": {"__data__": {"id_": "b2e9a988-acf6-40cc-82c2-b8e7657e166b", "embedding": null, "metadata": {"page_label": "104", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7a1ad0aa-c9ad-47da-b323-8efab5f9f343", "node_type": "4", "metadata": {"page_label": "104", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "3e82ccd75871f1598c9fcd17a36d04a23ea27be4f4571822f9c636ae425eaf77", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "104 | P a g e  \n \n   var                  Show a Git logical variable \n   verify-pack          Validate packed Git archive files \n \nLow-level Commands / Syncing Repositories \n   daemon               A really simple server for Git repositories \n   fetch-pack           Receive missing objects from another repository \n   http-backend         Server side implementation of Git over HTTP \n   send-pack            Push objects over Git protocol to another repository \n   update-server-info   Update auxiliary info file to help dumb servers \n \nLow-level Commands / Internal Helpers \n   check-attr           Display gitattributes information \n   check-ignore         Debug gitignore / exclude files \n   check-mailmap        Show canonical names and email addresses of contacts \n   check-ref-format     Ensures that a reference name is well formed \n   column               Display data in columns \n   credential           Retrieve and store user credentials \n   credential-cache     Helper to temporarily store passwords in memory \n   credential-store     Helper to store credentials on disk \nfmt-merge-msg        Produce a merge commit message \n   interpret-trailers   Add or parse structured information in commit messages \nmailinfo             Extracts patch and authorship from a single e-mail message \nmailsplit            Simple UNIX mbox splitter program \n   merge-one-file       The standard helper program to use with git-merge-index \n   patch-id             Compute unique ID for a patch \n   sh-i18n              Git's i18n setup code for shell scripts \nsh-setup             Common Git shell script setup code \nstripspace           Remove unnecessary whitespace \n \nExternal commands \naskyesno \n   credential-helper-selector \n   flow \nlfs \nNote: If you find yourself stuck in the list view, SHIFT + G to jump the end of the list, then q \nto exit the view. \nGit GitHub Getting Started \nEdit Code in GitHub \nIn addition to being a host for Git content, GitHub has a very good code editor. \nLet's try to edit the README.md file in GitHub. Just click the edit button:", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 2069, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ad6d1ac9-f639-408c-ad1e-e5341cacecfb": {"__data__": {"id_": "ad6d1ac9-f639-408c-ad1e-e5341cacecfb", "embedding": null, "metadata": {"page_label": "105", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "30038fa0-084f-4a4a-bee2-b666edc9e4ab", "node_type": "4", "metadata": {"page_label": "105", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "582077f4df96a089450a47af04cc1cc52312815d3caf47c2a01a4f24c33fe3a4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "105 | P a g e  \n \n \nAdd some changes to the code, and then commit the changes. For now, we will \"Commit \ndirectly to the master branch\". \nRemember to add a description for the commit: \n \nThat is how you edit code directly in GitHub!", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 236, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "09254a6a-9eff-459b-9f00-8e4f8346c3bf": {"__data__": {"id_": "09254a6a-9eff-459b-9f00-8e4f8346c3bf", "embedding": null, "metadata": {"page_label": "106", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "de833d5e-a605-4832-815c-cd6abca04310", "node_type": "4", "metadata": {"page_label": "106", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "9724b751e78994eaa45e647d6410f3c9fb2d478eae783f93969a5a9d6d0a72bb", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "106 | P a g e  \n \n \nPulling to Keep up-to-date with Changes \nWhen working as a team on a project, it is important that everyone stays up to date. \nAny time you start working on a project, you should get the most recent changes to your local \ncopy. \nWith Git, you can do that with pull. \npull is a combination of 2 different commands: \n\uf0b7 fetch \n\uf0b7 merge \nLet's take a closer look into how fetch, merge, and pull works. \n \nGit Fetch \nfetch gets all the change history of a tracked branch/repo. \nSo, on your local Git, fetch updates to see what has changed on GitHub: \nExample \ngit fetch origin \nremote: Enumerating objects: 5, done. \nremote: Counting objects: 100% (5/5), done. \nremote: Compressing objects: 100% (3/3), done. \nremote: Total 3 (delta 2), reused 0 (delta 0), pack-reused 0 \nUnpacking objects: 100% (3/3), 733 bytes | 3.00 KiB/s, done. \nFrom https://github.com/w3schools-test/hello-world \n   e0b6038..d29d69f  master     -> origin/master \nNow that we have the recent changes, we can check our status: \nExample \ngit status \nOn branch master \nYour branch is behind 'origin/master' by 1 commit, and can be fast-forwarded. \n  (use \"git pull\" to update your local branch) \n \nnothing to commit, working tree clean \nWe are behind the origin/master by 1 commit. That should be the updated README.md, but lets \ndouble check by viewing the log: \nExample \ngit log origin/master \ncommit d29d69ffe2ee9e6df6fa0d313bb0592b50f3b853 (origin/master)", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1446, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f6d7e3ab-b1d8-4e5f-a90a-c246048d9d55": {"__data__": {"id_": "f6d7e3ab-b1d8-4e5f-a90a-c246048d9d55", "embedding": null, "metadata": {"page_label": "107", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "35d95470-567f-4933-a765-f45d419d2568", "node_type": "4", "metadata": {"page_label": "107", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "bc9da0d7316cf0f90cf8beec8d4cdebf7a679c3a289bc938693bbef7a08cf169", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "107 | P a g e  \n \nAuthor: w3schools-test <77673807+w3schools-test@users.noreply.github.com> \nDate:   Fri Mar 26 14:59:14 2021 +0100 \n \n    Updated README.md with a line about GitHub \n \ncommit e0b6038b1345e50aca8885d8fd322fc0e5765c3b (HEAD -> master) \nMerge: dfa79db 1f1584e \nAuthor: w3schools-test  \nDate:   Fri Mar 26 12:42:56 2021 +0100 \n \n    merged with hello-world-images after fixing conflicts \n \n... \n... \nThat looks as expected, but we can also verify by showing the differences between our local \nmaster and origin/master: \nExample \ngitdiff origin/master \ndiff --git a/README.md b/README.md \nindex 23a0122..a980c39 100644 \n--- a/README.md \n+++ b/README.md \n@@ -2,6 +2,4 @@ \n Hello World repository for Git tutorial \n This is an example repository for the Git tutoial on https://www.w3schools.com \n \n-This repository is built step by step in the tutorial. \n- \n-It now includes steps for GitHub \n+This repository is built step by step in the tutorial. \n\\ No newline at end of file \nThat looks precisely as expected! Now we can safely merge. \n \n \nGit Merge \nmerge combines the current branch, with a specified branch. \nWe have confirmed that the updates are as expected, and we can merge our current branch \n(master) with origin/master: \nExample \ngit merge origin/master \nUpdating e0b6038..d29d69f \nFast-forward \n README.md | 4 +++- \n 1 file changed, 3 insertions(+), 1 deletion(-) \nCheck our status again to confirm we are up to date:", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1445, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f0794ed5-af0b-48ac-bad3-7ac928042e0c": {"__data__": {"id_": "f0794ed5-af0b-48ac-bad3-7ac928042e0c", "embedding": null, "metadata": {"page_label": "108", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6fa3c1af-f6e0-4f82-84b3-fdd30a795c3e", "node_type": "4", "metadata": {"page_label": "108", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "5feb15fe9e25b3f41f0f450f96e1b259b86d0da99b70ef1862a294291e44b3f1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "108 | P a g e  \n \nExample \ngit status \nOn branch master \nYour branch is up to date with 'origin/master'. \n \nnothing to commit, working tree clean \nThere! Your local git is up to date! \n \nGit Pull \nBut what if you just want to update your local repository, without going through all those \nsteps? \npull is a combination of fetch and merge. It is used to pull all changes from a remote repository \ninto the branch you are working on. \nMake another change to the Readme.md file on GitHub. \n \nUse pull to update our local Git: \nExample \ngit pull origin \nremote: Enumerating objects: 5, done. \nremote: Counting objects: 100% (5/5), done. \nremote: Compressing objects: 100% (3/3), done. \nremote: Total 3 (delta 1), reused 0 (delta 0), pack-reused 0 \nUnpacking objects: 100% (3/3), 794 bytes | 1024 bytes/s, done. \nFrom https://github.com/w3schools-test/hello-world \n   a7cdd4b..ab6b4ed  master       -> origin/master \nUpdating a7cdd4b..ab6b4ed \nFast-forward", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 955, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3f08b7fa-8145-412c-b2d4-262a7275985a": {"__data__": {"id_": "3f08b7fa-8145-412c-b2d4-262a7275985a", "embedding": null, "metadata": {"page_label": "109", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3742b12a-3339-40c8-bcc5-c748f4fa9fc1", "node_type": "4", "metadata": {"page_label": "109", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "a33acb0f6fce4a2ba38166d2ebbfccf4e4a300c588655f8275723f7cc65e2949", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "109 | P a g e  \n \n README.md | 2 ++ \n 1 file changed, 2 insertions(+) \nThat is how you keep your local Git up to date from a remote repository. In the next chapter, \nwe will look closer at how push works on GitHub. \nGit Push to GitHub \nPush Changes to GitHub \nLet's try making some changes to our local git and pushing them to GitHub. \nExample \n<!DOCTYPE html> \n<html> \n<head> \n<title>Hello World!</title> \n<link rel=\"stylesheet\" href=\"bluestyle.css\"> \n</head> \n<body> \n \n<h1>Hello world!</h1> \n<div><imgsrc=\"img_hello_world.jpg\" alt=\"Hello World from Space\" style=\"width:100%;max-\nwidth:640px\"></div> \n<p>This is the first file in my new Git Repo.</p> \n<p>This line is here to show how merging works.</p> \n<div><imgsrc=\"img_hello_git.jpg\" alt=\"Hello Git\" style=\"width:100%;max-width:640px\"></div> \n \n</body> \n</html> \nCommit the changes: \nExample \ngit commit -a -m \"Updated index.html. Resized image\" \n[master e7de78f] Updated index.html. Resized image \n 1 file changed, 1 insertion(+), 1 deletion(-) \nAnd check the status: \nExample \ngit status \nOn branch master \nYour branch is ahead of 'origin/master' by 1 commit. \n  (use \"git push\" to publish your local commits) \n \nnothing to commit, working tree clean \nNow push our changes to our remote origin:", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1256, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e35755c3-b2bb-4a7b-a6f2-03996d4e1e55": {"__data__": {"id_": "e35755c3-b2bb-4a7b-a6f2-03996d4e1e55", "embedding": null, "metadata": {"page_label": "110", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c0d228df-a7c1-4927-85d4-8cd6b473b8f7", "node_type": "4", "metadata": {"page_label": "110", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "005d1d538069439d2e9d3a1d45b69a693d4503f60259ff113b451eed114b1077", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "110 | P a g e  \n \nExample \ngit push origin \nEnumerating objects: 9, done. \nCounting objects: 100% (8/8), done. \nDelta compression using up to 16 threads \nCompressing objects: 100% (5/5), done. \nWriting objects: 100% (5/5), 578 bytes | 578.00 KiB/s, done. \nTotal 5 (delta 3), reused 0 (delta 0), pack-reused 0 \nremote: Resolving deltas: 100% (3/3), completed with 3 local objects. \nTo https://github.com/w3schools-test/hello-world.git \n5a04b6f..facaeae  master -> master \nGo to GitHub, and confirm that the repository has a new commit: \n \nNow, we are going to start working on branches on GitHub. \nGit GitHub Branch \nCreate a New Branch on GitHub \nOn GitHub, access your repository and click the \"master\" branch button. \nThere you can create a new Branch. Type in a descriptive name, and click Create branch:", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 811, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "40be5682-9391-430f-92b9-7d261d8bc3bd": {"__data__": {"id_": "40be5682-9391-430f-92b9-7d261d8bc3bd", "embedding": null, "metadata": {"page_label": "111", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ff979349-e5f6-46e6-9a87-7ceff6bba0e2", "node_type": "4", "metadata": {"page_label": "111", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "fe9a98f2157117db50a1b57dbff4689ab0c3b4d9521b591efbd0c57231d5b7fb", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "111 | P a g e  \n \n \nThe branch should now be created and active. You can confirm which branch you are working \non by looking at the branch button. See that it now says \"html-skeleton\" instead of \"main\"? \n \nStart working on an existing file in this branch. Click the \"index.html\" file and start editing:", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 306, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0a462aa8-8c95-4a2b-981b-a4f127db29b0": {"__data__": {"id_": "0a462aa8-8c95-4a2b-981b-a4f127db29b0", "embedding": null, "metadata": {"page_label": "112", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "334a6b8a-f16c-4c8c-9a00-cd1c1f3ee03f", "node_type": "4", "metadata": {"page_label": "112", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "fbf71c53cc333133d5d19210ecc65b42e51f871f8d031868e528bef6b71abd43", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "112 | P a g e  \n \n \nAfter you have finished editing the file, you can click the \"Preview changes\" tab to see the \nchanges you made highlighted: \n \nIf you are happy with the change, add a comment that explains what you did, and click \nCommit changes.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 253, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e281477d-6ca4-4e86-8868-75be31475cc8": {"__data__": {"id_": "e281477d-6ca4-4e86-8868-75be31475cc8", "embedding": null, "metadata": {"page_label": "113", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c89d5054-5b3a-4ec2-a92b-14c76d1b9615", "node_type": "4", "metadata": {"page_label": "113", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "8811d757e328ffedeb0aa90631dd2fbfc7be1693905a7dded9284ba578f6e19d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "113 | P a g e  \n \nGit Pull Branch from GitHub \nPulling a Branch from GitHub \nNow continue working on our new branch in our local Git. \nLetspull from our GitHub repository again so that our code is up-to-date: \nExample \ngitpull \nremote: Enumerating objects: 5, done. \nremote: Counting objects: 100% (5/5), done. \nremote: Compressing objects: 100% (3/3), done. \nremote: Total 3 (delta 2), reused 0 (delta 0), pack-reused 0 \nUnpacking objects: 100% (3/3), 851 bytes | 9.00 KiB/s, done. \nFrom https://github.com/w3schools-test/hello-world \n * [new branch]      html-skeleton -> origin/html-skeleton \nAlready up to date. \nNow our main branch is up todate. And we can see that there is a new branch available on \nGitHub. \nDo a quick status check: \nExample \ngit status \nOn branch master \nYour branch is up to date with 'origin/master'. \n \nnothing to commit, working tree clean \nAnd confirm which branches we have, and where we are working at the moment: \nExample \ngit branch \n* master \nSo, we do not have the new branch on our local Git. But we know it is available on GitHub. So \nwe can use the -a option to see all local and remote branches: \nExample \ngit branch -a \n* master \n  remotes/origin/html-skeleton \n  remotes/origin/master \nNote:branch -r is for remote branches only. \nWe see that the branch html-skeleton is available remotely, but not on our local git. Lets check \nit out:", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1383, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "03d6bb87-eb12-4b3b-b5b0-fb98d0f64674": {"__data__": {"id_": "03d6bb87-eb12-4b3b-b5b0-fb98d0f64674", "embedding": null, "metadata": {"page_label": "114", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "14b373c4-3720-469a-8224-99899644d57d", "node_type": "4", "metadata": {"page_label": "114", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "0ee53147fd11e76c81b3983108c1bed1adfe8d226883f40db15f0ddb7695d9e3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "114 | P a g e  \n \nExample \ngit checkout html-skeleton \nSwitched to a new branch 'html-skeleton' \nBranch 'html-skeleton' set up to track remote branch 'html-skeleton' from 'origin'. \nAnd check if it is all up to date: \nExample \ngitpull \nAlready up to date. \nWhich branches do we have now, and where are we working from? \nExample \ngit branch \n* html-skeleton \n  master \nNow, open your favourite editor and confirm that the changes from the GitHub branch \ncarried over. \nThat is how you pull a GitHub branch to your local Git. \n \nGit Push Branch to GitHub \nPush a Branch to GitHub \nLet's try to create a new local branch, and push that to GitHub. \nStart by creating a branch, like we did earlier: \nExample \ngit checkout -b update-readme \nSwitched to a new branch 'update-readme' \nAnd we make some changes to the README.md file. Just add a new line. \nSo now we check the status of the current branch. \nExample \ngit status \nOn branch update-readme \nChanges not staged for commit: \n  (use \"git add ...\" to update what will be committed) \n  (use \"git restore ...\" to discard changes in working directory) \n        modified:   README.md \n \nno changes added to commit (use \"git add\" and/or \"git commit -a\")", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1201, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "125f5689-0c86-4245-a5f7-f752ebcb6367": {"__data__": {"id_": "125f5689-0c86-4245-a5f7-f752ebcb6367", "embedding": null, "metadata": {"page_label": "115", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e7794e76-fbf7-424a-bf08-d9dd3590a621", "node_type": "4", "metadata": {"page_label": "115", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "568bb851179d10d3eda79d79f231a7cf9139b0ad3d80a350bf39dc2c7c9a80bc", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "115 | P a g e  \n \nWe see that README.md is modified but not added to the Staging Environment: \nExample \ngitadd README.md \nCheck the status of the branch: \nExample \ngit status \nOn branch update-readme \nChanges to be committed: \n  (use \"git restore --staged ...\" to unstage) \n        modified:   README.md \nWe are happy with our changes. So we will commit them to the branch: \nExample \ngit commit -m \"Updated readme for GitHub Branches\" \n[update-readme 836e5bf] Updated readme for GitHub Branches \n 1 file changed, 1 insertion(+) \nNow push the branch from our local Git repository, to GitHub, where everyone can see the \nchanges: \nExample \ngit push origin update-readme \nEnumerating objects: 5, done. \nCounting objects: 100% (5/5), done. \nDelta compression using up to 16 threads \nCompressing objects: 100% (3/3), done. \nWriting objects: 100% (3/3), 366 bytes | 366.00 KiB/s, done. \nTotal 3 (delta 2), reused 0 (delta 0), pack-reused 0 \nremote: Resolving deltas: 100% (2/2), completed with 2 local objects. \nremote: \nremote: Create a pull request for 'update-readme' on GitHub by visiting: \nremote:      https://github.com/w3schools-test/hello-world/pull/new/update-readme \nremote: \nTo https://github.com/w3schools-test/hello-world.git \n * [new branch]      update-readme -> update-readme \nGo to GitHub, and confirm that the repository has a new branch:", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1355, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ab3fea51-5fba-48f0-a77c-36937da5e394": {"__data__": {"id_": "ab3fea51-5fba-48f0-a77c-36937da5e394", "embedding": null, "metadata": {"page_label": "116", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1cc23a70-4b43-4212-a375-bbfc5a4e9426", "node_type": "4", "metadata": {"page_label": "116", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "ce70299dea94182a011e99844c367ffc154bf3168403616d82e21ff36482e38d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "116 | P a g e  \n \n \nIn GitHub, we can now see the changes and merge them into the master branch if we approve \nit. \nIf you click the \"Compare & pull request\", you can go through the changes made and new \nfiles added:", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 220, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "90f5a906-388f-4465-80b3-d00d9e699988": {"__data__": {"id_": "90f5a906-388f-4465-80b3-d00d9e699988", "embedding": null, "metadata": {"page_label": "117", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5633fc5d-f40a-4de7-8335-8c03078c8daf", "node_type": "4", "metadata": {"page_label": "117", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "6ce6fee95a476204c151f69f52aeca34edbdf4d7cb83e31981160f3da088fa76", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "117 | P a g e  \n \n \nNote: This comparison shows both the changes from update-readme and html-skeleton because \nwe created the new branch FROM html-skeleton. \nIf the changes look good, you can go forward, creating a pull request:", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 232, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b1821d00-0624-452e-9289-ce4ee5263d8b": {"__data__": {"id_": "b1821d00-0624-452e-9289-ce4ee5263d8b", "embedding": null, "metadata": {"page_label": "118", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3765e01b-6a4f-4513-aad2-71609f8da0fa", "node_type": "4", "metadata": {"page_label": "118", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "80901a2920f0c67a3d29dcb945e4b185ea11ef38672413001cfe5401390654cf", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "118 | P a g e  \n \n \nA pull request is how you propose changes. You can ask some to review your changes or pull \nyour contribution and merge it into their branch. \nSince this is your own repository, you can  merge your pull request yourself:", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 244, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fae4ac76-5aa2-4210-b136-35add9ea7596": {"__data__": {"id_": "fae4ac76-5aa2-4210-b136-35add9ea7596", "embedding": null, "metadata": {"page_label": "119", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b15da2c2-30cb-4527-98be-6d88db0b4395", "node_type": "4", "metadata": {"page_label": "119", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "699b48adab3e1dae3cd27c0b8a9fb15851c55d277e41f15392ac478f72eb5f8e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "119 | P a g e  \n \n \nThe pull request will record the changes, which means you can go through them later to \nfigure out the changes made. \nThe result should be something like this:", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 183, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e282425f-88b9-49de-bc32-73891754d0be": {"__data__": {"id_": "e282425f-88b9-49de-bc32-73891754d0be", "embedding": null, "metadata": {"page_label": "120", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "835d4b08-2460-4c21-a2d0-c22f9654cb2b", "node_type": "4", "metadata": {"page_label": "120", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "6b6613543b94c34bd7ebd7be05b8af598155bfeee451929e686f1a16b4748b9a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "120 | P a g e  \n \n \nTo keep the repo from getting overly complicated, you can delete the now unused branch by \nclicking \"Delete branch\". \n \nAn after you confirm that the changes from the previous branch were included, delete that as \nwell:", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 243, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b5e6ed49-d45c-4706-86d2-dcf015dcbf98": {"__data__": {"id_": "b5e6ed49-d45c-4706-86d2-dcf015dcbf98", "embedding": null, "metadata": {"page_label": "121", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9da4e4a5-027d-4fe3-9c0a-bac394f15ba6", "node_type": "4", "metadata": {"page_label": "121", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "56d9576a3dfc7808c3d46b0c1727f6309010bc2e3bb280b256d67d7b1a136bfd", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "121 | P a g e  \n \n \n \nCSS Tutorial \nCSS tutorial or CSS 3 tutorial provides basic and advanced concepts of CSS technology. \nOur CSS tutorial is developed for beginners and professionals. The major points of CSS are \ngiven below: \n\uf0b7 CSS stands for Cascading Style Sheet. \n\uf0b7 CSS is used to design HTML tags. \n\uf0b7 CSS is a widely used language on the web. \n\uf0b7 HTML, CSS and JavaScript are used for web designing. It helps the web designers to \napply style on HTML tags. \nCSS Example with CSS Editor \nIn this tutorial, you will get a lot of CSS examples, you can edit and run these examples with \nour online CSS editor tool. \n1. <!DOCTYPE>   \n2. <html>   \n3. <head>   \n4. <style>   \n5. h1{   \n6. color:white;   \n7. background-color:red;   \n8. padding:5px;   \n9. }   \n10. p{   \n11. color:blue;   \n12. }   \n13. </style>   \n14. </head>", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 829, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "10a9bebc-b877-4f0f-83ae-8e82b4962c5e": {"__data__": {"id_": "10a9bebc-b877-4f0f-83ae-8e82b4962c5e", "embedding": null, "metadata": {"page_label": "122", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b2dd5101-bb56-4a5f-846d-7aa2719d03d6", "node_type": "4", "metadata": {"page_label": "122", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "cb718d51b92362707153fab5570c299be93defc2d9f677bd606618fba6bdd9c7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "122 | P a g e  \n \n15. <body>   \n16. <h1>Write Your First CSS Example</h1>   \n17. <p>This is Paragraph.</p>   \n18. </body>   \n19. </html>   \nTest it Now \nOutput: \nWrite Your First CSS Example \nThis is Paragraph. \nWhat is CSS \nCSS stands for Cascading Style Sheets. It is a style sheet language which is used to describe \nthe look and formatting of a document written in markup language. It provides an additional \nfeature to HTML. It is generally used with HTML to change the style of web pages and user \ninterfaces. It can also be used with any kind of XML documents including plain XML, SVG \nand XUL.  \nCSS is used along with HTML and JavaScript in most websites to create user interfaces for \nweb applications and user interfaces for many mobile applications. \n \nWhat does CSS do \n\uf0b7 You can add new looks to your old HTML documents.  \n\uf0b7 You can completely change the look of your website with only a few changes in CSS \ncode. \n \nWhy use CSS \nThese are the three major benefits of CSS: \n1) Solves a big problem \nBefore CSS, tags like font, color, background style, element alignments, border and size had \nto be repeated on every web page. This was a very long process. For example: If you are \ndeveloping a large website where fonts and color information are added on every single page, \nit will be become a long and expensive process. CSS was created to solve this problem. It \nwas a W3C recommendation.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1410, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8a757988-bf03-424a-82f2-575749a37891": {"__data__": {"id_": "8a757988-bf03-424a-82f2-575749a37891", "embedding": null, "metadata": {"page_label": "123", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "326f55a3-634a-4a47-bab1-ac95742d3e7e", "node_type": "4", "metadata": {"page_label": "123", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "0360b9163b4bbcfb2d8fcb3072033a41edddfe4fa0841e77a4868478d8c44125", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "123 | P a g e  \n \n2) Saves a lot of time \nCSS style definitions are saved in external CSS files so it is possible to change the entire \nwebsite by changing just one file.  \n3) Provide more attributes \nCSS provides more detailed attributes than plain HTML to define the look and feel of the \nwebsite.  \nCSS Syntax \nA CSS rule set contains a selector and a declaration block.  \n \nSelector: Selector indicates the HTML element you want to style. It could be any tag like \n<h1>, <title> etc. \nDeclaration Block: The declaration block can contain one or more declarations separated by \na semicolon. For the above example, there are two declarations: \n1. color: yellow; \n2. font-size: 11 px; \nEach declaration contains a property name and value, separated by a colon.  \nProperty: A Property is a type of attribute of HTML element. It could be color, border etc.  \nValue: Values are assigned to CSS properties. In the above example, value \"yellow\" is \nassigned to color property.  \nSelector{Property1: value1; Property2: val\nue2; ..........;}  CSS Selector \nCSS selectors are used to select the content you want to style. Selectors are the part of CSS", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1148, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "dd8b3412-f7c0-4f3c-a715-43a32147f005": {"__data__": {"id_": "dd8b3412-f7c0-4f3c-a715-43a32147f005", "embedding": null, "metadata": {"page_label": "124", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7a0108f2-e1e7-473a-8d57-4780f3260827", "node_type": "4", "metadata": {"page_label": "124", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "891f89ec0af4bb4342683c075c921945374b4055a9f0df271e721dbf5444341c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "124 | P a g e  \n \nrule set. CSS selectors select HTML elements according to its id, class, type, attribute etc.  \nThere are several different types of selectors in CSS. \n1. CSS Element Selector \n2. CSS Id Selector \n3. CSS Class Selector \n4. CSS Universal Selector \n5. CSS Group Selector \n1) CSS Element Selector \nThe element selector selects the HTML element by name. \n1. <!DOCTYPE html>   \n2. <html>   \n3. <head>   \n4. <style>   \n5. p{   \n6.     text-align: center;   \n7.     color: blue;   \n8. }    \n9. </style>   \n10. </head>   \n11. <body>   \n12. <p>This style will be applied on every paragraph.</p>   \n13. <p id=\"para1\">Me too!</p>   \n14. <p>And me!</p>   \n15. </body>   \n16. </html>     \nTest it Now \nOutput: \nThis style will be applied on every paragraph. \nMe too! \nAnd me! \n \n2) CSS Id Selector \nThe id selector selects the id attribute of an HTML element to select a specific element. An id \nis always unique within the page so it is chosen to select a single, unique element.  \nIt is written with the hash character (#), followed by the id of the element.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1069, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "293db268-b3f0-4c3d-a72e-af8b18ded61e": {"__data__": {"id_": "293db268-b3f0-4c3d-a72e-af8b18ded61e", "embedding": null, "metadata": {"page_label": "125", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "818ee6f1-9056-41e1-909a-b85d19d347e6", "node_type": "4", "metadata": {"page_label": "125", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "aa62448d45807bb650018c914e1bcbd9946e0e979b17c6d42da59df0a4b26e40", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "125 | P a g e  \n \nLet?s take an example with the id \"para1\". \n1. <!DOCTYPE html>   \n2. <html>   \n3. <head>   \n4. <style>   \n5. #para1 {   \n6.     text-align: center;   \n7.     color: blue;   \n8. }   \n9. </style>   \n10. </head>   \n11. <body>   \n12. <p id=\"para1\">Hello Javatpoint.com</p>   \n13. <p>This paragraph will not be affected.</p>   \n14. </body>   \n15. </html>     \nTest it Now \nOutput: \nHello Javatpoint.com \nThis paragraph will not be affected. \n \n3) CSS Class Selector \nThe class selector selects HTML elements with a specific class attribute. It is used with a \nperiod character . (full stop symbol) followed by the class name.  \nNote: A class name should not be started with a number. \nLet's take an example with a class \"center\". \n1. <!DOCTYPE html>   \n2. <html>   \n3. <head>   \n4. <style>   \n5. .center {   \n6.     text-align: center;   \n7.     color: blue;   \n8. }   \n9. </style>   \n10. </head>   \n11. <body>   \n12. <h1 class=\"center\">This heading is blue and center-aligned.</h1>   \n13. <p class=\"center\">This paragraph is blue and center-aligned.</p>", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1071, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "83419724-6a25-4730-8021-b7e4e775fa68": {"__data__": {"id_": "83419724-6a25-4730-8021-b7e4e775fa68", "embedding": null, "metadata": {"page_label": "126", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3e28515b-1f17-4768-b9b5-abb1d7ce64c2", "node_type": "4", "metadata": {"page_label": "126", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "9acb94e55fae76c77f6cdd300646276265b778246f5b1ebf1f727c79e1402878", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "126 | P a g e  \n \n14. </body>   \n15. </html>   \nTest it Now \nOutput: \nThis heading is blue and center-aligned. \nThis paragraph is blue and center-aligned. \n \nCSS Class Selector for specific element \nIf you want to specify that only one specific HTML element should be affected then you \nshould use the element name with class selector.  \nLet's see an example. \n1. <!DOCTYPE html>   \n2. <html>   \n3. <head>   \n4. <style>   \n5. p.center {   \n6.     text-align: center;   \n7.     color: blue;   \n8. }   \n9. </style>   \n10. </head>   \n11. <body>   \n12. <h1 class=\"center\">This heading is not affected</h1>   \n13. <p class=\"center\">This paragraph is blue and center-aligned.</p>    \n14. </body>   \n15. </html>    \nTest it Now \nOutput: \nThis heading is not affected \nThis paragraph is blue and center-aligned. \n \n4) CSS Universal Selector", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 836, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c0b79eab-6d2a-4e2e-bff7-8828805dec0d": {"__data__": {"id_": "c0b79eab-6d2a-4e2e-bff7-8828805dec0d", "embedding": null, "metadata": {"page_label": "127", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e8f24e4b-5033-43c1-a776-8881210bf773", "node_type": "4", "metadata": {"page_label": "127", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "5d551ecb5a33bbe2b9fa56db3085384ec0f45a697ca626e9f8dda03849df79da", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "127 | P a g e  \n \nThe universal selector is used as a wildcard character. It selects all the elements on the pages.  \n1. <!DOCTYPE html>   \n2. <html>   \n3. <head>   \n4. <style>   \n5. * {   \n6.    color: green;   \n7.    font-size: 20px;   \n8. }    \n9. </style>   \n10. </head>   \n11. <body>   \n12. <h2>This is heading</h2>   \n13. <p>This style will be applied on every paragraph.</p>   \n14. <p id=\"para1\">Me too!</p>   \n15. <p>And me!</p>   \n16. </body>   \n17. </html>     \nTest it Now \nOutput: \nThis is heading \nThis style will be applied on every paragraph. \nMe too! \nAnd me! \n \n5) CSS Group Selector \nThe grouping selector is used to select all the elements with the same style definitions.  \nGrouping selector is used to minimize the code. Commas are used to separate each selector in \ngrouping. \nLet's see the CSS code without group selector. \n1. h1 {   \n2.     text-align: center;   \n3.     color: blue;   \n4. }   \n5. h2 {   \n6.     text-align: center;", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 960, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b1c4071e-28c7-4c43-9287-1a1c651af345": {"__data__": {"id_": "b1c4071e-28c7-4c43-9287-1a1c651af345", "embedding": null, "metadata": {"page_label": "128", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cf00eff2-0dde-4432-895f-78670ec7a20a", "node_type": "4", "metadata": {"page_label": "128", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "7904d832b754d40e532cd5ede8dfbe1309a9af8fdf8a2fb307ba33057712779d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "128 | P a g e  \n \n7.     color: blue;   \n8. }   \n9. p {   \n10.     text-align: center;   \n11.     color: blue;   \n12. }   \nAs you can see, you need to define CSS properties for all the elements. It can be grouped in \nfollowing ways: \n1. h1,h2,p {   \n2.     text-align: center;   \n3.     color: blue;   \n4. }   \nLet's see the full example of CSS group selector. \n1. <!DOCTYPE html>   \n2. <html>   \n3. <head>   \n4. <style>   \n5. h1, h2, p {   \n6.     text-align: center;   \n7.     color: blue;   \n8. }   \n9. </style>   \n10. </head>   \n11. <body>   \n12. <h1>Hello Javatpoint.com</h1>   \n13. <h2>Hello Javatpoint.com (In smaller font)</h2>   \n14. <p>This is a paragraph.</p>   \n15. </body>   \n16. </html>   \nOutput: \nHello Javatpoint.com \nHello Javatpoint.com (In smaller font) \nThis is a paragraph. \nHow to add CSS \nCSS is added to HTML pages to format the document according to information in the style \nsheet. There are three ways to insert CSS in HTML documents.  \n1. Inline CSS \n2. Internal CSS", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 999, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b7d8ec46-b0c6-4d0f-83ae-bef5664e4ec2": {"__data__": {"id_": "b7d8ec46-b0c6-4d0f-83ae-bef5664e4ec2", "embedding": null, "metadata": {"page_label": "129", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5fbd64fa-13ab-4269-ab1a-560bce1e5fa4", "node_type": "4", "metadata": {"page_label": "129", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "22f816b1e46115be1d8768cd0ac214a65921a8b9a50923c5dd0bbc4a177a2dfe", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "129 | P a g e  \n \n3. External CSS \n \n1) Inline CSS \nInline CSS is used to apply CSS on a single line or element. \nFor example: \n1. <p style=\"color:blue\">Hello CSS</p>   \nFor more visit here: Inline CSS \n \n2) Internal CSS \nInternal CSS is used to apply CSS on a single document or page. It can affect all the elements \nof the page. It is written inside the style tag within head section of html. \nFor example: \n1. <style>   \n2. p{color:blue}   \n3. </style>   \nFor more visit here: Internal CSS \n \n3) External CSS \nExternal CSS is used to apply CSS on multiple pages or all pages. Here, we write all the CSS \ncode in a css file. Its extension must be .css for example style.css. \nFor example: \n1. p{color:blue}   \nYou need to link this style.css file to your html pages like this: \n1. <link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">   \nThe link tag must be used inside head section of html.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 901, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e9331724-a38d-427f-8ef6-b8fce7b9d282": {"__data__": {"id_": "e9331724-a38d-427f-8ef6-b8fce7b9d282", "embedding": null, "metadata": {"page_label": "130", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "841640b1-f4d4-4a34-a168-40525c6c315b", "node_type": "4", "metadata": {"page_label": "130", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "896ca5cb1846d61b99091ef5a16ce95263571cd28da9b6a8f26913deb3679ede", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "130 | P a g e  \n \nInline CSS \nWe can apply CSS in a single element by inline CSS technique. \nThe inline CSS is also a method to insert style sheets in HTML document. This method \nmitigates some advantages of style sheets so it is advised to use this method sparingly. \nIf you want to use inline CSS, you should use the style attribute to the relevant tag.  \nSyntax: \n1. <htmltag style=\"cssproperty1:value; cssproperty2:value;\"> </htmltag>     \nExample: \n1. <h2 style=\"color:red;margin-left:40px;\">Inline CSS is applied on this heading.</h2>   \n2. <p>This paragraph is not affected.</p>   \nOutput: \nInline CSS is applied on this heading. \nThis paragraph is not affected. \n \nDisadvantages of Inline CSS \n\uf0b7 You cannot use quotations within inline CSS. If you use quotations the browser will \ninterpret this as an end of your style value.  \n\uf0b7 These styles cannot be reused anywhere else. \n\uf0b7 These styles are tough to be edited because they are not stored at a single place. \n\uf0b7 It is not possible to style pseudo-codes and pseudo-classes with inline CSS.  \n\uf0b7 Inline CSS does not provide browser cache advantages.  \nInternal CSS \nThe internal style sheet is used to add a unique style for a single document. It is defined in \n<head> section of the HTML page inside the <style> tag. \nExample: \n1. <!DOCTYPE html>   \n2. <html>   \n3. <head>   \n4. <style>   \n5. body {", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1362, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "51050135-c949-452f-a829-32d1869e867d": {"__data__": {"id_": "51050135-c949-452f-a829-32d1869e867d", "embedding": null, "metadata": {"page_label": "131", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f14380d4-68cf-40c5-bc7a-a7d80bdc8caa", "node_type": "4", "metadata": {"page_label": "131", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "875bc949c72e977039d51984be115dfb6e6adb08307bb53631dc637c35525185", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "131 | P a g e  \n \n6.     background-color: linen;   \n7. }   \n8. h1 {   \n9.     color: red;   \n10.     margin-left: 80px;   \n11. }    \n12. </style>   \n13. </head>   \n14. <body>   \n15. <h1>The internal style sheet is applied on this heading.</h1>   \n16. <p>This paragraph will not be affected.</p>   \n17. </body>   \n18. </html>   \nExternal CSS \nThe external style sheet is generally used when you want to make changes on multiple pages. \nIt is ideal for this condition because it facilitates you to change the look of the entire web site \nby changing just one file.  \nIt uses the <link> tag on every pages and the <link> tag should be put inside the head section.  \nExample: \n1. <head>   \n2. <link rel=\"stylesheet\" type=\"text/css\" href=\"mystyle.css\">   \n3. </head>   \nThe external style sheet may be written in any text editor but must be saved with a .css \nextension. This file should not contain HTML elements.  \nLet's take an example of a style sheet file named \"mystyle.css\". \nFile: mystyle.css \n1. body {   \n2.     background-color: lightblue;   \n3. }   \n4. h1 {   \n5.     color: navy;   \n6.     margin-left: 20px;   \n7. }    \nNote: You should not use a space between the property value and the unit. For example: It \nshould be margin-left:20px not margin-left:20 px. \nCSS Comments", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1288, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "80f431e5-5211-4c90-a414-0e9e77d06943": {"__data__": {"id_": "80f431e5-5211-4c90-a414-0e9e77d06943", "embedding": null, "metadata": {"page_label": "132", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4766fc13-f4fa-45f0-8823-3fa8a0b57911", "node_type": "4", "metadata": {"page_label": "132", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "2c3a067fecc331b1210c48b00f1074593f14c16d332c1adf9f9cfd21e2d559bf", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "132 | P a g e  \n \nCSS comments are generally written to explain your code. It is very helpful for the users who \nreads your code so that they can easily understand the code.  \nComments are ignored by browsers.  \nComments are single or multiple lines statement and written within /*............*/ . \n1. <!DOCTYPE html>   \n2. <html>   \n3. <head>   \n4. <style>   \n5. p {   \n6.     color: blue;   \n7.     /* This is a single-line comment */   \n8.     text-align: center;   \n9. }    \n10. /* This is   \n11. a multi-line   \n12. comment */   \n13. </style>   \n14. </head>   \n15. <body>   \n16. <p>Hello Javatpoint.com</p>   \n17. <p>This statement is styled with CSS.</p>   \n18. <p>CSS comments are ignored by the browsers and not shown in the output.</p>   \n19. </body>   \n20. </html>    \nOutput: \nHello Javatpoint.com \nThis statement is styled with CSS. \nCSS comments are ignored by the browsers and not shown in the output. \nCSS Background \nCSS background property is used to define the background effects on element. There are 5 \nCSS background properties that affects the HTML elements: \n1. background-color \n2. background-image \n3. background-repeat \n4. background-attachment  \n5. background-position", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1199, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7ba6e2b0-a89b-4a90-afc4-e3bb0844b0eb": {"__data__": {"id_": "7ba6e2b0-a89b-4a90-afc4-e3bb0844b0eb", "embedding": null, "metadata": {"page_label": "133", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b436a8aa-a87b-4a7c-a178-1a5ed4dfd923", "node_type": "4", "metadata": {"page_label": "133", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "cc22dc7198f115dd91c603ace0354b50a0cab57a764b136b5c78617c0c115a40", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "133 | P a g e  \n \n1) CSS background-color \nThe background-color property is used to specify the background color of the element.  \nYou can set the background color like this: \n1. <!DOCTYPE html>   \n2. <html>   \n3. <head>   \n4. <style>   \n5. h2,p{   \n6.     background-color: #b0d4de;   \n7. }   \n8. </style>   \n9. </head>   \n10. <body>   \n11. <h2>My first CSS page.</h2>   \n12. <p>Hello Javatpoint. This is an example of CSS background-color.</p>   \n13. </body>   \n14. </html>    \nOutput: \nMy first CSS page. \nHello Javatpoint. This is an example of CSS background-color. \n \n2) CSS background-image \nThe background-image property is used to set an image as a background of an element. By \ndefault the image covers the entire element. You can set the background image for a page like \nthis. \n1. <!DOCTYPE html>   \n2. <html>   \n3. <head>   \n4. <style>   \n5. body {   \n6. background-image: url(\"paper1.gif\");   \n7. margin-left:100px;   \n8. }   \n9. </style>   \n10. </head>   \n11. <body>   \n12. <h1>Hello Javatpoint.com</h1>", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1022, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ec124b6f-cb00-455f-bdfc-97b119d85c4a": {"__data__": {"id_": "ec124b6f-cb00-455f-bdfc-97b119d85c4a", "embedding": null, "metadata": {"page_label": "134", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "25d42177-d6d8-48cd-a947-26d297445af3", "node_type": "4", "metadata": {"page_label": "134", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "848f5f06e14fdc6d7a3c2ef970f3f531279004445e0cacb7e4c6eca95c7d9493", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "134 | P a g e  \n \n13. </body>   \n14. </html>        \nNote: The background image should be chosen according to text color. The bad combination \nof text and background image may be a cause of poor designed and not readable webpage. \n \n3) CSS background-repeat \nBy default, the background-image property repeats the background image horizontally and \nvertically. Some images are repeated only horizontally or vertically.  \nThe background looks better if the image repeated horizontally only.  \nbackground-repeat: repeat-x; \n1. <!DOCTYPE html>   \n2. <html>   \n3. <head>   \n4. <style>   \n5. body {   \n6.     background-image: url(\"gradient_bg.png\");   \n7.     background-repeat: repeat-x;   \n8. }   \n9. </style>   \n10. </head>   \n11. <body>   \n12. <h1>Hello Javatpoint.com</h1>   \n13. </body>   \n14. </html>    \nbackground-repeat: repeat-y; \n1. <!DOCTYPE html>   \n2. <html>   \n3. <head>   \n4. <style>   \n5. body {   \n6.     background-image: url(\"gradient_bg.png\");   \n7.     background-repeat: repeat-y;   \n8. }   \n9. </style>   \n10. </head>   \n11. <body>   \n12. <h1>Hello Javatpoint.com</h1>   \n13. </body>   \n14. </html>", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1122, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "aa3a206f-de45-4775-8979-ebab929ced40": {"__data__": {"id_": "aa3a206f-de45-4775-8979-ebab929ced40", "embedding": null, "metadata": {"page_label": "135", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "eed0deb6-bfaf-4ddb-9fed-9c2e509cc87c", "node_type": "4", "metadata": {"page_label": "135", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "058e031479696d4328bec408043075adfcd43e562eb307557d2a3915342067fe", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "135 | P a g e  \n \n \n4) CSS background-attachment \nThe background-attachment property is used to specify if the background image is fixed or \nscroll with the rest of the page in browser window. If you set fixed the background image \nthen the image will not move during scrolling in the browser. Let?s take an example with \nfixed background image.  \n1. background: white url('bbb.gif');   \n2. background-repeat: no-repeat;   \n3. background-attachment: fixed;   \n \n5) CSS background-position \nThe background-position property is used to define the initial position of the background \nimage. By default, the background image is placed on the top-left of the webpage.  \nYou can set the following positions: \n1. center \n2. top \n3. bottom \n4. left \n5. right \n1. background: white url('good-morning.jpg');   \n2. background-repeat: no-repeat;   \n3. background-attachment: fixed;   \n4. background-position: center;    \nCSS Border \nThe CSS border is a shorthand property used to set the border on an element. \nThe CSS border properties are use to specify the style, color and size of the border of an \nelement. The CSS border properties are given below \n\uf0b7 border-style \n\uf0b7 border-color \n\uf0b7 border-width \n\uf0b7 border-radius \n1) CSS border-style", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1231, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "225fa297-1457-4464-980f-c1141df2f594": {"__data__": {"id_": "225fa297-1457-4464-980f-c1141df2f594", "embedding": null, "metadata": {"page_label": "136", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "20b07551-e726-4cc3-aa1c-d6181269265f", "node_type": "4", "metadata": {"page_label": "136", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "3d186aa5b1126857ccade7d917c5e47d9968f7bdc2fa83eb2c379356efbe8129", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "136 | P a g e  \n \nThe Border style property is used to specify the border type which you want to display on the \nweb page.  \nThere are some border style values which are used with border-style property to define a \nborder. \nValue Description \nnone It doesn't define any border. \ndotted It is used to define a dotted border. \ndashed It is used to define a dashed border. \nsolid It is used to define a solid border. \ndouble It defines two borders wIth the same border-width value. \ngroove It defines a 3d grooved border. effect is generated according to border-color value. \nridge It defines a 3d ridged border. effect is generated according to border-color value. \ninset It defines a 3d inset border. effect is generated according to border-color value. \noutset It defines a 3d outset border. effect is generated according to border-color value. \n1. <!DOCTYPE html>   \n2. <html>   \n3. <head>   \n4. <style>   \n5. p.none {border-style: none;}   \n6. p.dotted {border-style: dotted;}   \n7. p.dashed {border-style: dashed;}   \n8. p.solid {border-style: solid;}   \n9. p.double {border-style: double;}   \n10. p.groove {border-style: groove;}   \n11. p.ridge {border-style: ridge;}   \n12. p.inset {border-style: inset;}   \n13. p.outset {border-style: outset;}   \n14. p.hidden {border-style: hidden;}   \n15. </style>   \n16. </head>   \n17. <body>   \n18. <p class=\"none\">No border.</p>   \n19. <p class=\"dotted\">A dotted border.</p>   \n20. <p class=\"dashed\">A dashed border.</p>   \n21. <p class=\"solid\">A solid border.</p>   \n22. <p class=\"double\">A double border.</p>   \n23. <p class=\"groove\">A groove border.</p>   \n24. <p class=\"ridge\">A ridge border.</p>   \n25. <p class=\"inset\">An inset border.</p>   \n26. <p class=\"outset\">An outset border.</p>", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1740, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "63762716-622b-4e04-98da-b81583411e27": {"__data__": {"id_": "63762716-622b-4e04-98da-b81583411e27", "embedding": null, "metadata": {"page_label": "137", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "348a48eb-dbd7-4679-89f0-8e0a433569cb", "node_type": "4", "metadata": {"page_label": "137", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "561bac3bc55da4cf49765ee26f6321673b52e25235374c5fbdf5b3f0d4a42901", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "137 | P a g e  \n \n27. <p class=\"hidden\">A hidden border.</p>   \n28. </body>   \n29. </html>   \nOutput: \nNo border. \nA dotted border. \nA dashed border. \nA solid border. \nA double border. \nA groove border. \nA ridge border. \nAn inset border. \nAn outset border. \nA hidden border. \n2) CSS border-width \nThe border-width property is used to set the border's width. It is set in pixels. You can also \nuse the one of the three pre-defined values, thin, medium or thick to set the width of the \nborder. \nNote: The border-width property is not used alone. It is always used with other border properties like \n\"border-style\" property to set the border first otherwise it will not work.  \n1. <!DOCTYPE html>   \n2. <html>   \n3. <head>   \n4. <style>   \n5. p.one {   \n6.     border-style: solid;   \n7.     border-width: 5px;   \n8. }   \n9. p.two {   \n10.     border-style: solid;   \n11.     border-width: medium;", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 899, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4cdb07ea-079d-41f3-8289-0e1c5fbc373d": {"__data__": {"id_": "4cdb07ea-079d-41f3-8289-0e1c5fbc373d", "embedding": null, "metadata": {"page_label": "138", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bbfa7841-b8b6-4a11-87ee-9aa03ae449bd", "node_type": "4", "metadata": {"page_label": "138", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "57c2d09da28538a572bf59dbbe97f39f083809834213893559b89d53bab93431", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "138 | P a g e  \n \n12. }   \n13. p.three {   \n14.     border-style: solid;   \n15.     border-width: 1px;   \n16. }   \n17. </style>   \n18. </head>   \n19. <body>   \n20. <p class=\"one\">Write your text here.</p>   \n21. <p class=\"two\">Write your text here.</p>   \n22. <p class=\"three\">Write your text here.</p>   \n23. </body>   \n24. </html>   \n3) CSS border-color \nThere are three methods to set the color of the border.  \n\uf0b7 Name: It specifies the color name. For example: \"red\".  \n\uf0b7 RGB: It specifies the RGB value of the color. For example: \"rgb(255,0,0)\". \n\uf0b7 Hex: It specifies the hex value of the color. For example: \"#ff0000\". \nThere is also a border color named \"transparent\". If the border color is not set it is inherited \nfrom the color property of the element.  \nNote: The border-color property is not used alone. It is always used with other border properties like \n\"border-style\" property to set the border first otherwise it will not work.  \n1. <!DOCTYPE html>   \n2. <html>   \n3. <head>   \n4. <style>   \n5. p.one {   \n6.     border-style: solid;   \n7.     border-color: red;   \n8. }   \n9. p.two {   \n10.     border-style: solid;   \n11.     border-color: #98bf21;   \n12. }    \n13. </style>   \n14. </head>   \n15. <body>   \n16. <p class=\"one\">This is a solid red border</p>   \n17. <p class=\"two\">This is a solid green border</p>   \n18. </body>   \n19. </html>   \nCSS border-collapse property", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1396, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9fe93682-84c7-4c80-bff0-5356272cb635": {"__data__": {"id_": "9fe93682-84c7-4c80-bff0-5356272cb635", "embedding": null, "metadata": {"page_label": "139", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d31664d5-d3fa-4097-bd1d-07e4621dd930", "node_type": "4", "metadata": {"page_label": "139", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "ade452db5aae629db5d19edb28bd646ad4db7f9991168dbb72c7056452fc5ca7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "139 | P a g e  \n \nThis CSS property is used to set the border of the table cells and specifies whether the table \ncells share the separate or common border. \nThis property has two main values that are separate and collapse. When it is set to the value \nseparate, the distance between the cells can be defined using the border-spacing property. \nWhen the border-collapse is set to the value collapse, then the inset value of border-style \nproperty behaves like groove, and the outset value behaves like ridge. \nSyntax \n1. border-collapse: separate | collapse | initial | inherit;   \nThe values of this CSS property are defined as follows. \nProperty Values \nseparate: It is the default value that separates the border of the table cell. Using this value, \neach cell will display its own border. \ncollapse: This value is used to collapse the borders into a single border. Using this, two \nadjacent table cells will share a border. When this value is applied, the border-spacing \nproperty does not affect. \ninitial: It sets the property to its default value. \ninherit: It inherits the property from its parent element. \nNow, let's understand this CSS property by using some examples. In the first example, we are \nusing the separate value of the border-collapse property. In the second example, we are \nusing the collapse value of the border-collapse property. \nExample - Using separate value \nWith this value, we can use the border-spacing property to set the distance between the \nadjacent table cells. \n1. <!DOCTYPE html>   \n2. <html>   \n3.    \n4. <head>   \n5. <title> border-collapse property </title>   \n6. <style>   \n7. table{   \n8. border: 2px solid blue;   \n9. text-align: center;   \n10. font-size: 20px;   \n11. width: 80%;   \n12. height: 50%;   \n13. }   \n14. th{", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1771, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5b36ef79-28bb-4331-9d62-d1bb12091db2": {"__data__": {"id_": "5b36ef79-28bb-4331-9d62-d1bb12091db2", "embedding": null, "metadata": {"page_label": "140", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8f00096d-db1f-4317-820f-d1629dd43dc0", "node_type": "4", "metadata": {"page_label": "140", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "e61cdf36ef0a7bf0bb8d029bd5a29dd89f87694f3b858a6bde73fcf29fffa416", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "140 | P a g e  \n \n15. border: 5px solid red;   \n16. background-color: yellow;   \n17. }   \n18. td{   \n19. border: 5px solid violet;   \n20. background-color: cyan;   \n21. }   \n22. #t1 {   \n23. border-collapse: separate;   \n24. }   \n25. </style>   \n26. </head>   \n27.    \n28. <body>   \n29.    \n30. <h1> The border-collapse Property </h1>   \n31. <h2> border-collapse: separate; </h2>   \n32. <table id = \"t1\">   \n33. <tr>   \n34. <th> First_Name </th>   \n35. <th> Last_Name </th>   \n36. <th> Subject </th>   \n37. <th> Marks </th>   \n38. </tr>   \n39. <tr>   \n40. <td> James </td>   \n41. <td> Gosling </td>   \n42. <td> Maths </td>   \n43. <td> 92 </td>   \n44. </tr>   \n45. <tr>   \n46. <td> Alan </td>   \n47. <td> Rickman </td>   \n48. <td> Maths </td>   \n49. <td> 89 </td>   \n50. </tr>   \n51. <tr>   \n52. <td> Sam </td>   \n53. <td> Mendes </td>   \n54. <td> Maths </td>   \n55. <td> 82 </td>   \n56. </tr>   \n57. </table>   \n58. </body>   \n59.    \n60. </html>   \nTest it Now \nOutput", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 973, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "692dad3e-d78c-465e-a11d-94f5035d93f9": {"__data__": {"id_": "692dad3e-d78c-465e-a11d-94f5035d93f9", "embedding": null, "metadata": {"page_label": "141", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5e423cfb-20b1-4776-8485-8d6444a56c64", "node_type": "4", "metadata": {"page_label": "141", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "506c783b0fbdd5fc657c723b8454fb0bad7584f0ef5d7020c76a673f62a02d2b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "141 | P a g e  \n \n \nExample - Using collapse property \nThe border-spacing and border-radius properties cannot be used with this value. \n1. <!DOCTYPE html>   \n2. <html>   \n3.    \n4. <head>   \n5. <title> border-collapse property </title>   \n6. <style>   \n7. table{   \n8. border: 2px solid blue;   \n9. text-align: center;   \n10. font-size: 20px;   \n11. width: 80%;   \n12. height: 50%;   \n13. }   \n14. th{   \n15. border: 5px solid red;   \n16. background-color: yellow;   \n17. }   \n18. td{   \n19. border: 5px solid violet;   \n20. background-color: cyan;   \n21. }   \n22. #t1{   \n23. border-collapse: collapse;   \n24. }   \n25. </style>   \n26. </head>   \n27.    \n28. <body>   \n29.    \n30. <h1> The border-collapse Property </h1>   \n31. <h2> border-collapse: collapse; </h2>   \n32. <table id = \"t1\">   \n33. <tr>   \n34. <th> First_Name </th>   \n35. <th> Last_Name </th>   \n36. <th> Subject </th>   \n37. <th> Marks </th>   \n38. </tr>   \n39. <tr>   \n40. <td> James </td>   \n41. <td> Gosling </td>   \n42. <td> Maths </td>   \n43. <td> 92 </td>   \n44. </tr>   \n45. <tr>   \n46. <td> Alan </td>", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1081, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b9787418-e30a-4c31-950c-fb4596ff7253": {"__data__": {"id_": "b9787418-e30a-4c31-950c-fb4596ff7253", "embedding": null, "metadata": {"page_label": "142", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3dcafa15-432d-4f13-9897-fa1eb2cfc480", "node_type": "4", "metadata": {"page_label": "142", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "a3c75196ddcc85c46a5ad59e225c567313f3cda52dd1f4ec2f08da94bea41e90", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "142 | P a g e  \n \n47. <td> Rickman </td>   \n48. <td> Maths </td>   \n49. <td> 89 </td>   \n50. </tr>   \n51. <tr>   \n52. <td> Sam </td>   \n53. <td> Mendes </td>   \n54. <td> Maths </td>   \n55. <td> 82 </td>   \n56. </tr>   \n57. </table>   \n58. </body>   \n59. </html>   \nTest it Now \nOutput \nCSS border-spacing property \nThis CSS property is used to set the distance between the borders of the adjacent cells in the \ntable. It applies only when the border-collapse property is set to separate. There will not be \nany space between the borders if the border-collapse is set to collapse. \nIt can be defined as one or two values for determining the vertical and horizontal spacing. \n\uf0b7 When only one value is specified, then it sets both horizontal and vertical spacing. \n\uf0b7 When we use the two-value syntax, then the first one is used to set the horizontal spacing (i.e., \nthe space between the adjacent columns), and the second value sets the vertical spacing (i.e., \nthe space between the adjacent rows). \nSyntax \n1. border-spacing: length | initial | inherit;   \nProperty Values \nThe values of this CSS property are defined as follows. \nlength: This value sets the distance between the borders of the adjacent table cells in px, cm, \npt, etc. Negative values are not allowed. \ninitial: It sets the property to its default value. \ninherit: It inherits the property from its parent element. \nLet's understand this CSS property by using some examples. In the first example, we are \nusing the single value of the border-spacing property, and in the second example, we are", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1564, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a18c47b3-be35-492c-8bac-27186cad3c73": {"__data__": {"id_": "a18c47b3-be35-492c-8bac-27186cad3c73", "embedding": null, "metadata": {"page_label": "143", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3c8d66d7-9dc8-4fc9-8774-d2f4719d57af", "node_type": "4", "metadata": {"page_label": "143", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "7155c851cd13a4b1cf8701a51394d582bef03f306f4e3b0d915142e92ff513f6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "143 | P a g e  \n \nusing two values of the border-spacing property. \nExample \nHere, we are using the single value of the border-spacing property. The border-collapse \nproperty is set to separate, and the value of the border-spacing is set to 45px. \n1. <!DOCTYPE html>   \n2. <html>   \n3.    \n4. <head>   \n5. <title> border-spacing property </title>   \n6. <style>   \n7. table{   \n8. border: 2px solid blue;   \n9. text-align: center;   \n10. font-size: 20px;   \n11. background-color: lightgreen;   \n12. }   \n13. th{   \n14. border: 5px solid red;   \n15. background-color: yellow;   \n16. }   \n17. td{   \n18. border: 5px solid violet;   \n19. background-color: cyan;   \n20. }   \n21. #space{   \n22. border-collapse: separate;   \n23. border-spacing: 45px;   \n24. }   \n25. </style>   \n26. </head>   \n27.    \n28. <body>   \n29.    \n30. <h1> The border-spacing Property </h1>   \n31. <h2> border-spacing: 45px; </h2>   \n32. <table id = \"space\">   \n33. <tr>   \n34. <th> First_Name </th>   \n35. <th> Last_Name </th>   \n36. <th> Subject </th>   \n37. <th> Marks </th>   \n38. </tr>   \n39. <tr>   \n40. <td> James </td>   \n41. <td> Gosling </td>   \n42. <td> Maths </td>   \n43. <td> 92 </td>   \n44. </tr>   \n45. <tr>", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1196, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "65f6fd75-ab2a-4a01-b761-24f117938263": {"__data__": {"id_": "65f6fd75-ab2a-4a01-b761-24f117938263", "embedding": null, "metadata": {"page_label": "144", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "aa60af45-ad45-4c3e-9c76-f9bf7a54c47d", "node_type": "4", "metadata": {"page_label": "144", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "a95c15b7a494c1b6caec7664118f1ac0f9245d83c197631b36c517db130c580a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "144 | P a g e  \n \n46. <td> Alan </td>   \n47. <td> Rickman </td>   \n48. <td> Maths </td>   \n49. <td> 89 </td>   \n50. </tr>   \n51. <tr>   \n52. <td> Sam </td>   \n53. <td> Mendes </td>   \n54. <td> Maths </td>   \n55. <td> 82 </td>   \n56. </tr>   \n57. </table>   \n58. </body>   \n59.    \n60. </html>   \nOutput \n \nExample \nHere, we are using two values of the border-spacing property. The border-collapse property \nis set to separate, and the value of the border-spacing is set to 20pt 1em. The first value, \ni.e., 20pt sets the horizontal spacing, and the value 1em set the vertical spacing. \n1. <!DOCTYPE html>   \n2. <html>   \n3.    \n4. <head>   \n5. <title> border-spacing property </title>   \n6. <style>   \n7. table{   \n8. border: 2px solid blue;   \n9. text-align: center;   \n10. font-size: 20px;   \n11. background-color: lightgreen;   \n12. }   \n13. th{   \n14. border: 5px solid red;   \n15. background-color: yellow;   \n16. }   \n17. td{   \n18. border: 5px solid violet;   \n19. background-color: cyan;   \n20. }   \n21. #space{   \n22. border-collapse: separate;   \n23. border-spacing: 20pt 1em;   \n24. }   \n25. </style>   \n26. </head>", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1130, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d71999cd-1f98-4857-8213-425e7a7eec43": {"__data__": {"id_": "d71999cd-1f98-4857-8213-425e7a7eec43", "embedding": null, "metadata": {"page_label": "145", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ed84d867-1fcf-403c-9973-0b54d2b70508", "node_type": "4", "metadata": {"page_label": "145", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "1424d1c4183c9b375242ed9d587bb023dc4f88843f029f4f3d43b019b2ca160c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "145 | P a g e  \n \n27.    \n28. <body>   \n29.    \n30. <h1> The border-spacing Property </h1>   \n31. <h2> border-spacing: 20pt 1em; </h2>   \n32. <table id = \"space\">   \n33. <tr>   \n34. <th> First_Name </th>   \n35. <th> Last_Name </th>   \n36. <th> Subject </th>   \n37. <th> Marks </th>   \n38. </tr>   \n39. <tr>   \n40. <td> James </td>   \n41. <td> Gosling </td>   \n42. <td> Maths </td>   \n43. <td> 92 </td>   \n44. </tr>   \n45. <tr>   \n46. <td> Alan </td>   \n47. <td> Rickman </td>   \n48. <td> Maths </td>   \n49. <td> 89 </td>   \n50. </tr>   \n51. <tr>   \n52. <td> Sam </td>   \n53. <td> Mendes </td>   \n54. <td> Maths </td>   \n55. <td> 82 </td>   \n56. </tr>   \n57. </table>   \n58. </body>   \n59.    \n60. </html>   \nCSS Display \nCSS display is the most important property of CSS which is used to control the layout of the \nelement. It specifies how the element is displayed. \nEvery element has a default display value according to its nature. Every element on the \nwebpage is a rectangular box and the CSS property defines the behavior of that rectangular \nbox.  \nCSS Display default properties \ndefault value inline \ninherited no \nanimation supporting no", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1151, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "cab3cc55-8d15-4988-a7d9-9a1d9191d230": {"__data__": {"id_": "cab3cc55-8d15-4988-a7d9-9a1d9191d230", "embedding": null, "metadata": {"page_label": "146", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c5e7b84e-209f-448a-ae51-60b63ac6448f", "node_type": "4", "metadata": {"page_label": "146", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "d1f12af4bdfc053321db46d035181a5c50fdcf3e1fd2d38e92c104c4874aed7b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "146 | P a g e  \n \nversion css1 \njavascript syntax object.style.display=\"none\" \nSyntax \n1. display:value;   \nCSS display values \nThere are following CSS display values which are commonly used.  \n1. display: inline; \n2. display: inline-block; \n3. display: block; \n4. display: run-in; \n5. display: none; \n \n1) CSS display inline \nThe inline element takes the required width only. It doesn't force the line break so the flow of \ntext doesn't break in inline example.  \nThe inline elements are: \n\uf0b7 <span> \n\uf0b7 <a> \n\uf0b7 <em> \n\uf0b7 <b> etc. \nLet's see an example of CSS display inline. \n1. <!DOCTYPE html>   \n2. <html>   \n3. <head>   \n4. <style>   \n5. p {   \n6. display: inline;    \n7. }   \n8. </style>   \n9. </head>   \n10. <body>   \n11. <p>Hello Javatpoint.com</p>   \n12. <p>Java Tutorial.</p>   \n13. <p>SQL Tutorial.</p>   \n14. <p>HTML Tutorial.</p>   \n15. <p>CSS Tutorial.</p>", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 869, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "30970b81-9e72-4daa-b9e8-50d71f693e33": {"__data__": {"id_": "30970b81-9e72-4daa-b9e8-50d71f693e33", "embedding": null, "metadata": {"page_label": "147", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3830a3e5-df61-4614-98c8-db99a6a56921", "node_type": "4", "metadata": {"page_label": "147", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "acd9f034645b4b6cc52f556811a412ebc649e29042cbd5dd4c30b1cf4b9ddea6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "147 | P a g e  \n \n16. </body>   \n17. </html>    \nOutput: \nHello Javatpoint.com Java Tutorial. SQL Tutorial. HTML Tutorial. CSS Tutorial. \n \n2) CSS display inline-block \nThe CSS display inline-block element is very similar to inline element but the difference is \nthat you are able to set the width and height.  \n1. <!DOCTYPE html>   \n2. <html>   \n3. <head>   \n4. <style>   \n5. p {   \n6. display: inline-block;    \n7. }   \n8. </style>   \n9. </head>   \n10. <body>   \n11. <p>Hello Javatpoint.com</p>   \n12. <p>Java Tutorial.</p>   \n13. <p>SQL Tutorial.</p>   \n14. <p>HTML Tutorial.</p>   \n15. <p>CSS Tutorial.</p>   \n16. </body>   \n17. </html>   \nOutput: \nHello Javatpoint.com Java Tutorial. SQL Tutorial. HTML Tutorial. CSS Tutorial. \n \n3) CSS display block \nThe CSS display block element takes as much as horizontal space as they can. Means the \nblock element takes the full available width. They make a line break before and after them.  \n1. <!DOCTYPE html>   \n2. <html>   \n3. <head>   \n4. <style>   \n5. p {   \n6. display: block;", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1033, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "58ced462-2e01-4f77-801c-846bf645c609": {"__data__": {"id_": "58ced462-2e01-4f77-801c-846bf645c609", "embedding": null, "metadata": {"page_label": "148", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "eddec76d-0f1e-4e49-b78e-e333e0a51186", "node_type": "4", "metadata": {"page_label": "148", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "303ac0934bdb1c143396b0c9510cffc098e97266919dd54a5b5f7a65d0361144", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "148 | P a g e  \n \n7. }   \n8. </style>   \n9. </head>   \n10. <body>   \n11. <p>Hello Javatpoint.com</p>   \n12. <p>Java Tutorial.</p>   \n13. <p>SQL Tutorial.</p>   \n14. <p>HTML Tutorial.</p>   \n15. <p>CSS Tutorial.</p>   \n16. </body>   \n17. </html>   \nOutput: \nHello Javatpoint.com \nJava Tutorial. \nSQL Tutorial. \nHTML Tutorial. \nCSS Tutorial. \n \n4) CSS display run-in \nThis property doesn't work in Mozilla Firefox. These elements don't produce a specific box \nby themselves.  \n\uf0b7 If the run-in box contains a bock box, it will be same as block. \n\uf0b7 If the block box follows the run-in box, the run-in box becomes the first inline box of \nthe block box.  \n\uf0b7 If the inline box follows the run-in box, the run-in box becomes a block box.  \n1. <!DOCTYPE html>   \n2. <html>   \n3. <head>   \n4. <style>   \n5. p {   \n6. display: run-in;    \n7. }   \n8. </style>   \n9. </head>   \n10. <body>   \n11. <p>Hello Javatpoint.com</p>   \n12. <p>Java Tutorial.</p>   \n13. <p>SQL Tutorial.</p>", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 972, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e8f9b9fb-797a-40c5-a599-0be64afb4be5": {"__data__": {"id_": "e8f9b9fb-797a-40c5-a599-0be64afb4be5", "embedding": null, "metadata": {"page_label": "149", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8792f095-a0d4-414d-bc50-3ceb326f1378", "node_type": "4", "metadata": {"page_label": "149", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "f8aedcb58b2bd298d29433b2711ec067c5100412eae1e07c132458921ae3cbfc", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "149 | P a g e  \n \n14. <p>HTML Tutorial.</p>   \n15. <p>CSS Tutorial.</p>   \n16. </body>   \n17. </html>   \nOutput: \nHello Javatpoint.com \nJava Tutorial. \nSQL Tutorial. \nHTML Tutorial. \nCSS Tutorial. \n \n5) CSS display none \nThe \"none\" value totally removes the element from the page. It will not take any space. \n1. <!DOCTYPE html>   \n2. <html>   \n3. <head>   \n4. <style>   \n5. h1.hidden {   \n6.     display: none;   \n7. }   \n8. </style>   \n9. </head>   \n10. <body>   \n11. <h1>This heading is visible.</h1>   \n12. <h1 class=\"hidden\">This is not visible.</h1>   \n13. <p>You can see that the hidden heading does not contain any space.</p>   \n14. </body>   \n15. </html>   \nOutput: \nThis heading is visible. \nYou can see that the hidden heading does not contain any space. \n \nOther CSS display values", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 797, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3bb309ab-b1bd-426b-9f67-d2cf8a5dc648": {"__data__": {"id_": "3bb309ab-b1bd-426b-9f67-d2cf8a5dc648", "embedding": null, "metadata": {"page_label": "150", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3fa2f7b5-64ad-4b92-a1a1-e2ee5d78eba2", "node_type": "4", "metadata": {"page_label": "150", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "2e7b9f196f1daa3925301abc815130e73c0684016e271b50fee08f9584462b88", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "150 | P a g e  \n \nProperty-value Description \nflex It is used to display an element as an block-level flex container. It is new \nin css3. \ninline-flex It is used to display an element as an inline-level flex container. It is new \nin css3. \ninline-table It displays an element as an inline-level table. \nlist-Item It makes the element behave like a <li> element. \ntable It makes the element behave like a <table> element. \ntable-caption It makes the element behave like a <caption> element. \ntable-column-\ngroup It makes the element behave like a <colgroup> element. \ntable-header-\ngroup It makes the element behave like a <thead> element. \ntable-footer-group It makes the element behave like a <tfoot> element. \ntable-row-group It makes the element behave like a <tbody> element. \ntable-cell It makes the element behave like a <td> element. \ntable-row It makes the element behave like a <tr> element. \ntable-column It makes the element behave like a <col> element. \nCSS Cursor \nIt is used to define the type of mouse cursor when the mouse pointer is on the element. It \nallows us to specify the cursor type, which will be displayed to the user. When a user hovers \non the link, then by default, the cursor transforms into the hand from a pointer. \nLet's understand the property values of the cursor. \nValues Usage \nalias It is used to display the indication of the cursor of something that is to be \ncreated. \nauto It is the default property in which the browser sets the cursor. \nall-scroll It indicates the scrolling. \ncol-resize Using it, the cursor will represent that the column can be horizontally resized. \ncell The cursor will represent that a cell or the collection of cells is selected. \ncontext-\nmenu It indicates the availability of the context menu. \ndefault It indicates an arrow, which is the default cursor. \ncopy It is used to indicate that something is copied. \ncrosshair In it, the cursor changes to the crosshair or the plus sign. \ne-resize It represents the east direction and indicates that the edge of the box is to be \nshifted towards right. \new-resize It represents the east/west direction and indicates a bidirectional resize cursor. \nn-resize It represents the north direction that indicates that the edge of the box is to be", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 2256, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4eece9dd-677f-4a51-9e92-fe830de127c8": {"__data__": {"id_": "4eece9dd-677f-4a51-9e92-fe830de127c8", "embedding": null, "metadata": {"page_label": "151", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d6add2fb-aadf-4748-b00c-2653fa8688ca", "node_type": "4", "metadata": {"page_label": "151", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "0acb0bc31f562206b1ecf08a76a9a491f85d29515ebbbfdbf69d98a303fe74a5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "151 | P a g e  \n \nshifted to up. \nne-resize It represents the north/east direction and indicates that the edge of the box is to \nbe shifted towards up and right. \nmove It indicates that something is to be shifted. \nhelp It is in the form of a question mark or ballon, which represents that help is \navailable. \nNone It is used to indicate that no cursor is rendered for the element. \nNo-drop It is used to represent that the dragged item cannot be dropped here. \ns-resize It indicates an edge box is to be moved down. It indicates the south direction. \nRow-resize It is used to indicate that the row can be vertically resized. \nSe-resize It represents the south/east direction, which indicates that an edge box is to be \nmoved down and right.  \nSw-resize It represents south/west direction and indicates that an edge of the box is to be \nshifted towards down and left. \nWait It represents an hourglass. \n<url> It indicates the source of the cursor image file. \nw-resize It indicates the west direction and represents that the edge of the box is to be \nshifted left. \nZoom-in It is used to indicate that something can be zoomed in. \nZoom-out It is used to indicate that something can be zoomed out. \nThe illustration of using the above values of cursor property is given below: \nExample \n1. <html>   \n2.    <head>   \n3.    </head>   \n4.    <style>   \n5.       body{   \n6.          background-color: lightblue;   \n7.          color:green;   \n8.          text-align: center;   \n9.          font-size: 20px;   \n10.       }   \n11.        \n12.    </style>   \n13.       \n14.    <body>   \n15.       <p>Move your mouse over the below words for the cursor change.</p>   \n16.       <div style = \"cursor:alias\">alias Value</div>         \n17.       <div style = \"cursor:auto\">auto Value</div>   \n18.       <div style = \"cursor:all-scroll\">all-scroll value</div>   \n19.       <div style = \"cursor:col-resize\">col-resize value</div>   \n20.       <div style = \"cursor:crosshair\">Crosshair</div>   \n21.       <div style = \"cursor:default\">Default value</div>", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 2045, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9a10d18d-9dd9-4893-9d66-574a8357a3fa": {"__data__": {"id_": "9a10d18d-9dd9-4893-9d66-574a8357a3fa", "embedding": null, "metadata": {"page_label": "152", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "869cac80-acef-42eb-b1d5-826ea0ce9d34", "node_type": "4", "metadata": {"page_label": "152", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "d982f4c662bcd1fde3979d60fc6fec6516ad4002890454dbad706958d3675062", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "152 | P a g e  \n \n22.       <div style = \"cursor:copy\">copy value</div>   \n23.       <div style = \"cursor:pointer\">Pointer</div>   \n24.       <div style = \"cursor:move\">Move</div>   \n25.       <div style = \"cursor:e-resize\">e-resize</div>   \n26.       <div style = \"cursor:ew-resize\">ew-resize</div>   \n27.       <div style = \"cursor:ne-resize\">ne-resize</div>   \n28.       <div style = \"cursor:nw-resize\">nw-resize</div>   \n29.       <div style = \"cursor:n-resize\">n-resize</div>   \n30.       <div style = \"cursor:se-resize\">se-resize</div>   \n31.       <div style = \"cursor:sw-resize\">sw-resize</div>   \n32.       <div style = \"cursor:s-resize\">s-resize</div>   \n33.       <div style = \"cursor:w-resize\">w-resize</div>   \n34.       <div style = \"cursor:text\">text</div>   \n35.       <div style = \"cursor:wait\">wait</div>   \n36.       <div style = \"cursor:help\">help</div>   \n37.       <div style = \"cursor:progress\">Progress</div>   \n38.       <div style = \"cursor:no-drop\">no-drop</div>   \n39.       <div style = \"cursor:not-allowed\">not-allowed</div>   \n40.       <div style = \"cursor:vertical-text\">vertical-text</div>   \n41.       <div style = \"cursor:zoom-in\">Zoom-in</div>   \n42.       <div style = \"cursor:zoom-out\">Zoom-out</div>   \n43.    </body>   \n44. </html>   \nCSS Buttons \nIn HTML, we use the button tag to create a button, but by using CSS properties, we can style \nthe buttons. Buttons help us to create user interaction and event processing. They are one of \nthe widely used elements of web pages. \nDuring the form submission, to view or to get some information, we generally use buttons. \nLet's see the basic styling in buttons. \nBasic styling in Buttons \nThere are multiple properties available that are used to style the button element. Let's discuss \nthem one by one. \nbackground-color \nAs we have discussed earlier, this property is used for setting the background color of the \nbutton element. \nSyntax \n1. element {   \n2.     // background-color style", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1980, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2f5ab201-6a6e-4a49-adfa-0faf0ed47e4d": {"__data__": {"id_": "2f5ab201-6a6e-4a49-adfa-0faf0ed47e4d", "embedding": null, "metadata": {"page_label": "153", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bcc9d47b-f9bd-484f-a5ec-189792fc5d3d", "node_type": "4", "metadata": {"page_label": "153", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "e5f098468380128fec157efce98c4afb6d98d6d8d40754c3d0c494bda3b951b4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "153 | P a g e  \n \n3. }   \nExample \n1. <!DOCTYPE html>     \n2. <html>     \n3.      \n4. <head>     \n5.     <title>    \n6.         button background Color    \n7.     </title>    \n8.          \n9.     <style>    \n10.     body{   \n11.        text-align: center;   \n12.     }   \n13.         button {   \n14.            color:lightgoldenrodyellow;   \n15.             font-size: 30px;    \n16.         }    \n17.         .b1 {    \n18.             background-color: red;    \n19.         }    \n20.         .b2 {    \n21.             background-color: blue;    \n22.         }    \n23.         .b3 {    \n24.             background-color: violet;    \n25.         }    \n26.     </style>    \n27. </head>    \n28.      \n29. <body>     \n30.    <h1>The background-color property.</h1>   \n31.     <button class=\"b1\">Red color button</button>    \n32.     <button class=\"b2\">Blue color button</button>    \n33.     <button class=\"b3\">Violet color button</button>    \n34. </body>     \n35. </html>     \nborder \nIt is used to set the border of the button. It is the shorthand property for border-width, \nborder-color, and border-style. \nSyntax \n1. element {   \n2.     // border style", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1155, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0bec327f-1ed7-4467-b07d-51d13124954e": {"__data__": {"id_": "0bec327f-1ed7-4467-b07d-51d13124954e", "embedding": null, "metadata": {"page_label": "154", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "38f3bcf4-1628-4c9f-a290-b6c4c58728e7", "node_type": "4", "metadata": {"page_label": "154", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "fcdb60263d6c3e344064f19a6e428c95d1e9580de934f82a7dbd88b8a4a718f1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "154 | P a g e  \n \n3. }   \nExample \n1. <!DOCTYPE html>     \n2. <html>     \n3.      \n4. <head>     \n5.     <title>    \n6.         button background Color    \n7.     </title>    \n8.          \n9.     <style>    \n10.     body{   \n11.        text-align: center;   \n12.     }   \n13.         button {   \n14.            color:lightgoldenrodyellow;   \n15.             font-size: 30px;    \n16.         }    \n17.         .b1 {    \n18.             background-color: red;    \n19.             border:none;   \n20.         }    \n21.         .b2 {    \n22.             background-color: blue;    \n23.             border:5px brown solid;   \n24.         }    \n25.         .b3 {    \n26.             background-color: yellow;    \n27.             color:black;   \n28.             border:5px red groove;   \n29.         }    \n30.         .b4{   \n31.            background-color:orange;   \n32.            border: 5px red dashed;   \n33.         }   \n34.         .b5{   \n35.            background-color: gray;   \n36.            border: 5px black dotted;   \n37.         }   \n38.         .b6{   \n39.            background-color: lightblue;   \n40.            border:5px blue double;        \n41.         }   \n42.     </style>    \n43. </head>    \n44.      \n45. <body>     \n46.    <h1>The border property</h1>", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1277, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b6e8c767-4eaa-4659-9a12-2ef2d53961b0": {"__data__": {"id_": "b6e8c767-4eaa-4659-9a12-2ef2d53961b0", "embedding": null, "metadata": {"page_label": "155", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4baae727-d6e3-46d0-8666-19a8053866b2", "node_type": "4", "metadata": {"page_label": "155", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "c580fb9b113b2ffb7fcf2ded72fc0f2358e5951c411d36d20dd0536f9e1baa99", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "155 | P a g e  \n \n47.     <button class=\"b1\">none</button>    \n48.     <button class=\"b2\">solid</button>    \n49.     <button class=\"b3\">groove</button>    \n50.     <button class=\"b4\">dashed</button>    \n51.     <button class=\"b5\">dotted</button>   \n52.     <button class=\"b6\">double</button>    \n53.    \n54. </body>     \n55. </html>   \nborder-radius \nIt is used to make the rounded corners of the button. It sets the border radius of the button. \nSyntax \n1. element {   \n2.     // border-radius property   \n3. }   \nExample \n1. <!DOCTYPE html>     \n2. <html>     \n3.      \n4. <head>     \n5.     <title>    \n6.         button background Color    \n7.     </title>    \n8.          \n9.     <style>    \n10.     body{   \n11.        text-align: center;   \n12.     }   \n13.         button {   \n14.            color:lightgoldenrodyellow;   \n15.             font-size: 30px;    \n16.         }    \n17.         .b1 {    \n18.             background-color: red;    \n19.             border:none;   \n20.         }    \n21.         .b2 {    \n22.             background-color: blue;    \n23.             border:5px brown solid;   \n24.             border-radius: 7px;   \n25.         }    \n26.         .b3 {    \n27.             background-color: yellow;", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1234, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b32fee75-694e-4dc5-9996-3b216a55df65": {"__data__": {"id_": "b32fee75-694e-4dc5-9996-3b216a55df65", "embedding": null, "metadata": {"page_label": "156", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fad7eb1e-21dc-4884-839c-77b8f0babb5e", "node_type": "4", "metadata": {"page_label": "156", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "44dae11bb4487577b251286f23dec1ef3ee982789e03b2c94c9919bdfe930adc", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "156 | P a g e  \n \n28.             color:black;   \n29.             border:5px red groove;   \n30.             border-radius: 10px;   \n31.         }    \n32.         .b4{   \n33.            background-color:orange;   \n34.            border: 5px red dashed;   \n35.            border-radius: 20px;   \n36.         }   \n37.         .b5{   \n38.            background-color: gray;   \n39.            border: 5px black dotted;   \n40.            border-radius: 30px;   \n41.         }   \n42.         .b6{   \n43.            background-color: lightblue;   \n44.            border:5px blue double;        \n45.            border-radius: 25px;   \n46.         }   \n47.     </style>    \n48. </head>    \n49.      \n50. <body>     \n51.    <h1>The border-radius property</h1>   \n52.    <h2>Below there is the border name and border-radius</h2>   \n53.     <button class=\"b1\">none</button>    \n54.     <button class=\"b2\">solid 7px</button>    \n55.     <button class=\"b3\">groove 10px</button>    \n56.     <button class=\"b4\">dashed 20px</button>    \n57.     <button class=\"b5\">dotted 30px</button>   \n58.     <button class=\"b6\">double 25px</button>    \n59.    \n60. </body>     \n61. </html>   \nbox-shadow \nAs its name implies, it is used to create the shadow of the button box. It is used to add the \nshadow to the button. We can also create a shadow during the hover on the button. \nSyntax \n1. box-shadow: [horizontal offset] [vertical offset] [blur radius]    \n2.             [optional spread radius] [color];   \nExample \n1. <!DOCTYPE html>     \n2. <html>", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1529, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "70b13508-da79-4cef-a151-9ed6e01a0da8": {"__data__": {"id_": "70b13508-da79-4cef-a151-9ed6e01a0da8", "embedding": null, "metadata": {"page_label": "157", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6f4a4486-1ffe-4b24-b253-a7dc6204be84", "node_type": "4", "metadata": {"page_label": "157", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "162313ed58c7316a123d918635adf97e398f6f2f800a01880e12513630d32a4a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "157 | P a g e  \n \n3.      \n4. <head>     \n5.     <title>    \n6.         button background Color    \n7.     </title>    \n8.          \n9.     <style>    \n10.     body{   \n11.        text-align: center;   \n12.     }   \n13.         button {   \n14.            color:lightgoldenrodyellow;   \n15.             font-size: 30px;    \n16.         }    \n17.         .b1{   \n18.            background-color: lightblue;   \n19.            border:5px red double;        \n20.            border-radius: 25px;   \n21.            color:black;   \n22.            box-shadow : 0 8px 16px 0 black,    \n23.                     0 6px 20px  0 rgba(0, 0, 0, 0.19);    \n24.         }   \n25.         .b2{   \n26.          background-color: lightblue;   \n27.            border:5px red dotted;        \n28.            color:black;   \n29.            border-radius: 25px;   \n30.         }   \n31.         .b2:hover{   \n32.            box-shadow : 0 8px 16px 0 black,    \n33.                     0 6px 20px  0 rgba(0, 0, 0, 0.19);    \n34.         }   \n35.         </style>    \n36. </head>    \n37.      \n38. <body>     \n39.     <button class=\"b1\">Shadow on button</button>     \n40.     <button class=\"b2\">Box-shadow on hover</button>   \n41. </body>     \n42. </html>   \npadding \nIt is used to set the button padding. \nSyntax \n1. element {   \n2.     // padding style", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1327, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e9c0f66a-2a4f-4fd7-b583-a976bdda1ae8": {"__data__": {"id_": "e9c0f66a-2a4f-4fd7-b583-a976bdda1ae8", "embedding": null, "metadata": {"page_label": "158", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f7744244-7a9c-47cd-a937-f5571e847db8", "node_type": "4", "metadata": {"page_label": "158", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "92631cee93eb0f69687d9a281cfa50f3c783af9715a2997edf5b79f5044a683a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "158 | P a g e  \n \n3. }   \nLet's understand it using an illustration. \nExample \n1. <!DOCTYPE html>     \n2. <html>     \n3.      \n4. <head>     \n5.     <title>    \n6.         button background Color    \n7.     </title>    \n8.          \n9.     <style>    \n10.     body{   \n11.        text-align: center;   \n12.     }   \n13.         button {   \n14.            color:lightgoldenrodyellow;   \n15.             font-size: 30px;    \n16.         }    \n17.         .b1 {    \n18.             background-color: red;    \n19.             border:none;   \n20.             padding: 16px;   \n21.         }    \n22.         .b2 {    \n23.             background-color: blue;    \n24.             border:5px brown solid;   \n25.             padding:15px 30px 25px 40px;   \n26.         }    \n27.         .b3 {    \n28.             background-color: yellow;    \n29.             color:black;   \n30.             border:5px red groove;   \n31.             padding-top:30px;   \n32.         }    \n33.         .b4{   \n34.            background-color:orange;   \n35.            border: 5px red dashed;   \n36.            padding-bottom:40px;   \n37.         }   \n38.         .b5{   \n39.            background-color: gray;   \n40.            border: 5px black dotted;   \n41.            padding-left: 40px;   \n42.         }   \n43.         .b6{   \n44.            background-color: lightblue;", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1351, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c1b9644a-0fd1-41ea-b53b-feff071056b1": {"__data__": {"id_": "c1b9644a-0fd1-41ea-b53b-feff071056b1", "embedding": null, "metadata": {"page_label": "159", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7e651ab0-d8b3-408c-9845-cde29604d0de", "node_type": "4", "metadata": {"page_label": "159", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "8033f27c6acbc8f9654fc11fdec2d2f0dcbdd34af948b9afc8b4534548367a72", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "159 | P a g e  \n \n45.            border:5px blue double;        \n46.            padding-right: 40px;;   \n47.         }   \n48.     </style>    \n49. </head>    \n50.      \n51. <body>     \n52.    <h1>The padding property</h1>   \n53.     <button class=\"b1\">none</button>    \n54.     <button class=\"b2\">solid</button>    \n55.     <button class=\"b3\">groove</button>    \n56.     <button class=\"b4\">dashed</button>    \n57.     <button class=\"b5\">dotted</button>   \n58.     <button class=\"b6\">double</button>    \n59.    \n60. </body>     \n61. </html>   \nCSS Line Height \nThe CSS line height property is used to define the minimal height of line boxes within the \nelement. It sets the differences between two lines of your content.  \nIt defines the amount of space above and below inline elements. It allows you to set the \nheight of a line of independently from the font size. \nCSS line-height values \nThere are some property values which are used with CSS line-height property. \nvalue description \nnormal This is a default value. it specifies a normal line height. \nnumber It specifies a number that is multiplied with the current font size to set the line \nheight. \nlength It is used to set the line height in px, pt,cm,etc. \n% It specifies the line height in percent of the current font. \ninitial It sets this property to its default value. \ninherit It inherits this property from its parent element. \nCSS line-height example \n1. <!DOCTYPE html>   \n2. <html>   \n3. <head>   \n4. <style>   \n5. h3.small {", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1498, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "bab9a562-7321-4b91-80c3-e0d0f6340e5a": {"__data__": {"id_": "bab9a562-7321-4b91-80c3-e0d0f6340e5a", "embedding": null, "metadata": {"page_label": "160", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6d377472-6fd4-4a2f-9520-00fc83f3e0b9", "node_type": "4", "metadata": {"page_label": "160", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "f17fafc7a6412ffa3725444937146db9460c084d9705e65bd7ba80c935616405", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "160 | P a g e  \n \n6.     line-height: 70%;   \n7. }   \n8. h3.big {   \n9.     line-height: 200%;   \n10. }   \n11. </style>   \n12. </head>   \n13. <body>   \n14. <h3>   \n15. This is a heading with a standard line-height.<br>   \n16. This is a heading with a standard line-height.<br>   \n17. The default line height in most browsers is about 110% to 120%.<br>   \n18. </h3>   \n19. <h3 class=\"small\">   \n20. This is a heading with a smaller line-height.<br>   \n21. This is a heading with a smaller line-height.<br>   \n22. This is a heading with a smaller line-height.<br>   \n23. This is a heading with a smaller line-height.<br>   \n24. </h3>   \n25. <h3 class=\"big\">   \n26. This is a heading with a bigger line-height.<br>   \n27. This is a heading with a bigger line-height.<br>   \n28. This is a heading with a bigger line-height.<br>   \n29. This is a heading with a bigger line-height.<br>   \n30. </h3>   \n31. </body>   \n32. </html>   \nCSS Margin \nCSS Margin property is used to define the space around elements. It is completely transparent \nand doesn't have any background color. It clears an area around the element. \nTop, bottom, left and right margin can be changed independently using separate properties. \nYou can also change all properties at once by using shorthand margin property.  \nThere are following CSS margin properties: \nCSS Margin Properties \nProperty Description \nmargin This property is used to set all the properties in one declaration. \nmargin-left it is used to set left margin of an element. \nmargin-right It is used to set right margin of an element.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1569, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f8e4aa28-53f7-40ee-9023-9b429829084d": {"__data__": {"id_": "f8e4aa28-53f7-40ee-9023-9b429829084d", "embedding": null, "metadata": {"page_label": "161", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ef7786b5-762b-450a-a5df-946db2e6613b", "node_type": "4", "metadata": {"page_label": "161", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "9b77228a1be3e08e959dd60a2dc1c48adb0822839b7595b09b0b6da67f7bb50d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "161 | P a g e  \n \nmargin-top It is used to set top margin of an element. \nmargin-bottom It is used to set bottom margin of an element. \nCSS Margin Values \nThese are some possible values for margin property. \nValue Description \nauto This is used to let the browser calculate a margin. \nlength It is used to specify a margin pt, px, cm, etc. its default value is 0px. \n% It is used to define a margin in percent of the width of containing element. \ninherit It is used to inherit margin from parent element. \nNote: You can also use negative values to overlap content.  \n \nCSS margin Example \nYou can define different margin for different sides for an element.  \n1. <!DOCTYPE html>   \n2. <html>   \n3. <head>   \n4. <style>   \n5. p {   \n6.     background-color: pink;   \n7. }   \n8. p.ex {   \n9.     margin-top: 50px;   \n10.     margin-bottom: 50px;   \n11.     margin-right: 100px;   \n12.     margin-left: 100px;   \n13. }   \n14. </style>   \n15. </head>   \n16. <body>   \n17. <p>This paragraph is not displayed with specified margin. </p>   \n18. <p class=\"ex\">This paragraph is displayed with specified margin.</p>   \n19. </body>   \n20. </html>   \nOutput: \nThis paragraph is not displayed with specified margin.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1206, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c343ecfb-f7c8-42c8-9904-1b44f79b61c0": {"__data__": {"id_": "c343ecfb-f7c8-42c8-9904-1b44f79b61c0", "embedding": null, "metadata": {"page_label": "162", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b4831ca9-340f-4d98-bd7d-40831485ad72", "node_type": "4", "metadata": {"page_label": "162", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "29bee6a5bca338b39254d9fe6124b367f2272bec515076a842f88c49dbeac2f1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "162 | P a g e  \n \nThis paragraph is displayed with specified margin. \n \nMargin: Shorthand Property \nCSS shorthand property is used to shorten the code. It specifies all the margin properties in \none property.  \nThere are four types to specify the margin property. You can use one of them.  \n1. margin: 50px 100px 150px 200px; \n2. margin: 50px 100px 150px; \n3. margin: 50px 100px; \n4. margin 50px; \n \n1) margin: 50px 100px 150px 200px; \nIt identifies that: \ntop margin value is 50px \nright margin value is 100px \nbottom margin value is 150px \nleft margin value is 200px \n1. <!DOCTYPE html>   \n2. <html>   \n3. <head>   \n4. <style>   \n5. p {   \n6.     background-color: pink;   \n7. }   \n8. p.ex {   \n9.     margin: 50px 100px 150px 200px;   \n10. }   \n11. </style>   \n12. </head>   \n13. <body>   \n14. <p>This paragraph is not displayed with specified margin. </p>   \n15. <p class=\"ex\">This paragraph is displayed with specified margin.</p>   \n16. </body>", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 954, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6f5922f6-a8cf-468a-b652-c57ca0389c5a": {"__data__": {"id_": "6f5922f6-a8cf-468a-b652-c57ca0389c5a", "embedding": null, "metadata": {"page_label": "163", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b2871e88-63f3-4547-aac9-923892bbd446", "node_type": "4", "metadata": {"page_label": "163", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "b8ea822c756ea7648d09552c3d51a5a233ca05ac7442d36bb89a522ddb31fa7e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "163 | P a g e  \n \n17. </html>    \nOutput: \nThis paragraph is not displayed with specified margin.  \nThis paragraph is displayed with specified \nmargin. \n \n2) margin: 50px 100px 150px; \nIt identifies that: \ntop margin value is 50px \nleft and right margin values are 100px \nbottom margin value is 150px \n1. <!DOCTYPE html>   \n2. <html>   \n3. <head>   \n4. <style>   \n5. p {   \n6.     background-color: pink;   \n7. }   \n8. p.ex {   \n9.     margin: 50px 100px 150px;   \n10. }   \n11. </style>   \n12. </head>   \n13. <body>   \n14. <p>This paragraph is not displayed with specified margin. </p>   \n15. <p class=\"ex\">This paragraph is displayed with specified margin.</p>   \n16. </body>   \n17. </html>    \nOutput:", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 707, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "217284b2-fc35-4509-9658-53574b0b1735": {"__data__": {"id_": "217284b2-fc35-4509-9658-53574b0b1735", "embedding": null, "metadata": {"page_label": "164", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1225248a-38e7-45aa-87f5-94be3a256d4b", "node_type": "4", "metadata": {"page_label": "164", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "2abeec37b7753ff6131faaf8cfb4081ae3cd8b47fca979e23ff8ec9629588d5e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "164 | P a g e  \n \nThis paragraph is not displayed with specified margin.  \nThis paragraph is displayed with specified margin. \n \n3) margin: 50px 100px; \nIt identifies that: \ntop and bottom margin values are 50px \nleft and right margin values are 100px \n1. <!DOCTYPE html>   \n2. <html>   \n3. <head>   \n4. <style>   \n5. p {   \n6.     background-color: pink;   \n7. }   \n8. p.ex {   \n9.     margin: 50px 100px;   \n10. }   \n11. </style>   \n12. </head>   \n13. <body>   \n14. <p>This paragraph is not displayed with specified margin. </p>   \n15. <p class=\"ex\">This paragraph is displayed with specified margin.</p>   \n16. </body>   \n17. </html>    \nOutput: \nThis paragraph is not displayed with specified margin.  \nThis paragraph is displayed with specified margin.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 761, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3f325a54-059f-4b86-98cc-5877a1c8ebea": {"__data__": {"id_": "3f325a54-059f-4b86-98cc-5877a1c8ebea", "embedding": null, "metadata": {"page_label": "165", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "20261848-b2e2-41ef-b570-2e7184ebd002", "node_type": "4", "metadata": {"page_label": "165", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "9a5028b1af3485d1d859c561bd1dca8bccb7973475681e80b68f0616450849cb", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "165 | P a g e  \n \n \n \n \n \n \n \n \n \n \n           \nUNIT-II \nFrontend Development \nJavascript basics \nLearn JavaScript Tutorial \n \nOur JavaScript Tutorial is designed for beginners and professionals both. JavaScript is used \nto create client-side dynamic pages.  \nJavaScript is an object-based scripting language which is lightweight and cross-platform. \nJavaScript is not a compiled language, but it is a translated language. The JavaScript \nTranslator (embedded in the browser) is responsible for translating the JavaScript code for \nthe web browser.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 552, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "180821ba-7e2c-4425-a51c-36692216538e": {"__data__": {"id_": "180821ba-7e2c-4425-a51c-36692216538e", "embedding": null, "metadata": {"page_label": "166", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "064a3061-81fa-4d8f-8bc2-1c9f6b1fcec4", "node_type": "4", "metadata": {"page_label": "166", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "677595548bda7108b07bbb5a074f12ab091bbaf2d4c35425d1a4c79bdd1118a2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "166 | P a g e  \n \nWhat is JavaScript \nJavaScript (js) is a light-weight object-oriented programming language which is used by \nseveral websites for scripting the webpages. It is an interpreted, full-fledged programming \nlanguage that enables dynamic interactivity on websites when applied to an HTML \ndocument. It was introduced in the year 1995 for adding programs to the webpages in the \nNetscape Navigator browser. Since then, it has been adopted by all other graphical web \nbrowsers. With JavaScript, users can build modern web applications to interact directly \nwithout reloading the page every time. The traditional website uses js to provide several \nforms of interactivity and simplicity. \nAlthough, JavaScript has no connectivity with Java programming language. The name was \nsuggested and provided in the times when Java was gaining popularity in the market. In \naddition to web browsers, databases such as CouchDB and MongoDB uses JavaScript as their \nscripting and query language. \nFeatures of JavaScript \nThere are following features of JavaScript: \n1. All popular web browsers support JavaScript as they provide built-in execution environments. \n2. JavaScript follows the syntax and structure of the C programming language. Thus, it is a \nstructured programming language. \n3. JavaScript is a weakly typed language, where certain types are implicitly cast (depending on \nthe operation). \n4. JavaScript is an object-oriented programming language that uses prototypes rather than using \nclasses for inheritance. \n5. It is a light-weighted and interpreted language. \n6. It is a case-sensitive language. \n7. JavaScript is supportable in several operating systems including, Windows, macOS, etc. \n8. It provides good control to the users over the web browsers. \nHistory of JavaScript \nIn 1993, Mosaic, the first popular web browser, came into existence. In the year 1994, \nNetscape was founded by Marc Andreessen. He realized that the web needed to become \nmore dynamic. Thus, a 'glue language' was believed to be provided to HTML to make web \ndesigning easy for designers and part-time programmers. Consequently, in 1995, the \ncompany recruited Brendan Eich intending to implement and embed Scheme programming \nlanguage to the browser. But, before Brendan could start, the company merged with Sun \nMicrosystems for adding Java into its Navigator so that it could compete with Microsoft over \nthe web technologies and platforms. Now, two languages were there: Java and the scripting \nlanguage. Further, Netscape decided to give a similar name to the scripting language as \nJava's. It led to 'Javascript'. Finally, in May 1995, Marc Andreessen coined the first code of \nJavascript named 'Mocha'. Later, the marketing team replaced the name with 'LiveScript'. \nBut, due to trademark reasons and certain other reasons, in December 1995, the language was \nfinally renamed to 'JavaScript'. From then, JavaScript came into existence. \nApplication of JavaScript", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 2966, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6c479611-8dfb-4854-ad11-6ed97de7d301": {"__data__": {"id_": "6c479611-8dfb-4854-ad11-6ed97de7d301", "embedding": null, "metadata": {"page_label": "167", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "82dea2b0-99d3-4e05-8e0e-20499e411536", "node_type": "4", "metadata": {"page_label": "167", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "4fe38dead67beca7e2313ae0a1edb922dd38bcd8a645fd32c202683dc921b81a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "167 | P a g e  \n \nJavaScript is used to create interactive websites. It is mainly used for: \n\uf0b7 Client-side validation, \n\uf0b7 Dynamic drop-down menus, \n\uf0b7 Displaying date and time, \n\uf0b7 Displaying pop-up windows and dialog boxes (like an alert dialog box, confirm dialog box \nand prompt dialog box), \n\uf0b7 Displaying clocks etc. \nJavaScript Example \n1. <script>   \n2. document.write(\"Hello JavaScript by JavaScript\");   \n3. </script>   \nJavaScript Example \nJavascript example is easy to code. JavaScript provides 3 places to put the JavaScript code: \nwithin body tag, within head tag and external JavaScript file. \nLet\u2019s create the first JavaScript example. \n1. <script type=\"text/javascript\">   \n2. document.write(\"JavaScript is a simple language for javatpoint learners\");   \n3. </script>   \nTest it Now \nThe script tag specifies that we are using JavaScript. \nThe text/javascript is the content type that provides information to the browser about the \ndata. \nThe document.write() function is used to display dynamic content through JavaScript. We \nwill learn about document object in detail later. \n \n3 Places to put JavaScript code \n1. Between the body tag of html \n2. Between the head tag of html \n3. In .js file (external javaScript) \n \n1) JavaScript Example : code between the body tag", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1286, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "67dfd496-4f99-4139-bca7-49ae1457fd94": {"__data__": {"id_": "67dfd496-4f99-4139-bca7-49ae1457fd94", "embedding": null, "metadata": {"page_label": "168", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6b67c575-de4c-45af-8879-de685f2fa07d", "node_type": "4", "metadata": {"page_label": "168", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "59a7438e9249388203da29d337adb859a4805b9ddb3cf9f3fdb24257c77aca87", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "168 | P a g e  \n \nIn the above example, we have displayed the dynamic content using JavaScript. Let\u2019s see the \nsimple example of JavaScript that displays alert dialog box. \n1. <script type=\"text/javascript\">   \n2.  alert(\"Hello Javatpoint\");   \n3. </script>   \n \n2) JavaScript Example : code between the head tag \nLet\u2019s see the same example of displaying alert dialog box of JavaScript that is contained \ninside the head tag. \nIn this example, we are creating a function msg(). To create function in JavaScript, you need \nto write function with function_name as given below. \nTo call function, you need to work on event. Here we are using onclick event to call msg() \nfunction. \n1. <html>   \n2. <head>   \n3. <script type=\"text/javascript\">   \n4. function msg(){   \n5.  alert(\"Hello Javatpoint\");   \n6. }   \n7. </script>   \n8. </head>   \n9. <body>   \n10. <p>Welcome to JavaScript</p>   \n11. <form>   \n12. <input type=\"button\" value=\"click\" onclick=\"msg()\"/>   \n13. </form>   \n14. </body>   \n15. </html>   \nExternal JavaScript file \nWe can create external JavaScript file and embed it in many html page.  \nIt provides code re usability because single JavaScript file can be used in several html pages. \nAn external JavaScript file must be saved by .js extension. It is recommended to embed all \nJavaScript files into a single file. It increases the speed of the webpage. \nLet's create an external JavaScript file that prints Hello Javatpoint in a alert dialog box. \nmessage.js", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1478, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "97887d07-38bd-43fb-a19a-696cc0b29006": {"__data__": {"id_": "97887d07-38bd-43fb-a19a-696cc0b29006", "embedding": null, "metadata": {"page_label": "169", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "258c0db3-3db0-48d0-951d-d41ae7eec8e4", "node_type": "4", "metadata": {"page_label": "169", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "5349880c3e937ed7b172a31bc25073a1fdd4190edd8e6d1dd44086f675d8991c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "169 | P a g e  \n \n1. function msg(){   \n2.  alert(\"Hello Javatpoint\");   \n3. }   \nLet's include the JavaScript file into html page. It calls the JavaScript function on button \nclick. \nindex.html \n1. <html>   \n2. <head>   \n3. <script type=\"text/javascript\" src=\"message.js\"></script>   \n4. </head>   \n5. <body>   \n6. <p>Welcome to JavaScript</p>   \n7. <form>   \n8. <input type=\"button\" value=\"click\" onclick=\"msg()\"/>   \n9. </form>   \n10. </body>   \n11. </html>   \nAdvantages of External JavaScript \nThere will be following benefits if a user creates an external javascript: \n1. It helps in the reusability of code in more than one HTML file. \n2. It allows easy code readability. \n3. It is time-efficient as web browsers cache the external js files, which further reduces \nthe page loading time. \n4. It enables both web designers and coders to work with html and js files parallelly and \nseparately, i.e., without facing any code conflictions. \n5. The length of the code reduces as only we need to specify the location of the js file. \nDisadvantages of External JavaScript \nThere are the following disadvantages of external files: \n1. The stealer may download the coder's code using the url of the js file. \n2. If two js files are dependent on one another, then a failure in one file may affect the \nexecution of the other dependent file. \n3. The web browser needs to make an additional http request to get the js code. \n4. A tiny to a large change in the js code may cause unexpected results in all its \ndependent files. \n5. We need to check each file that depends on the commonly created external javascript \nfile. \n6. If it is a few lines of code, then better to implement the internal javascript code. \nJavaScript Comment", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1728, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6bba857d-b5a4-4a84-9220-0e2e0d3ff66d": {"__data__": {"id_": "6bba857d-b5a4-4a84-9220-0e2e0d3ff66d", "embedding": null, "metadata": {"page_label": "170", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1950d2e1-3850-465d-8ef0-503f60fda535", "node_type": "4", "metadata": {"page_label": "170", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "8e34bf806aab9a6b4a148679c95bec0138a4212a8f2badf3979b58d38b544117", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "170 | P a g e  \n \n1. JavaScript comments \n2. Advantage of javaScript comments \n3. Single-line and Multi-line comments \nThe JavaScript comments are meaningful way to deliver message. It is used to add \ninformation about the code, warnings or suggestions so that end user can easily interpret the \ncode. \nThe JavaScript comment is ignored by the JavaScript engine i.e. embedded in the browser. \nAdvantages of JavaScript comments \nThere are mainly two advantages of JavaScript comments. \n1. To make code easy to understand It can be used to elaborate the code so that end user can \neasily understand the code. \n2. To avoid the unnecessary code It can also be used to avoid the code being executed. \nSometimes, we add the code to perform some action. But after sometime, there may be need \nto disable the code. In such case, it is better to use comments. \n \nTypes of JavaScript Comments \nThere are two types of comments in JavaScript. \n1. Single-line Comment \n2. Multi-line Comment \n \nJavaScript Single line Comment \nIt is represented by double forward slashes (//). It can be used before and after the statement. \nLet\u2019s see the example of single-line comment i.e. added before the statement. \n1. <script>   \n2. // It is single line comment   \n3. document.write(\"hello javascript\");   \n4. </script>   \nTest it Now \nLet\u2019s see the example of single-line comment i.e. added after the statement. \n1. <script>   \n2. var a=10;   \n3. var b=20;   \n4. var c=a+b;//It adds values of a and b variable", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1489, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3a3b1a38-ba02-493b-ab1c-5a9b44c7ac7c": {"__data__": {"id_": "3a3b1a38-ba02-493b-ab1c-5a9b44c7ac7c", "embedding": null, "metadata": {"page_label": "171", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "00be94d4-570a-4fa7-b418-269d5483bdff", "node_type": "4", "metadata": {"page_label": "171", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "54bff1a4fb335fff819d48860b06a2f5ce64b6aeda0012e78a8d574d4c80c8c5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "171 | P a g e  \n \n5. document.write(c);//prints sum of 10 and 20   \n6. </script>   \n \nJavaScript Multi line Comment \nIt can be used to add single as well as multi line comments. So, it is more convenient. \nIt is represented by forward slash with asterisk then asterisk with forward slash. For example: \n1. /* your code here  */   \nIt can be used before, after and middle of the statement. \n1. <script>   \n2. /* It is multi line comment.   \n3. It will not be displayed */   \n4. document.write(\"example of javascript multiline comment\");   \n5. </script>   \njavaScript Variable \nA JavaScript variable is simply a name of storage location. There are two types of variables \nin JavaScript : local variable and global variable. \nThere are some rules while declaring a JavaScript variable (also known as identifiers). \n1. Name must start with a letter (a to z or A to Z), underscore( _ ), or dollar( $ ) sign. \n2. After first letter we can use digits (0 to 9), for example value1. \n3. JavaScript variables are case sensitive, for example x and X are different variables. \n \nCorrect JavaScript variables \n1. var x = 10;   \n2. var _value=\"sonoo\";   \n \nIncorrect JavaScript variables \n1. var  123=30;   \n2. var *aa=320;", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1213, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4b645d6e-5f22-4388-9083-0da65b6d49cb": {"__data__": {"id_": "4b645d6e-5f22-4388-9083-0da65b6d49cb", "embedding": null, "metadata": {"page_label": "172", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e98581f4-a351-42f6-9360-96b73bce7805", "node_type": "4", "metadata": {"page_label": "172", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "30899f05c06d825f767484e344e88553a3d24be34a6c2c3c808c0e2bf60cbcec", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "172 | P a g e  \n \nExample of JavaScript variable \nLet\u2019s see a simple example of JavaScript variable. \n1. <script>   \n2. var x = 10;   \n3. var y = 20;   \n4. var z=x+y;   \n5. document.write(z);   \n6. </script>   \nOutput of the above example \n30  \n \nJavaScript local variable \nA JavaScript local variable is declared inside block or function. It is accessible within the \nfunction or block only. For example: \n1. <script>   \n2. function abc(){   \n3. var x=10;//local variable   \n4. }   \n5. </script>   \nOr, \n1. <script>   \n2. If(10<13){   \n3. var y=20;//JavaScript local variable   \n4. }   \n5. </script>   \n \nJavaScript global variable \nA JavaScript global variable is accessible from any function. A variable i.e. declared \noutside the function or declared with window object is known as global variable. For \nexample: \n1. <script>   \n2. var data=200;//gloabal variable   \n3. function a(){   \n4. document.writeln(data);   \n5. }", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 929, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d55094e9-7ab5-4869-be23-0d104a12734d": {"__data__": {"id_": "d55094e9-7ab5-4869-be23-0d104a12734d", "embedding": null, "metadata": {"page_label": "173", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dcae24b4-d978-4eb9-9f12-69ba1edebb33", "node_type": "4", "metadata": {"page_label": "173", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "48e19b73ac843459aeb23889f8fb0dc2621620cbf8fc3054003099eb8381ab40", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "173 | P a g e  \n \n6. function b(){   \n7. document.writeln(data);   \n8. }   \n9. a();//calling JavaScript function   \n10. b();   \n11. </script> \nJavaScript Global Variable \nA JavaScript global variable is declared outside the function or declared with window \nobject. It can be accessed from any function. \nLet\u2019s see the simple example of global variable in JavaScript. \n1. <script>   \n2. var value=50;//global variable   \n3. function a(){   \n4. alert(value);   \n5. }   \n6. function b(){   \n7. alert(value);   \n8. }   \n9. </script>   \nDeclaring JavaScript global variable within function \nTo declare JavaScript global variables inside function, you need to use window object. For \nexample: \n1. window.value=90;   \nNow it can be declared inside any function and can be accessed from any function. For \nexample: \n1. function m(){   \n2. window.value=100;//declaring global variable by window object   \n3. }   \n4. function n(){   \n5. alert(window.value);//accessing global variable from other function   \n6. }   \n \nInternals of global variable in JavaScript \nWhen you declare a variable outside the function, it is added in the window object internally. \nYou can access it through window object also. For example: \n1. var value=50;", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1229, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d0a5b44c-acb8-4cce-9eb3-b8a8e2cefe63": {"__data__": {"id_": "d0a5b44c-acb8-4cce-9eb3-b8a8e2cefe63", "embedding": null, "metadata": {"page_label": "174", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4897a1e8-5167-4ee3-9d6a-62bee579eef7", "node_type": "4", "metadata": {"page_label": "174", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "6e9a4a88c6208c432d7779a18ba762725b3cdae9cd9c28e9d1e669499f46a5c6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "174 | P a g e  \n \n2. function a(){   \n3. alert(window.value);//accessing global variable    \n4. }   \n \nOOPS ASPECTS IN JAVASCRIPT \nWhat Is Object-oriented Programming? \nObject-oriented Programming treats data as a crucial element in program development and \ndoesn't allow it to flow freely around the system. It ties data more securely to the function \nthat operates on it and protects it from accidental modification from an outside function. OOP \nbreaks down a problem into several entities called objects and builds data and functions \naround these objects.  \nBasic concepts of Object-oriented Programming  \nObjects  \nObjects are the basic run-time bodies in an object-oriented framework. They may represent a \nplace, a person, an account, a table of data, or anything that the program needs to handle. \nObjects can also represent user-defined data such as vectors, time, and lists. \nConsider two objects, \u201ccustomer\u201d and \u201caccount\u201d in a program. The customer object may send \na message requesting the bank balance.  \nClasses  \nWe know that objects hold the data and the functions to manipulate the data. However, the \ntwo can be bound together in a user-defined data type with the help of classes. Any number \nof objects can be created in a class. Each object is associated with the data of type class. A \nclass is therefore a collection of objects of similar types.  \nFor example, consider the class \u201cFruits\u201d. We can create multiple objects for this class - \nFruit Mango; \nThis will create an object mango belonging to the class fruit.   \nEncapsulation \nEncapsulation is the wrapping up/binding of data and function into a single unit called class. \nData encapsulation is the most prominent feature of a class wherein the data is not accessible \nto the outside world, and only those functions wrapped inside the class can access it. These \nfunctions serve as the interface between the object\u2019s data and the program.  \nInheritance", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1936, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "de80fd66-c156-4e40-95ff-a8d444d6b137": {"__data__": {"id_": "de80fd66-c156-4e40-95ff-a8d444d6b137", "embedding": null, "metadata": {"page_label": "175", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d372207f-2f02-4f53-9960-61a7c40bbaf4", "node_type": "4", "metadata": {"page_label": "175", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "952c02c43acb59eb1eb29da48df1b36a34a90c1f739d89c6653330d5594f7f44", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "175 | P a g e  \n \nThe phenomenon where objects of one class acquire the properties of objects of another class \nis called Inheritance. It supports the concept of hierarchical classification. Consider the object \n\u201ccar\u201d that falls in the class \u201cVehicles\u201d and \u201cLight Weight Vehicles\u201d. \nIn OOP, the concept of inheritance ensures reusability. This means that additional features \ncan be added to an existing class without modifying it. This is made possible by deriving a \nnew class from the existing one.  \nOOP Concepts in JavaScript \nNow that you are familiar with OOP concepts, this section will show you how JavaScript \nimplements them.  \nCreating Objects in JavaScript \n\uf0b7 We can create an object using the string literal in JavaScript.  \nvar student = { \n        name: \"pp\", \n        age: 21, \n        studies: \"Computer Science\", \n    }; \n    document.getElementById(\"demo\").innerHTML = student.name + \" of the age \" + \nstudent.age + \" studies \" + student.studies; \n\uf0b7 Creating objects using the new keyword. \nvar student = new Object(); \n    student.name = \"pp\", \n    student.age=21, \n    student.studies = \"Computer Science\"; \n    document.getElementById(\"demo\").innerHTML = student.name + \" of the age \" + \nstudent.age + \" studies \" + student.studies; \n\uf0b7 Creating an object using the object constructor.  \nfunction stud(name, age, studies){ \n        this.name = name;", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1375, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ea98e248-7649-4810-935d-2714d132875d": {"__data__": {"id_": "ea98e248-7649-4810-935d-2714d132875d", "embedding": null, "metadata": {"page_label": "176", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5848bd23-c11b-4bea-8e08-8e4113a55a84", "node_type": "4", "metadata": {"page_label": "176", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "ed2bf3e12d0e3c93eada92e3367c59282464df925da4ddeb1d0fedd84d54fc7d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "176 | P a g e  \n \n        this.age = age; \n        this.studies = studies; \n    } \n    var student = stud(\"Chris\", 21, \"Computer Science\"); \n    document.getElementById(\"demo\").innerHTML = student.name + \" of the age \" + \nstudent.age + \" studies \" + student.studies; \nClass Implementation in JavaScript \nJavaScript uses the ES6 standard to define classes. Consider the following example.  \nclass Cars {  \n    constructor(name, maker, price) {  \n      this.name = name;  \n      this.maker =  maker;  \n      this.price = price;  \n    }  \n    getDetails(){  \n        return (`The name of the car is ${this.name}.`)  \n    }  \n  }  \n  let car1 = new Cars('Rolls Royce Ghost', 'Rolls Royce', '$315K');  \n  let car2 = new Cars('Mercedes AMG One', 'Mercedes', '$2700K');  \n  console.log(car1.name);      \n  console.log(car2.maker);    \n  console.log(car1.getDetails());  \nThe output of the above code is", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 899, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4ff7f7a5-2580-43fe-b5b5-317e58601abe": {"__data__": {"id_": "4ff7f7a5-2580-43fe-b5b5-317e58601abe", "embedding": null, "metadata": {"page_label": "177", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5f735931-1250-4e66-a41e-abae1ba486cd", "node_type": "4", "metadata": {"page_label": "177", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "ee18f3e9f95f4d1a0e85e74af1f34327d39676d83c0f4f275bae28b2710900fe", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "177 | P a g e  \n \n \nEncapsulation in JavaScript \nEncapsulation includes wrapping the property and the function within a single unit. Consider \nthe following example:  \nclass Emp_details{  \n    constructor(name,id){  \n        this.name = name;  \n        this.id = id;  \n    }  \n    add_Address(add){  \n        this.add = add;  \n    }  \n    getDetails(){  \n        console.log(`Employee Name: ${this.name}, Address: ${this.add}`);  \n    }  \n}  \nlet person1 = new Emp_details('Anand',27);  \nperson1.add_Address('Bangalore');  \nperson1.getDetails();  \nHere, the class holds the data variables name and id along with the functions add_Address \nand getDetails. All are encapsulated within the class Emp_details.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 709, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "40be074e-04d1-46ff-9f77-7264ac46d2be": {"__data__": {"id_": "40be074e-04d1-46ff-9f77-7264ac46d2be", "embedding": null, "metadata": {"page_label": "178", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b3f6032e-a718-458c-a072-34c5efbf0d87", "node_type": "4", "metadata": {"page_label": "178", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "836aa45433ba217ee76662fe25e95038a8b7dc90c91bf3a826e47457d7dde6a6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "178 | P a g e  \n \nMemory Management in JavaScript \nMemory management is an essential task when writing a good and effective program in some \nprogramming languages. This article will help you to understand different concepts of \nmemory management in JavaScript. In low-level languages like C and C++, programmers \nshould care about the usage of memory in some manual fashion. On the other hand, \nJavascript automatically allocates memory when objects are created into the environment and \nalso it cleans the memory when an object is destroyed. JavaScript can manage all of these on \nits own but this does not imply that the developers do not need to worry about the memory \nmanagement in JavaScript. \nMemory management in any programming language involves three important phases, termed \nas memory life-cycle \u2212 \n\uf0b7 Allocating the memory which is required in our program. \n\uf0b7 Utilize the allocated memory unit. \n\uf0b7 After completion, clear the memory block. \nDifferent Strategies to Allocate Memory in JavaScript \nAllocating by value initialization \nIn JavaScript, we do not need to care about allocating memory for simple variables. We can \ndirectly assign values to some variables and it will allocate necessary memory on its own. \nSyntax \nvar variable1 = <value> \nvar variable2 = <value> \nExample \nFor simple allocation by values, see the following example. \nSource Code \n<head> \n<title>HTML Console</title> \n</head> \n<body> \n<h3> Output Console </h3> \n<p> Output:</p> \n<div id=\"output\"> \n</div> \n<div id=\"opError\" style=\"color : #ff0000\"> \n</div> \n<script> \nvar content ='' \nvar error ='' \nvaropDiv=document.querySelector('#output') \nvaropErrDiv=document.querySelector('#opError') \n \n// actual javascript code \ntry{", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1717, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "89e7fa30-b418-42a8-9310-a25edf3dc4da": {"__data__": {"id_": "89e7fa30-b418-42a8-9310-a25edf3dc4da", "embedding": null, "metadata": {"page_label": "179", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3a620500-42fd-4cd7-ac2a-12300089bee9", "node_type": "4", "metadata": {"page_label": "179", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "562d3ff925f162470288f5fca5908679d364c273d274f2b154965a7f36ff2635", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "179 | P a g e  \n \nvar number =52; \nvarst='my_string'; \nvar student ={ \n            name:'Smith', \n            roll:5, \n            age:23, \n}; \nvararr=[15,null,'another_string']; \n         content +=\"Allocated memory for number: \"+JSON.stringify(number)+'<br>' \n         content +=\"Allocated memory for string: \"+JSON.stringify(st)+'<br>' \n         content +=\"Allocated memory for student: \"+JSON.stringify(student)+'<br>' \n         content +=\"Allocated memory for array: \"+JSON.stringify(arr)+'<br>' \n}catch(err){ \n         error += err \n}finally{ \n \n// display on output console \nopDiv.innerHTML= content \nopErrDiv.innerHTML= error \n} \n</script> \n</body> \n</html> \nFrom the above example, it is clear that numbers and strings are single values, and allocation \nis also simple. But for objects and arrays, JavaScript can also easily allocate the memory \nbased on their values. \nAllocating by Function Call \nLike variable value assignment, we can also create some memory blocks by calling some \nfunctions. For example, when a function returns a separate object it will automatically assign \na new memory block to the system. \nSyntax \nMemory_reference = <function call which returns any value> \nExamples \nThe following example uses a function that works on an HTML document. So this program \nwill run on a browser or HTML editor. \nSource Code \n<!DOCTYPE html> \n<html lang=\"en\"> \n<head> \n<meta charset=\"UTF-8\"/> \n</head> \n<body> \n<script> \nvar e =document.createElement('div'); \ne.innerHTML=\"<h1> Header from JavaScript </h1>\" \ndocument.body.appendChild(e); \n</script> \n</body> \n</html>", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1588, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9c51e4cf-45c7-48bc-88fa-e1a5033115cd": {"__data__": {"id_": "9c51e4cf-45c7-48bc-88fa-e1a5033115cd", "embedding": null, "metadata": {"page_label": "180", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d8718249-f91e-4923-b9af-fefea8251c42", "node_type": "4", "metadata": {"page_label": "180", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "f2f10f1c84643f21ac18e789b6f4743750030b9ffef75b21e04bfda3ed7d76ca", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "180 | P a g e  \n \nIn this example, the JavaScript code is present inside the <script> tag in HTML. Please \nnotice, in this case, initially, the document does not have any <div> block inside <body>. The \nJavaScript creates a new component by calling createElement(), and then a new div block is \ncreated. This block allocates the memory but only when a function is called. After that, the \nnew component is added as a child of the body tag to use this inside the HTML document. \nUsing previously Allocated Memory in JavaScript \nUsing previously allocated memory is just reading or writing values from some variables \nwhich are assigned previously. We can update its existing value with some other values. See \nthe following example for a better understanding\u2212 \nExample \nInitially allocating memory for a variable, then reading the value from it. Writing a new value \nand again reading from it. \nSource Code \n<!DOCTYPE html> \n<html> \n<head> \n<title>HTML Console</title> \n</head> \n<body> \n<h3> Output Console </h3> \n<p> Output:</p> \n<div id=\"output\"> \n</div> \n<div id=\"opError\" style=\"color : #ff0000\"> \n</div> \n<script> \nvar content ='' \nvar error ='' \nopDiv=document.querySelector('#output') \nvaropErrDiv=document.querySelector('#opError') \n \n// actual javascript code \ntry{ \nvar a =52;// allocate memory \n         content +=\"Reading value of variable a: \"+JSON.stringify(a)+'<br>' \n         a =100 \n         content +=\"Reading value of variable a: \"+JSON.stringify(a)+'<br>' \n} \ncatch(err){ \n         error += err \n} \nfinally{ \n \n// display on output console \nopDiv.innerHTML= content \nopErrDiv.innerHTML= error \n} \n</script> \n</body>", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1638, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5b22d9dd-4fa4-48c1-b3a8-1b876c7df412": {"__data__": {"id_": "5b22d9dd-4fa4-48c1-b3a8-1b876c7df412", "embedding": null, "metadata": {"page_label": "181", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5634f18b-378a-46ca-87ff-cc8eca927009", "node_type": "4", "metadata": {"page_label": "181", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "e72cc46841421a7c2a6bfac830f867f3301e8a8eeac7e4376091b1d17d06ba9a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "181 | P a g e  \n \n</html> \nDeallocating memory blocks in JavaScript \nWhen our purpose is served, we can remove the allocated memory block. In some low-level \nlanguages, this is a necessary step, otherwise, it may occupy memory spaces over time and \nthe total system may crash. JavaScript also has native support of Garbage Collector, which \ncleans unnecessary memory blocks and cleans up the memory. But sometimes the compiler \ncannot understand whether a block will be used in later cases or not. In such cases, the \nGarbage Collector does not clean up that memory. To manually remove allocated locations, \nwe can use the \u2018delete\u2019 keyword before the variable name. \nSyntax \ndelete <variable_name> \nThe variable must be allocated beforehand, otherwise, it will raise an error while trying to \ndelete that variable. Let us see one example to understand this concept clearly. \nExample \nSource Code \n<!DOCTYPE html> \n<html> \n<head> \n<title>HTML Console</title> \n</head> \n<body> \n<h3> Output Console </h3> \n<p> Output:</p> \n<div id=\"output\"> \n</div> \n<div id=\"opError\" style=\"color : #ff0000\"> \n</div> \n<script> \nvar content ='' \nvar error ='' \nvaropDiv=document.querySelector('#output') \nvaropErrDiv=document.querySelector('#opError') \n \n// actual javascript code \ntry{ \n         a =\"a simple variable\";// allocate memory \n         content +=\"Reading value of variable a: \"+JSON.stringify(a)+'<br>' \ndelete a \n         content +=\"Reading value of variable a: \"+JSON.stringify(a)+'<br>' \n} \ncatch(err){ \n         error += err \n} \nfinally{ \n \n// display on output console \nopDiv.innerHTML= content \nopErrDiv.innerHTML= error \n} \n</script>", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1637, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9cd72ee1-0212-4259-a749-bee870030872": {"__data__": {"id_": "9cd72ee1-0212-4259-a749-bee870030872", "embedding": null, "metadata": {"page_label": "182", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "563e0d76-594e-4a2d-935e-e1429efb7892", "node_type": "4", "metadata": {"page_label": "182", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "b770f3a0659cd51d07deb03360897cf65541cd781944fb1d40f2e342444295b5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "182 | P a g e  \n \n</body> \n</html> \nNote \u2212 The \u2018delete\u2019 keyword will only work when the variable is allocated directly (without \nusing the var or let keyword). \nConclusion  \nWorking with any programming language, the programmer should know the overall concept \nin depth. Memory management is one of the concerning issues, in which developers should \nproperly manage the memory otherwise it will occupy unnecessary memory blocks and create \nmajor problems in the environment. JavaScript provides an additional garbage collector tool \nthat automatically cleans the unused memory blocks. However, we can also deallocate \nmemory by using the \u2018delete\u2019 keyword just before the variable name \n \n \nAJAX for data exchange with server jQuery Framework \nShort Description of AJAX \nAjax is only a name given to a set of tools that were previously existing.  \nThe main part is XMLHttpRequest, a server-side object usable in JavaScript, that was \nimplemented in Internet Explorer since the 4.0 version.  \nTo get data on the server, XMLHttpRequestprovides two methods:  \n1. open: Creates a connection  \n2. send: Sends a request to the server  \nData furnished by the server will be found in the attributes of the XMLHttpRequestobject:  \n1. responseXmlfor an XML file, or  \n2. responseTextfor a plain text  \nTake note that a new XMLHttpRequestobject has to be created for each new data request.  \nWe have to wait for the data to be available to process it, and in this purpose, the state of \navailability of data is given by the readyStateattribute of XMLHttpRequest.  \nAttributes of XMLHttpRequest Class  \n1. readyState: The code successively changes value from 0 to 4  \n0: Not initialized", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1677, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ca7f1566-6e0a-4494-9f5f-03ace22ace6c": {"__data__": {"id_": "ca7f1566-6e0a-4494-9f5f-03ace22ace6c", "embedding": null, "metadata": {"page_label": "183", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3ad79ddd-31af-4a91-89d7-ecc2fa25dc51", "node_type": "4", "metadata": {"page_label": "183", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "9f264d3561b3a969663f56e517ed98361d69279b26509b2590e8e17857ee07d5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "183 | P a g e  \n \n1: Connection established \n2: Request received \n3: Answer in process  \n4: Finished \n2. status: 200 is OK  \n404 if the page is not found \n3. responseText: Holds loaded data as a string of characters.  \n4. responseXml: Holds an XML loaded file, DOM's method allows to extract data.  \n5. onreadystatechange: Property that takes a function as value that is invoked when the \nreadystatechangeevent is dispatched.  \nMethods of XMLHttpRequest Class  \n1. open(mode, url,boolean) : mode: type of request, GET or POST \nurl: the location of the file, with a path  \nboolean: true (asynchronous) / false (synchronous) \noptionally, a login and a password may be added to arguments \n2. send(\"string\"): string: POST data, null for a GET command  \n3. abort() : Cancels the current HTTP request  \n4. getAllResponseHeaders(): Retrieves the values of all the HTTP headers  \n5. getResponseHeader(string): Retrieves the value of an HTTP header from the response body \nstring: name of http header  \n6. setRequestHeader(name,value): Adds a new http header in the request \nname: name/identifier of the header \nvalue: value of the header \nUsing the Code  \nHere is a simple function 'AjaxRequest' which is implemented to perform the AJAX requests. \nJavaScript \nShrink \u25b2    \nfunctionAjaxRequest(ReadyHandler,URL,Method,Params,QueryString,HttpHeaders) { \nif (URL == null) { alert(\"Request URL is Empty\"); } \nelse { \n \nif (window.XMLHttpRequest) {// code for IE7+, Firefox, Chrome, Opera, Safari \nxmlhttp = newXMLHttpRequest(); \n        } \nelse {// code for IE6, IE5 \nxmlhttp = newActiveXObject(\"Microsoft.XMLHTTP\"); \n        } \n \n//An anonymous function is assigned to the event indicator.  \nxmlhttp.onreadystatechange = function() { \n \n//200 status means ok, otherwise some error code is returned, 404 for example", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1807, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e7e99d37-b7f7-48c5-a8ce-f64735718b3c": {"__data__": {"id_": "e7e99d37-b7f7-48c5-a8ce-f64735718b3c", "embedding": null, "metadata": {"page_label": "184", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "daf465f9-90c6-48fe-be55-3b0709bd1457", "node_type": "4", "metadata": {"page_label": "184", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "116757ab080bfbe7051de584877c8db73cb1a9c78fd1f70bd4151e32af8a6298", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "184 | P a g e  \n \n//The 4 state means for the response is ready and sent by the server.   \nif (xmlhttp.readyState == 4&&xmlhttp.status == 200) {    \nResponseText = xmlhttp.responseText;   //get text data in the response \nResponseXML = xmlhttp.responseXML; //get xml data in the response \nResponseHeaderJSON = xmlhttp.getResponseHeader \n  (\"CustomHeaderJSON\");  // Extract Data in http header \nResponseHeaders = xmlhttp.getAllResponseHeaders();   //Get a string  \n    //containing all http headers returned by server \n \n// Make all the results available in the ReadyHandler via prototyping. \nReadyHandler.prototype.ResponseText = ResponseText; \nReadyHandler.prototype.ResponseHeaderJSON = ResponseHeaderJSON; \nReadyHandler.prototype.ResponseXML = ResponseXML; \nReadyHandler.prototype.ResponseHeaders = ResponseHeaders; \n// Execute function passed as ReadyHandelr \nReadyHandler(); \n            }             \n        } \n \n//If querystring is provided Attach it to the url \n  if (QueryString != \"\") { \nvarQueryStringData = \"\"; \nfor (QueryStringAttributeinQueryString) { \nQueryStringData = QueryStringAttribute + \"=\" +  \n  QueryString[QueryStringAttribute] + \"&\" + QueryStringData; \n            } \nQueryStringData = QueryStringData.substring(0,  \n    QueryStringData.lastIndexOf('&')); \n            URL = URL + \"?\" + escape(QueryStringData);      //Here is where the  \n    //query string ia attached to the request url. \n        } \n \n//POST or GET URL of the script to execute.true for asynchronous  \n//(false for synchronous). \nxmlhttp.open(Method, URL, true); \nxmlhttp.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\"); \nif (HttpHeaders != \"\") { \nvarHttpHeadersData = \"\"; \nfor (HttpHeaderNameinHttpHeaders) { \nxmlhttp.setRequestHeader(HttpHeaderName,  \n  HttpHeaders[HttpHeaderName]);  // Here the custom headers are added \n            }             \n        } \n \n //Post data provided then assemble it into single string to be posted to server \n if (Params != \"\") { \nvarParamsData = \"\"; \nfor (ParamNamein Params) { \nParamsData = ParamName + \"=\" + Params[ParamName] + \"&\" + ParamsData; \n            } \nParamsData = ParamsData.substring(0, ParamsData.lastIndexOf('&')); \n        } \n \nxmlhttp.send(ParamsData); //Send the request with the post data \n    } \n}  \n[You can find the complete implementation with sufficient comments in the source code.]", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 2368, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d8639129-579a-4ae8-b57c-5e83edeadf48": {"__data__": {"id_": "d8639129-579a-4ae8-b57c-5e83edeadf48", "embedding": null, "metadata": {"page_label": "185", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "416d1dc7-2a52-4cae-803b-3db1cc81dd0d", "node_type": "4", "metadata": {"page_label": "185", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "195ce85b30022ade79ef7eebfc55215540f66b6fddf7cfad969cb7822015d62d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "185 | P a g e  \n \nIt can give a more clear idea of using AJAX in your applications.  \nIn the demo application, you can test the 'AjaxRequest' function by changing the parameters \nthat are passed to it. \n \nActually all the code that is typed in the text box is executed as JavaScript code on click of \n'Execute' button.This is done using the eval() function. \nJavaScript \nFunctionCall = document.getElementById('FunctionCode').value; \neval(FunctionCall);  \nFunction Usage \nJavaScript \nfunctionAjaxRequest(ReadyHandler,URL,Method,Params,QueryString,HttpHeaders)  \nDescription  \n->ReadyHandler: Function to be called after successful completion of the AJAX request \nNote: On successful completion of the request, the result of the request will be available in the \nfunction passed as ReadyHandler. \nThe result of request will be in 4 variables, namely:  \n\uf0b7 ResponseText: Text response from server  \n\uf0b7 ResponseHeaderJSON: Custom HTTP Header String value  \nThis header string may contain a single string value or a you can also use a JSON format for \nmultiple values which then can be parsed in ReadyHandler(as shown in the example). \n\uf0b7 ResponseHeaders: String containing all Response HTTP Headers  \n\uf0b7 ResponseXML: XML response from server (XML object available only when the Response \ncontains a proper XML)", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1307, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c6fc7014-55cb-48f8-a593-cc6867ea757c": {"__data__": {"id_": "c6fc7014-55cb-48f8-a593-cc6867ea757c", "embedding": null, "metadata": {"page_label": "186", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d2d0a46d-ae2f-400e-944d-09347e4ae23c", "node_type": "4", "metadata": {"page_label": "186", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "cd3fbd37af1ba5877a9df929e7dfe6bfb34ca42bf2ba8288c5ea1cbc97d7fb5f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "186 | P a g e  \n \n->URL: This parameter takes the URL to which the request is to be sent  \n->Method: Method of request \"GET\"/\"POST\" \n->Params: POST data to be sent to server. Expects a JSON formatted name value pairs \n->QueryString: Data to be sent to the server as QueryString. Expects a JSON formatted name \nvalue pairs  \n->HttpHeaders: Data to be sent as HTTP Headers. Expects JSON formatted name value pairs  \nNote: While sending the data in headers, you have to take care only ASCII characters where charCode \nranging from 32 to 126 are sent or you may get unexpected results. See RFC documentation for \nHTTP. \nThe ReadyHandlercan contain the code which will dynamically change the contents of the \nwebpage based on the response data.  \nFor example, in the demo application, I have used 'ProcessRequest()' as the Ready handler \nwhich sets the response in the respective <Div>. \nJavaScript \nfunctionProcessRequest() { \n \n// // Assign the content to the form  \ndocument.getElementById('ResponseTextDiv').innerHTML = ResponseText; \n \ndocument.getElementById('ResponseXMLDiv').innerHTML = ResponseHeaders; \neval(\"var CustomHeaders = { \" + ResponseHeaderJSON + \"};\"); \nvar header; \nvarallHeaders = \"<br/>\"; \nif (CustomHeaders != \"\") { \nfor (header inCustomHeaders) { \nallHeaders = allHeaders + CustomHeaders[header] + \"<br/>\" \n        } \n    } \ndocument.getElementById('ResponseHeadersDiv').innerHTML = allHeaders; \n}  \nExample:  \nJavaScript \nAjaxRequest(ProcessRequest, 'Handler.ashx','POST', \n { Param1: 'Param1Value', Param2: 'Param2Value', Param3: 'Param3Value' }, \n { Query1: 'Q1', Query2: 'Q2', Query3: 'Q3' }, \n { Header1: 'H1', Header2: 'H2', Header3: 'H3' } \n    ); \nFor handling the client request, I have implemented a simple Generic Handler (.ashx). \nYou can access all the data (query string + Post Data + HTTP Headers) that is sent by the \nclient browser in AJAX request.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1889, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "10d81b5a-4d2f-413c-a2dd-644e348332e3": {"__data__": {"id_": "10d81b5a-4d2f-413c-a2dd-644e348332e3", "embedding": null, "metadata": {"page_label": "187", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a05c800f-72da-4322-a762-5100951c04be", "node_type": "4", "metadata": {"page_label": "187", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "7724ed72849bd83fc76315fc9449870e40fa232bbd7ba6e9a2e61ede7e12693c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "187 | P a g e  \n \nIn the Generic handler, the data is accessible via the context.Requestobject. \nThough you can access all the data together in context.Request.Params[], you can access the data \nseparately as follows: \n\uf0b7 Query String: context.Request.QueryString[[index/string]] \n\uf0b7 Http Headers: context.Request.Headers[[index/string]] \nIn the example application, what I have done is just echo back the data which is received in \nthe request along with a custom HTTP header added.  \nJavaScript \nforeach(string Param incontext.Request.Params) \n { \nParamsData =\"<br/>\" + Param + \" : \" +  \n context.Request.Params[Param].ToString() + ParamsData; \n } \ncontext.Response.Write(ParamsData);  \nThe above lines capture the data in the request and send it back in the response. \nFor adding an extra custom HTTP header in response:  \nC# \ncontext.Response.AddHeader(\"CustomHeaderJSON\", CustomHeaderJSON);  \nAs you see, the context.Responseobject is used to assemble the response which is to be sent \nback to the browser. \nDifferent methods of context.Response can be used to do this. \n'CustomHeaderJSON' can contain a string , but I have created a JSON format string for \nsupporting multiple values.The values are then parsed at client side using JavaScript.  \nI have just used string concatenate for creating it, but you can also use different JSON \nparsers/Encoders available at http://www.json.org/.  \nYou can also use JSON strings to exchange data through AJAX. It is sometimes better to use \nJSON than XML. Using JSON results in less bytes transferred than XML.  \nPoints of Interest  \nThis is a basic implementation of AJAX and the function can be tuned and modified \naccording to needs and reconfigurability.  \nHere is how the request and response looks like [HTTP request in Fiddler]:", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1784, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "931f22a4-2e67-4ce0-8fab-56bddb7453ed": {"__data__": {"id_": "931f22a4-2e67-4ce0-8fab-56bddb7453ed", "embedding": null, "metadata": {"page_label": "188", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d07f0cb2-ff49-4f57-b12a-ddf60b83a1c6", "node_type": "4", "metadata": {"page_label": "188", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "8f7f4c75e54c3242c59308788fa8ac14cdae1629b3b065a34cf9359c35a3e28c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "188 | P a g e  \n \n \n \njQuery Events \njQuery events are the actions that can be detected by your web application. They are used to \ncreate dynamic web pages. An event shows the exact moment when something happens.  \nThese are some examples of events. \n\uf0b7 A mouse click \n\uf0b7 An HTML form submission \n\uf0b7 A web page loading \n\uf0b7 A keystroke on the keyboard \n\uf0b7 Scrolling of the web page etc. \nThese events can be categorized on the basis their types: \nMouse Events \n\uf0b7 click \n\uf0b7 dblclick \n\uf0b7 mouseenter \n\uf0b7 mouseleave \nKeyboard Events \n\uf0b7 keyup \n\uf0b7 keydown \n\uf0b7 keypress", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 555, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f40ef031-918b-44b3-9673-68deec297b8a": {"__data__": {"id_": "f40ef031-918b-44b3-9673-68deec297b8a", "embedding": null, "metadata": {"page_label": "189", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "aa41df2c-0898-45e3-97b7-03d5aea41b9a", "node_type": "4", "metadata": {"page_label": "189", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "3de8379b59163b7c98ca6f6932c4fb575e354f748dacc204403853cdea5fb71b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "189 | P a g e  \n \nForm Events \n\uf0b7 submit \n\uf0b7 change \n\uf0b7 blur \n\uf0b7 focus \nDocument/Window Events \n\uf0b7 load \n\uf0b7 unload \n\uf0b7 scroll \n\uf0b7 resize \nNote: A term \"fires\" is generally used with events. For example: The click event fires in the moment \nyou press a key.  \nSyntax for event methods \nMost of the DOM events have an equivalent jQuery method. To assign a click events to all \nparagraph on a page, do this: \n1. $(\"p\").click ();   \nThe next step defines what should happen when the event fires. You must pass a function to \nthe event.                         \n               UNIT \u2013 III \n \nREACT JS \nReact Introduction \nReactJS is a declarative, efficient, and flexible JavaScript library for building reusable UI \ncomponents. It is an open-source, component-based front end library responsible only for the \nview layer of the application. It was created by Jordan Walke, who was a software engineer \nat Facebook. It was initially developed and maintained by Facebook and was later used in its \nproducts like WhatsApp&Instagram. Facebook developed ReactJS in 2011 in its newsfeed \nsection, but it was released to the public in the month of May 2013. \nToday, most of the websites are built using MVC (model view controller) architecture. In \nMVC architecture, React is the 'V' which stands for view, whereas the architecture is \nprovided by the Redux or Flux.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1350, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "951c8b05-8e18-409c-972c-c739e1cf18b7": {"__data__": {"id_": "951c8b05-8e18-409c-972c-c739e1cf18b7", "embedding": null, "metadata": {"page_label": "190", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "82673f8d-8a0c-4ffa-a97f-9ad79fed6cc7", "node_type": "4", "metadata": {"page_label": "190", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "9523f5519e45a3ca674c79e5ad4b0be5ae29f504de9c97d3f8f527ede6045a1c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "190 | P a g e  \n \nA ReactJS application is made up of multiple components, each component responsible for \noutputting a small, reusable piece of HTML code. The components are the heart of all React \napplications. These Components can be nested with other components to allow complex \napplications to be built of simple building blocks. ReactJS uses virtual DOM based \nmechanism to fill data in HTML DOM. The virtual DOM works fast as it only changes \nindividual DOM elements instead of reloading complete DOM every time. \nTo create React app, we write React components that correspond to various elements. We \norganize these components inside higher level components which define the application \nstructure. For example, we take a form that consists of many elements like input fields, \nlabels, or buttons. We can write each element of the form as React components, and then we \ncombine it into a higher-level component, i.e., the form component itself. The form \ncomponents would specify the structure of the form along with elements inside of it. \nWhy learn ReactJS? \nToday, many JavaScript frameworks are available in the market(like angular, node), but still, \nReact came into the market and gained popularity amongst them. The previous frameworks \nfollow the traditional data flow structure, which uses the DOM (Document Object Model). \nDOM is an object which is created by the browser each time a web page is loaded. It \ndynamically adds or removes the data at the back end and when any modifications were done, \nthen each time a new DOM is created for the same page. This repeated creation of DOM \nmakes unnecessary memory wastage and reduces the performance of the application. \nTherefore, a new technology ReactJS framework invented which remove this drawback. \nReactJS allows you to divide your entire application into various components. ReactJS still \nused the same traditional data flow, but it is not directly operating on the browser's Document \nObject Model (DOM) immediately; instead, it operates on a virtual DOM. It means rather \nthan manipulating the document in a browser after changes to our data, it resolves changes on \na DOM built and run entirely in memory. After the virtual DOM has been updated, React \ndetermines what changes made to the actual browser's DOM. The React Virtual DOM exists \nentirely in memory and is a representation of the web browser's DOM. Due to this, when we \nwrite a React component, we did not write directly to the DOM; instead, we are writing \nvirtual components that react will turn into the DOM.  \nReact Router and Single Page Applications \nPreparing the React App \nInstalling the create-react-app Package \nIf you've ever had the chance to try React, you've probably heard about the create-react-app \npackage, which makes it super easy to start with a React development environment. \nIn this tutorial, we will use this package to initiate our React app. \nSo, first of all, make sure you have Node.js installed on your computer. It will also install", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 3008, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1dd33ca4-5082-490e-9aba-0a35935e812e": {"__data__": {"id_": "1dd33ca4-5082-490e-9aba-0a35935e812e", "embedding": null, "metadata": {"page_label": "191", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "eac979ef-1d4f-435f-a3a3-6548688be4af", "node_type": "4", "metadata": {"page_label": "191", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "8bef552d433d2df0ef5ea0fcf6113973ba4721fb996a49da7490ca75e41ae53f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "191 | P a g e  \n \nnpm for you. \nIn your terminal, run npm install -g create-react-app. This will globally install create-react-app \non your computer. \nOnce it is done, you can verify whether it is there by typing create-react-app -V. \nCreating the React Project \nNow it's time to build our React project. Just run create-react-app multi-page-app. You can, of \ncourse, replace multi-page-app with anything you want. \nNow, create-react-app will create a folder named multi-page-app. Just type cd multi-page-app \nto change directory, and now run npm start to initialize a local server. \nThat's all. You have a React app running on your local server. \nNow it's time to clean the default files and prepare our application. \nIn your src folder, delete everything but App.js and index.js. Then open index.js and replace the \ncontent with the code below. \nimport React from'react'; \n \nimportReactDOMfrom'react-dom'; \n \nimport App from'./App'; \n \nReactDOM.render(<App />, document.getElementById('root')); \n \nI basically deleted the registerServiceWorker related lines and also the import './index.css'; line. \nAlso, replace your App.js file with the code below. \nimport React, { Component } from'react'; \n \nclass App extends Component { \n \nrender() {", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1246, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4bb2393b-26e9-4e0b-8817-8d2c0dfb15f4": {"__data__": {"id_": "4bb2393b-26e9-4e0b-8817-8d2c0dfb15f4", "embedding": null, "metadata": {"page_label": "192", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "14283408-202d-46c8-b8b9-974286ca17e0", "node_type": "4", "metadata": {"page_label": "192", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "ae34d79917fa60646ad7309d2b15e235dbbd2ed08118ac9ceb2a5e5008081377", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "192 | P a g e  \n \nreturn ( \n \n<div className=\"App\"> \n \n</div> \n \n \n    ); \n \n  } \n \n} \n \nexportdefault App; \n \nNow we will install the required modules. \nIn your terminal, type the following commands to install the react-router and react-\ntransition-group modules respectively. \nnpm install react-router-dom --save \nnpm install react-transition-group@1.x --save \nAfter installing the packages, you can check the package.json file inside your main project \ndirectory to verify that the modules are included under dependencies. \nRouter Components \nThere are basically two different router options: HashRouter and BrowserRouter. \nAs the name implies, HashRouter uses hashes to keep track of your links, and it is suitable \nfor static servers. On the other hand, if you have a dynamic server, it is a better option to \nuse BrowserRouter, considering the fact that your URLs will be prettier. \nOnce you decide which one you should use, just go ahead and add the component to \nyour index.js file. \nimport { HashRouter } from 'react-router-dom' \nThe next thing is to wrap our <App> component with the router component.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1115, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "bb253e7c-c58a-41d5-b501-ca8fc2c5d12f": {"__data__": {"id_": "bb253e7c-c58a-41d5-b501-ca8fc2c5d12f", "embedding": null, "metadata": {"page_label": "193", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d984b114-6b0d-4e7e-9b58-701adff09c52", "node_type": "4", "metadata": {"page_label": "193", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "201b6c96e51e0422f2e93a2f8c7825b3b3baad9aff3cbed08f7693d1f59f5c44", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "193 | P a g e  \n \nSo your final index.js file should look like this: \nimport React from'react'; \n \nimportReactDOMfrom'react-dom'; \n \nimport{ HashRouter } from'react-router-dom' \n \nimport App from'./App'; \n \nReactDOM.render(<HashRouter><App/></HashRouter>, document.getElementById('root')); \n \n \nIf you're using a dynamic server and prefer to use BrowserRouter, the only difference would \nbe importing the BrowserRouter and using it to wrap the <App> component. \nBy wrapping our <App> component, we are serving the history object to our application, and \nthus other react-router components can communicate with each other. \nInside <App/> Component \nInside our <App> component, we will have two components named <Menu> and <Content>. As \nthe names imply, they will hold the navigation menu and displayed content respectively. \nCreate a folder named \"components\" in your src directory, and then create the Menu.js \nand Content.js files. \nMenu.js \nLet's fill in our Menu.js component. \nIt will be a stateless functional component since we don't need states and life-cycle hooks. \nimport React from'react' \n \nconst Menu = () =>{ \n \nreturn(", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1138, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "dfc16d08-0ed4-4ad1-86f6-f47632506fe9": {"__data__": {"id_": "dfc16d08-0ed4-4ad1-86f6-f47632506fe9", "embedding": null, "metadata": {"page_label": "194", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4ab87cbc-38d8-444e-b299-4760ecc95850", "node_type": "4", "metadata": {"page_label": "194", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "8f09768e15c3175bf873a245001b6790967eb7604d8febbb5f91446bc1269851", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "194 | P a g e  \n \n<ul> \n \n<li>Home</li> \n \n \n<li>Works</li> \n \n \n<li>About</li> \n \n \n</ul> \n \n \n  ) \n \n} \n \nexportdefault Menu \n \nHere we have a <ul> tag with <li> tags, which will be our links. \nNow add the following line to your Menu component. \nimport { Link } from 'react-router-dom' \nAnd then wrap the content of the <li> tags with the <Link> component. \nThe <Link> component is essentially a react-router component acting like an <a> tag, but it \ndoes not reload your page with a new target link. \nAlso, if you style your a tag in CSS, you will notice that the <Link> component gets the same \nstyling. \nNote that there is a more advanced version of the <Link> component, which is <NavLink>. This \noffers you extra features so that you can style the active links. \nNow we need to define where each link will navigate. For this purpose, the <Link> component \nhas a to prop. \nimport React from'react'", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 907, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "209f5f9f-ab69-4447-ba2b-5cdee0eb99ac": {"__data__": {"id_": "209f5f9f-ab69-4447-ba2b-5cdee0eb99ac", "embedding": null, "metadata": {"page_label": "195", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "18ac86b8-11df-4eb6-af7c-9d9c01d214e0", "node_type": "4", "metadata": {"page_label": "195", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "86ff863e9acb8994f14eb644bfe7f735f393552c60cdea3aec7bcf85b06f13ae", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "195 | P a g e  \n \n \nimport{ Link } from'react-router-dom' \n \nconst Menu = () =>{ \n \nreturn( \n \n<ul> \n \n<li><Link to=\"/\">Home</Link></li> \n \n<li><Link to=\"/works\">Works</Link></li> \n \n<li><Link to=\"/about\">About</Link></li> \n \n</ul> \n \n \n  ) \n \n} \n \nexportdefault Menu \n \nContent.js \nInside our <Content> component, we will define the Routes to match the Links. \nWe need the Switch and Route components from react-router-dom. So, first of all, import \nthem. \nimport { Switch, Route } from 'react-router-dom' \nSecond of all, import the components that we want to route to. These are the Home, Works \nand About components for our example. Assuming you have already created those \ncomponents inside the components folder, we also need to import them.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 750, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0955cedd-3b78-476d-b453-0017a284f1c6": {"__data__": {"id_": "0955cedd-3b78-476d-b453-0017a284f1c6", "embedding": null, "metadata": {"page_label": "196", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7858349c-b77c-472b-8df6-a26066c7d451", "node_type": "4", "metadata": {"page_label": "196", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "4a0119cf4663d45de7271e27b3c0b4c3ef11eec055f4b58fd9c1051aefbcd172", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "196 | P a g e  \n \nimport Home from './Home' \nimport Works from './Works' \nimport About from './About' \nThose components can be anything. I just defined them as stateless functional components \nwith minimum content. An example template is below. You can use this for all three \ncomponents, but just don't forget to change the names accordingly. \nimport React from'react' \n \nconst Home = () =>{ \n \nreturn( \n \n<div> \n \n      Home \n \n</div> \n \n \n  ) \n \n} \n \nexportdefault Home \n \nSwitch \nWe use the <Switch> component to group our <Route> components. Switch looks for all \nthe Routes and then returns the first matching one. \nRoute \nRoutes are components calling your target component if it matches the path prop. \nThe final version of our Content.js file looks like this:", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 772, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7ea1c266-9a26-40b1-84b5-095bf1cb85bb": {"__data__": {"id_": "7ea1c266-9a26-40b1-84b5-095bf1cb85bb", "embedding": null, "metadata": {"page_label": "197", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "93ac0b73-2e13-44ca-8ec5-b1e161740190", "node_type": "4", "metadata": {"page_label": "197", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "82b273868deed439587b4ea6597771a780153b439850d9d9a3305ca5e6918bf1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "197 | P a g e  \n \nimport React from'react' \n \nimport{ Switch, Route } from'react-router-dom' \n \nimport Home from'./Home' \n \nimport Works from'./Works' \n \nimport About from'./About' \n \nconst Content = () =>{ \n \nreturn( \n \n<Switch> \n \n<Route exact path=\"/\" component={Home}/> \n \n \n<Route path=\"/works\" component={Works}/> \n \n \n<Route path=\"/about\" component={About}/> \n \n \n</Switch> \n \n \n  ) \n \n} \n \nexportdefault Content", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 423, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d5983fe0-16c7-4f37-9ee3-f103f3800fa1": {"__data__": {"id_": "d5983fe0-16c7-4f37-9ee3-f103f3800fa1", "embedding": null, "metadata": {"page_label": "198", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a5f64832-b415-4443-9e20-c17ca0ba0529", "node_type": "4", "metadata": {"page_label": "198", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "436169b32f71242322458ab2d69375323016e7212cb3556bbde8974f30775d29", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "198 | P a g e  \n \nNotice that the extra exact prop is required for the Home component, which is the main \ndirectory. Using exactforces the Route to match the exact pathname. If it's not used, other \npathnames starting with / would also be matched by the Home component, and for each link, \nit would only display the Home component. \nNow when you click the menu links, your app should be switching the content. \nAnimating the Route Transitions \nSo far, we have a working router system. Now we will animate the route transitions. In order \nto achieve this, we will use the react-transition-group module. \nWe will be animating the mounting state of each component. When you route different \ncomponents with the Route component inside Switch, you are essentially mounting and \nunmounting different components accordingly. \nWe will use react-transition-group in each component we want to animate. So you can have \na different mounting animation for each component. I will only use one animation for all of \nthem. \nAs an example, let's use the <Home> component. \nFirst, we need to import CSSTransitionGroup. \nimport { CSSTransitionGroup } from 'react-transition-group' \nThen you need to wrap your content with it. \nSince we are dealing with the mounting state of the component, we enable transitionAppear and \nset a timeout for it. We also disable transitionEnter and transitionLeave, since these are only valid \nonce the component is mounted. If you are planning to animate any children of the \ncomponent, you have to use them. \nLastly, add the specific transitionName so that we can refer to it inside the CSS file. \nimport React from'react' \n \nimport{ CSSTransitionGroup } from'react-transition-group' \n \nimport'../styles/homeStyle.css' \n \nconst Home = () =>{", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1760, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "161db5f2-736f-49ba-9a3c-96bbbcc5a29e": {"__data__": {"id_": "161db5f2-736f-49ba-9a3c-96bbbcc5a29e", "embedding": null, "metadata": {"page_label": "199", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bbe439c8-c461-4e00-86a5-76118d74415f", "node_type": "4", "metadata": {"page_label": "199", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "4f75a7ff682ec84c7454426ff38eda9e34e2b552b9dba24af28ad4e1c61aab27", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "199 | P a g e  \n \nreturn( \n \n<CSSTransitionGroup \n \ntransitionName=\"homeTransition\" \n \ntransitionAppear={true} \n \ntransitionAppearTimeout={500} \n \ntransitionEnter={false} \n \ntransitionLeave={false}> \n \n<div> \n \n        Home \n \n</div> \n \n \n</CSSTransitionGroup> \n \n \n  ) \n \n} \n \nexportdefault Home \n \nWe also imported a CSS file, where we define the CSS transitions. \n.homeTransition-appear{", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 394, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "29ea5e7c-ab99-4de8-974a-5fff254a393e": {"__data__": {"id_": "29ea5e7c-ab99-4de8-974a-5fff254a393e", "embedding": null, "metadata": {"page_label": "200", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7aa0df53-e9da-4010-b4b1-d983e02c63ed", "node_type": "4", "metadata": {"page_label": "200", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "1e390c244de523ec25218ef5a7044166617108c1e8eb13bfb17769179371db09", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "200 | P a g e  \n \n \nopacity: 0; \n \n} \n \n.homeTransition-appear.homeTransition-appear-active{ \n \nopacity: 1; \n \ntransition: all .5s ease-in-out; \n \n} \n \nIf you refresh the page, you should see the fade-in effect of the Home component. \nIf you apply the same procedure to all the other routed components, you will see their \nindividual animations when you change the content with your Menu. \nConclusion \nIn this tutorial, we covered the react-router-dom and react-transition-group modules. \nHowever, there's more to both modules than we covered in this tutorial. Here is a working \ndemo of what was covered. \nSo, to learn more features, always go through the documentation of the modules you are \nusing. \nOver the last couple of years, React has grown in popularity. In fact, we have a number of \nitems in the marketplace that are available for purchase, review, implementation, and so on. If \nyou\u2019re looking for additional resources around React, don\u2019t hesitate to check them out. \nReact Forms \nHTML form elements work a bit differently from other DOM elements in React, because \nform elements naturally keep some internal state. For example, this form in plain HTML \naccepts a single name: \n<form> \n<label> \n    Name: \n<input type=\"text\" name=\"name\" />", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1256, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "382dfbc1-305e-4f23-8de7-b00df8761d8d": {"__data__": {"id_": "382dfbc1-305e-4f23-8de7-b00df8761d8d", "embedding": null, "metadata": {"page_label": "201", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a6651732-3dcf-43fd-b7ed-029796f62563", "node_type": "4", "metadata": {"page_label": "201", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "4a8143ec4bcd0d5b672b80ccb1adae12f4b3c21ceacf6b3367c02ed78db66aa4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "201 | P a g e  \n \n</label> \n<input type=\"submit\" value=\"Submit\" /> \n</form> \nThis form has the default HTML form behavior of browsing to a new page when the user \nsubmits the form. If you want this behavior in React, it just works. But in most cases, it\u2019s \nconvenient to have a JavaScript function that handles the submission of the form and has \naccess to the data that the user entered into the form. The standard way to achieve this is with \na technique called \u201ccontrolled components\u201d. \nControlled Components  \nIn HTML, form elements such as <input>, <textarea>, and <select> typically maintain their own \nstate and update it based on user input. In React, mutable state is typically kept in the state \nproperty of components, and only updated with setState(). \nWe can combine the two by making the React state be the \u201csingle source of truth\u201d. Then the \nReact component that renders a form also controls what happens in that form on subsequent \nuser input. An input form element whose value is controlled by React in this way is called a \n\u201ccontrolled component\u201d. \nFor example, if we want to make the previous example log the name when it is submitted, we \ncan write the form as a controlled component: \nclassNameFormextendsReact.Component{ \nconstructor(props){ \nsuper(props); \nthis.state={value:''}; \nthis.handleChange=this.handleChange.bind(this); \nthis.handleSubmit=this.handleSubmit.bind(this); \n} \n \nhandleChange(event){this.setState({value:event.target.value});} \nhandleSubmit(event){ \nalert('A name was submitted: '+this.state.value); \nevent.preventDefault(); \n} \n \nrender(){ \nreturn( \n<form onSubmit={this.handleSubmit}><label> \n          Name: \n<input type=\"text\" value={this.state.value} onChange={this.handleChange} /></label> \n<input type=\"submit\" value=\"Submit\" /> \n</form> \n); \n} \n} \nTry it on CodePen \nSince the value attribute is set on our form element, the displayed value will always be \nthis.state.value, making the React state the source of truth. Since handleChange runs on every \nkeystroke to update the React state, the displayed value will update as the user types.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 2096, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1077cd10-ffd4-41b2-9d07-c3ea87af26eb": {"__data__": {"id_": "1077cd10-ffd4-41b2-9d07-c3ea87af26eb", "embedding": null, "metadata": {"page_label": "202", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7df2878c-1bb5-4a0a-88a5-36436e70df85", "node_type": "4", "metadata": {"page_label": "202", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "87fa88ff59971bf01e7e378caa75a15d767e690db9cec19d6067fa42419fe54a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "202 | P a g e  \n \nWith a controlled component, the input\u2019s value is always driven by the React state. While this \nmeans you have to type a bit more code, you can now pass the value to other UI elements too, \nor reset it from other event handlers. \nThe textarea Tag  \nIn HTML, a <textarea> element defines its text by its children: \n<textarea> \n  Hello there, this is some text in a text area \n</textarea> \nIn React, a <textarea> uses a value attribute instead. This way, a form using a <textarea> can be \nwritten very similarly to a form that uses a single-line input: \nclassEssayFormextendsReact.Component{ \nconstructor(props){ \nsuper(props); \nthis.state={value:'Please write an essay about your favorite DOM element.'}; \nthis.handleChange=this.handleChange.bind(this); \nthis.handleSubmit=this.handleSubmit.bind(this); \n} \n \nhandleChange(event){this.setState({value:event.target.value});} \nhandleSubmit(event){ \nalert('An essay was submitted: '+this.state.value); \nevent.preventDefault(); \n} \n \nrender(){ \nreturn( \n<form onSubmit={this.handleSubmit}> \n<label> \n          Essay: \n<textarea value={this.state.value} onChange={this.handleChange} /></label> \n<input type=\"submit\" value=\"Submit\" /> \n</form> \n); \n} \n} \nNotice that this.state.value is initialized in the constructor, so that the text area starts off with \nsome text in it. \nThe select Tag  \nIn HTML, <select> creates a drop-down list. For example, this HTML creates a drop-down list \nof flavors: \n<select> \n<option value=\"grapefruit\">Grapefruit</option> \n<option value=\"lime\">Lime</option> \n<option selected value=\"coconut\">Coconut</option> \n<option value=\"mango\">Mango</option>", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1644, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e86b8929-dc2c-47ac-a9d0-c9c478514323": {"__data__": {"id_": "e86b8929-dc2c-47ac-a9d0-c9c478514323", "embedding": null, "metadata": {"page_label": "203", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a81c50a3-f9cc-4743-a3a7-820c92335054", "node_type": "4", "metadata": {"page_label": "203", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "85e712ddb83fd5a7fc77dabdcfd79326872d2a9445a91fa23ddb7b6df245e2f1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "203 | P a g e  \n \n</select> \nNote that the Coconut option is initially selected, because of the selected attribute. React, \ninstead of using this selected attribute, uses a value attribute on the root select tag. This is more \nconvenient in a controlled component because you only need to update it in one place. For \nexample: \nclassFlavorFormextendsReact.Component{ \nconstructor(props){ \nsuper(props); \nthis.state={value:'coconut'}; \nthis.handleChange=this.handleChange.bind(this); \nthis.handleSubmit=this.handleSubmit.bind(this); \n} \n \nhandleChange(event){this.setState({value:event.target.value});} \nhandleSubmit(event){ \nalert('Your favoriteflavor is: '+this.state.value); \nevent.preventDefault(); \n} \n \nrender(){ \nreturn( \n<form onSubmit={this.handleSubmit}> \n<label> \n          Pick your favoriteflavor: \n<select value={this.state.value} onChange={this.handleChange}><option \nvalue=\"grapefruit\">Grapefruit</option> \n<option value=\"lime\">Lime</option> \n<option value=\"coconut\">Coconut</option> \n<option value=\"mango\">Mango</option> \n</select> \n</label> \n<input type=\"submit\" value=\"Submit\" /> \n</form> \n); \n} \n} \nTry it on CodePen \nOverall, this makes it so that <input type=\"text\">, <textarea>, and <select> all work very similarly - \nthey all accept a value attribute that you can use to implement a controlled component. \nNote \nYou can pass an array into the value attribute, allowing you to select multiple options in a \nselect tag: \n<select multiple={true} value={['B', 'C']}> \nThe file input Tag  \nIn HTML, an <input type=\"file\"> lets the user choose one or more files from their device storage \nto be uploaded to a server or manipulated by JavaScript via the File API.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1684, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7aaaece6-1122-4ff9-a607-7acdee323849": {"__data__": {"id_": "7aaaece6-1122-4ff9-a607-7acdee323849", "embedding": null, "metadata": {"page_label": "204", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c70825b3-ac02-4d9a-a32c-4b0dd2a5f234", "node_type": "4", "metadata": {"page_label": "204", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "aebdd53b929edc17cd7812a37f0983c90e1acd2e4730883f032653aad851fd49", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "204 | P a g e  \n \n<input type=\"file\" /> \nBecause its value is read-only, it is an uncontrolled component in React. It is discussed \ntogether with other uncontrolled components later in the documentation. \nHandling Multiple Inputs  \nWhen you need to handle multiple controlled input elements, you can add a name attribute to \neach element and let the handler function choose what to do based on the value of \nevent.target.name. \nFor example: \nclassReservationextendsReact.Component{ \nconstructor(props){ \nsuper(props); \nthis.state={ \nisGoing:true, \nnumberOfGuests:2 \n}; \n \nthis.handleInputChange=this.handleInputChange.bind(this); \n} \n \nhandleInputChange(event){ \nconst target =event.target; \nconst value =target.type==='checkbox'?target.checked:target.value; \nconst name = target.name; \nthis.setState({ \n[name]: value}); \n} \n \nrender(){ \nreturn( \n<form> \n<label> \n          Is going: \n<input \nname=\"isGoing\"            type=\"checkbox\" \n            checked={this.state.isGoing} \nonChange={this.handleInputChange} /> \n</label> \n<br /> \n<label> \n          Number of guests: \n<input \nname=\"numberOfGuests\"            type=\"number\" \n            value={this.state.numberOfGuests} \nonChange={this.handleInputChange} /> \n</label> \n</form> \n); \n} \n} \nTry it on CodePen", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1263, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3724ad33-3d7a-4105-a16b-b6e5cb5e8ee8": {"__data__": {"id_": "3724ad33-3d7a-4105-a16b-b6e5cb5e8ee8", "embedding": null, "metadata": {"page_label": "205", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fe366e48-557e-4c14-9205-1081e4638421", "node_type": "4", "metadata": {"page_label": "205", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "f9e861fc00e7bcc2ba9333c7d6894604ae822c6e4a2fdb8944ecac3b404a430a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "205 | P a g e  \n \nNote how we used the ES6 computed property name syntax to update the state key \ncorresponding to the given input name: \nthis.setState({ \n[name]: value}); \nIt is equivalent to this ES5 code: \nvarpartialState={}; \npartialState[name]=value;this.setState(partialState); \nAlso, since setState() automatically merges a partial state into the current state, we only needed \nto call it with the changed parts. \nControlled Input Null Value  \nSpecifying the value prop on a controlled component prevents the user from changing the \ninput unless you desire so. If you\u2019ve specified a value but the input is still editable, you may \nhave accidentally set value to undefined or null. \nThe following code demonstrates this. (The input is locked at first but becomes editable after \na short delay.) \nReactDOM.createRoot(mountNode).render(<input value=\"hi\" />); \n \nsetTimeout(function(){ \nReactDOM.createRoot(mountNode).render(<input value={null} />); \n},1000); \nAlternatives to Controlled Components  \nIt can sometimes be tedious to use controlled components, because you need to write an event \nhandler for every way your data can change and pipe all of the input state through a React \ncomponent. This can become particularly annoying when you are converting a preexisting \ncodebase to React, or integrating a React application with a non-React library. In these \nsituations, you might want to check out uncontrolled components, an alternative technique for \nimplementing input forms. \nIntroduction to Redux \nRedux Toolkit \nRedux Toolkit is our official recommended approach for writing Redux logic. It wraps \naround the Redux core, and contains packages and functions that we think are essential for \nbuilding a Redux app. Redux Toolkit builds in our suggested best practices, simplifies most \nRedux tasks, prevents common mistakes, and makes it easier to write Redux applications. \nRTK includes utilities that help simplify many common use cases, including store setup, \ncreating reducers and writing immutable update logic, and even creating entire \"slices\" of \nstate at once.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 2087, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f58719b9-4f75-494b-904d-94001e4c3859": {"__data__": {"id_": "f58719b9-4f75-494b-904d-94001e4c3859", "embedding": null, "metadata": {"page_label": "206", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "65a54a9c-2772-4248-ae98-3ee4d1074139", "node_type": "4", "metadata": {"page_label": "206", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "6352f2e9cbd5fca01aa9f24ed544837575d56b491e56440bc487d4ab0d53dbd3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "206 | P a g e  \n \nWhether you're a brand new Redux user setting up your first project, or an experienced user \nwho wants to simplify an existing application, Redux Toolkit can help you make your Redux \ncode better. \nRedux Toolkit is available as a package on NPM for use with a module bundler or in a Node \napplication: \n# NPM \nnpminstall @reduxjs/toolkit \n \n# Yarn \nyarnadd @reduxjs/toolkit \nCreate a React Redux App \nThe recommended way to start new apps with React and Redux is by using the official \nRedux+JS template or Redux+TS template for Create React App, which takes advantage of \nRedux Toolkit and React Redux's integration with React components. \n# Redux + Plain JS template \nnpx create-react-app my-app --template redux \n \n# Redux + TypeScript template \nnpx create-react-app my-app --template redux-typescript \nRedux Core \nThe Redux core library is available as a package on NPM for use with a module bundler or in \na Node application: \n# NPM \nnpminstall redux \n \n# Yarn \nyarnadd redux \nIt is also available as a precompiled UMD package that defines a window.Redux global \nvariable. The UMD package can be used as a <script> tag directly. \nFor more details, see the Installation page. \nBasic Example \nThe whole global state of your app is stored in an object tree inside a single store. The only \nway to change the state tree is to create an action, an object describing what happened, and \ndispatch it to the store. To specify how state gets updated in response to an action, you write \npure reducer functions that calculate a new state based on the old state and the action. \nimport{ createStore } from'redux' \n \n/** \n * This is a reducer - a function that takes a current state value and an \n * action object describing \"what happened\", and returns a new state value. \n * A reducer's function signature is: (state, action) =>newState", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1853, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ae26c119-47b1-45b4-a448-74dba839b47d": {"__data__": {"id_": "ae26c119-47b1-45b4-a448-74dba839b47d", "embedding": null, "metadata": {"page_label": "207", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6a9ab7ee-d36c-40c0-be21-ef840fbca72d", "node_type": "4", "metadata": {"page_label": "207", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "04296e0d64c2302b608fe97aaf001048715d5d6763cc70835b9cd02d86aba8fe", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "207 | P a g e  \n \n * \n * The Redux state should contain only plain JS objects, arrays, and primitives. \n * The root state value is usually an object. It's important that you should \n * not mutate the state object, but return a new object if the state changes. \n * \n * You can use any conditional logic you want in a reducer. In this example, \n * we use a switch statement, but it's not required. \n */ \nfunctioncounterReducer(state = { value: 0 }, action) { \nswitch (action.type) { \ncase'counter/incremented': \nreturn { value: state.value + 1 } \ncase'counter/decremented': \nreturn { value: state.value - 1 } \ndefault: \nreturn state \n  } \n} \n \n// Create a Redux store holding the state of your app. \n// Its API is { subscribe, dispatch, getState }. \nlet store = createStore(counterReducer) \n \n// You can use subscribe() to update the UI in response to state changes. \n// Normally you'd use a view binding library (e.g. React Redux) rather than subscribe() directly. \n// There may be additional use cases where it's helpful to subscribe as well. \n \nstore.subscribe(() => console.log(store.getState())) \n \n// The only way to mutate the internal state is to dispatch an action. \n// The actions can be serialized, logged or stored and later replayed. \nstore.dispatch({ type: 'counter/incremented' }) \n// {value: 1} \nstore.dispatch({ type: 'counter/incremented' }) \n// {value: 2} \nstore.dispatch({ type: 'counter/decremented' }) \n// {value: 1} \nInstead of mutating the state directly, you specify the mutations you want to happen with \nplain objects called actions. Then you write a special function called a reducer to decide how \nevery action transforms the entire application's state. \nIn a typical Redux app, there is just a single store with a single root reducing function. As \nyour app grows, you split the root reducer into smaller reducers independently operating on \nthe different parts of the state tree. This is exactly like how there is just one root component \nin a React app, but it is composed out of many small components. \nThis architecture might seem like a lot for a counter app, but the beauty of this pattern is how \nwell it scales to large and complex apps. It also enables very powerful developer tools, \nbecause it is possible to trace every mutation to the action that caused it. You can record user \nsessions and reproduce them just by replaying every action. \nRedux Toolkit Example \nRedux Toolkit simplifies the process of writing Redux logic and setting up the store. With \nRedux Toolkit, that same logic looks like:", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 2542, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f16596f9-8be3-4906-96fe-1fc64316d570": {"__data__": {"id_": "f16596f9-8be3-4906-96fe-1fc64316d570", "embedding": null, "metadata": {"page_label": "208", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2c9fa6b5-0991-4eb7-be61-78c2938cd45f", "node_type": "4", "metadata": {"page_label": "208", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "ec5ff3ef5d247f3e6a62312712e178f9be1bfa09b08ae8566288b9b7d41a5fa8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "208 | P a g e  \n \nimport{ createSlice, configureStore } from'@reduxjs/toolkit' \n \nconstcounterSlice = createSlice({ \nname: 'counter', \ninitialState: { \nvalue: 0 \n  }, \nreducers: { \nincremented: state => { \n// Redux Toolkit allows us to write \"mutating\" logic in reducers. It \n// doesn't actually mutate the state because it uses the Immer library, \n// which detects changes to a \"draft state\" and produces a brand new \n// immutable state based off those changes \nstate.value += 1 \n    }, \ndecremented: state => { \nstate.value -= 1 \n    } \n  } \n}) \n \nexportconst { incremented, decremented } = counterSlice.actions \n \nconst store = configureStore({ \nreducer: counterSlice.reducer \n}) \n \n// Can still subscribe to the store \nstore.subscribe(() => console.log(store.getState())) \n \n// Still pass action objects to `dispatch`, but they're created for us \nstore.dispatch(incremented()) \n// {value: 1} \nstore.dispatch(incremented()) \n// {value: 2} \nstore.dispatch(decremented()) \n// {value: 1} \nRedux Toolkit allows us to write shorter logic that's easier to read, while still following the \nsame Redux behavior and data flow. \nLearn Redux \nWe have a variety of resources available to help you learn Redux. \nRedux Essentials Tutorial \nThe Redux Essentials tutorial is a \"top-down\" tutorial that teaches \"how to use Redux the \nright way\", using our latest recommended APIs and best practices. We recommend starting \nthere. \nRedux Fundamentals Tutorial \nThe Redux Fundamentals tutorial is a \"bottom-up\" tutorial that teaches \"how Redux \nworks\" from first principles and without any abstractions, and why standard Redux usage", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1620, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f0287f81-6f0f-4f79-ae9b-722d643d78b7": {"__data__": {"id_": "f0287f81-6f0f-4f79-ae9b-722d643d78b7", "embedding": null, "metadata": {"page_label": "209", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bf407efa-1dea-4775-ad5b-0d965218950e", "node_type": "4", "metadata": {"page_label": "209", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "4541f51cd557ff7ddaeaaae78ed45c598d62203bd81d7b7cbd669895b7d43baf", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "209 | P a g e  \n \npatterns exist. \nRedux - Data Flow \nRedux - Data Flow \nRedux follows the unidirectional data flow. It means that your application data will follow in \none-way binding data flow. As the application grows & becomes complex, it is hard to \nreproduce issues and add new features if you have no control over the state of your \napplication. \nRedux reduces the complexity of the code, by enforcing the restriction on how and when state \nupdate can happen. This way, managing updated states is easy. We already know about the \nrestrictions as the three principles of Redux. Following diagram will help you understand \nRedux data flow better \u2212 \n \n\uf0b7 An action is dispatched when a user interacts with the application. \n\uf0b7 The root reducer function is called with the current state and the dispatched action. \nThe root reducer may divide the task among smaller reducer functions, which \nultimately returns a new state. \n\uf0b7 The store notifies the view by executing their callback functions. \n\uf0b7 The view can retrieve updated state and re-render again. \nClient-Server Communication", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1087, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "266d07d5-acfd-4aa1-9b13-fd8b57720e36": {"__data__": {"id_": "266d07d5-acfd-4aa1-9b13-fd8b57720e36", "embedding": null, "metadata": {"page_label": "210", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ed5f81a6-8811-4c56-897b-d2a32890474b", "node_type": "4", "metadata": {"page_label": "210", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "c464482c48e1fe0b31de700d16ba0d9dcacfdc1b660b150e4d241b7e6f295706", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "210 | P a g e  \n \nLet's expand the application so that the notes are stored in the backend. We'll use json-server, \nfamiliar from part 2. \nThe initial state of the database is stored in the file db.json, which is placed in the root of the \nproject: \n{ \n  \"notes\": [ \n    { \n      \"content\": \"the app state is in redux store\", \n      \"important\": true, \n      \"id\": 1 \n    }, \n    { \n      \"content\": \"state changes are made with actions\", \n      \"important\": false, \n      \"id\": 2 \n    } \n  ] \n} \nWe'll install json-server for the project... \nnpm install json-server --save-dev \nand add the following line to the scripts part of the file package.json \n\"scripts\": { \n  \"server\": \"json-server -p3001 --watch db.json\", \n  // ... \n} \nNow let's launch json-server with the command npm run server. \nNext, we'll create a method into the file services/notes.js, which uses axios to fetch data from \nthe backend \nimport axios from 'axios' \n \nconstbaseUrl = 'http://localhost:3001/notes' \n \nconstgetAll = async () => { \nconst response = await axios.get(baseUrl) \n  return response.data \n} \n \nexport default { getAll } \nWe'll add axios to the project \nnpm install axios \nWe'll change the initialization of the state in noteReducer, so that by default there are no \nnotes:", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1264, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "be2043de-5d86-4f2a-b84d-e4a6a66b4afe": {"__data__": {"id_": "be2043de-5d86-4f2a-b84d-e4a6a66b4afe", "embedding": null, "metadata": {"page_label": "211", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bf1c2921-74c6-46c9-80e2-3e431c4eba3d", "node_type": "4", "metadata": {"page_label": "211", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "1623e0044eaff2dde5c55734c8296de70a78014ae43a6f589de3f2b54eb6a219", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "211 | P a g e  \n \nconstnoteSlice = createSlice({ \n  name: 'notes', \ninitialState: [],  // ... \n}) \nLet's also add a new action appendNote for adding a note object: \nconstnoteSlice = createSlice({ \n  name: 'notes', \ninitialState: [], \n  reducers: { \ncreateNote(state, action) { \nconst content = action.payload \n \nstate.push({ \n        content, \n        important: false, \n        id: generateId(), \n      }) \n    }, \ntoggleImportanceOf(state, action) { \nconst id = action.payload \n \nconstnoteToChange = state.find(n => n.id === id) \n \nconstchangedNote = {  \n        ...noteToChange,  \n        important: !noteToChange.important \n      } \n \n      return state.map(note => \nnote.id !== id ? note : changedNote \n      )      \n    }, \nappendNote(state, action) {      state.push(action.payload)    }  }, \n}) \n \nexport const{ createNote, toggleImportanceOf, appendNote } = noteSlice.actions \nexport default noteSlice.reducer \nA quick way to initialize the notes state based on the data received from the server is to fetch \nthe notes in the index.js file and dispatch an action using the appendNote action creator for \neach individual note object: \n// ... \nimport noteService from './services/notes'importnoteReducer, { appendNote } from './reducers/noteReducer' \nconst store = configureStore({ \n  reducer: { \n    notes: noteReducer, \n    filter: filterReducer, \n  } \n}) \n \nnoteService.getAll().then(notes =>notes.forEach(note => {    store.dispatch(appendNote(note))  })) \n// ... \nDispatching multiple actions seems a bit impractical. Let's add an action creator setNotes \nwhich can be used to directly replace the notes array. We'll get the action creator from the", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1664, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6782f2ef-f825-4c20-b376-a4b2947df8a0": {"__data__": {"id_": "6782f2ef-f825-4c20-b376-a4b2947df8a0", "embedding": null, "metadata": {"page_label": "212", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b56a82a2-c770-4bb0-9ed2-cf3b2d7672e5", "node_type": "4", "metadata": {"page_label": "212", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "27eb991d2bab28d15c4d59067af069cb185ea02f251dad455f06aed361b4beba", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "212 | P a g e  \n \ncreateSlice function by implementing the setNotes action: \n// ... \n \nconstnoteSlice = createSlice({ \n  name: 'notes', \ninitialState: [], \n  reducers: { \ncreateNote(state, action) { \nconst content = action.payload \n \nstate.push({ \n        content, \n        important: false, \n        id: generateId(), \n      }) \n    }, \ntoggleImportanceOf(state, action) { \nconst id = action.payload \n \nconstnoteToChange = state.find(n => n.id === id) \n \nconstchangedNote = {  \n        ...noteToChange,  \n        important: !noteToChange.important \n      } \n \n      return state.map(note => \nnote.id !== id ? note : changedNote \n      )      \n    }, \nappendNote(state, action) { \nstate.push(action.payload) \n    }, \nsetNotes(state, action) {      return action.payload    }  }, \n}) \n \nexport const{ createNote, toggleImportanceOf, appendNote, setNotes } = noteSlice.actions \nexport default noteSlice.reducer \nNow, the code in the index.js file looks a lot better: \n// ... \nimport noteService from './services/notes' \nimport noteReducer, { setNotes } from './reducers/noteReducer' \nconst store = configureStore({ \n  reducer: { \n    notes: noteReducer, \n    filter: filterReducer, \n  } \n}) \n \nnoteService.getAll().then(notes => \nstore.dispatch(setNotes(notes))) \nNB: why didn't we use await in place of promises and event handlers (registered to then-\nmethods)?", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1364, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6d6d9a0c-8ed0-4d79-bbcb-fdc5d5e62a08": {"__data__": {"id_": "6d6d9a0c-8ed0-4d79-bbcb-fdc5d5e62a08", "embedding": null, "metadata": {"page_label": "213", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a75b0140-98ed-40d4-ab41-cdb883fe3c59", "node_type": "4", "metadata": {"page_label": "213", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "1b0f27cf1734eefe8b5d4c3fcc54ea1b3eec607ba9932e33bc95697f9d636a07", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "213 | P a g e  \n \nAwait only works inside async functions, and the code in index.js is not inside a function, so \ndue to the simple nature of the operation, we'll abstain from using async this time. \nWe do, however, decide to move the initialization of the notes into the App component, and, \nas usual, when fetching data from a server, we'll use the effect hook.  \nimport { useEffect } from 'react'importNewNote from './components/NewNote' \nimport Notes from './components/Notes' \nimport VisibilityFilter from './components/VisibilityFilter' \nimport noteService from './services/notes'import { setNotes } from './reducers/noteReducer'import { useDispatch \n} from 'react-redux' \nconst App = () => { \nconst dispatch = useDispatch()  useEffect(() => {    noteService      .getAll().then(notes => \ndispatch(setNotes(notes)))  }, []) \n  return ( \n<div> \n<NewNote /> \n<VisibilityFilter /> \n<Notes /> \n</div> \n  ) \n} \n \nexport default App \nUsing the useEffect hook causes an eslint warning: \n \nWe can get rid of it by doing the following: \nconst App = () => { \nconst dispatch = useDispatch() \nuseEffect(() => { \nnoteService \n.getAll().then(notes => dispatch(setNotes(notes))) \n  }, [dispatch]) \n  // ... \n} \nNow the variable dispatch we define in the App component, which practically is the dispatch \nfunction of the redux store, has been added to the array useEffect receives as a parameter. If \nthe value of the dispatch variable would change during runtime, the effect would be executed \nagain. This however cannot happen in our application, so the warning is unnecessary.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1573, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a1b573bd-908e-412b-b669-0952f80f9f79": {"__data__": {"id_": "a1b573bd-908e-412b-b669-0952f80f9f79", "embedding": null, "metadata": {"page_label": "214", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8fdb6043-e331-4fd4-9ffd-9bb9e52e2b2d", "node_type": "4", "metadata": {"page_label": "214", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "fc4beb3613ec073fb12f3c87b0480d7e4e74557021e7bcef7f88e0b5c5a4b4c0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "214 | P a g e  \n \nAnother way to get rid of the warning would be to disable ESlint on that line: \nconst App = () => { \nconst dispatch = useDispatch() \nuseEffect(() => { \nnoteService \n.getAll().then(notes => dispatch(setNotes(notes)))    \n  }, []) // eslint-disable-line react-hooks/exhaustive-deps   \n  // ... \n} \nGenerally disabling ESlint when it throws a warning is not a good idea. Even though the \nESlint rule in question has caused some arguments, we will use the first solution. \nMore about the need to define the hooks dependencies in the react documentation. \nWe can do the same thing when it comes to creating a new note. Let's expand the code \ncommunicating with the server as follows: \nconstbaseUrl = 'http://localhost:3001/notes' \n \nconstgetAll = async () => { \nconst response = await axios.get(baseUrl) \n  return response.data \n} \n \nconstcreateNew = async (content) =>{  const object = { content, important: false }  const response = await \naxios.post(baseUrl, object)  return response.data} \nexport default { \ngetAll, \ncreateNew, \n} \nThe method addNote of the component NewNote changes slightly: \nimport { useDispatch } from 'react-redux' \nimport { createNote } from '../reducers/noteReducer' \nimport noteService from '../services/notes' \nconstNewNote = (props) => { \nconst dispatch = useDispatch() \n \nconstaddNote = async (event) =>{  event.preventDefault() \nconst content = event.target.note.value \nevent.target.note.value = '' \nconstnewNote = await noteService.createNew(content)    dispatch(createNote(newNote))  } \n \n  return ( \n<form onSubmit={addNote}> \n<input name=\"note\" /> \n<button type=\"submit\">add</button> \n</form> \n  ) \n} \n \nexport default NewNote \nBecause the backend generates ids for the notes, we'll change the action creator createNote", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1773, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1e3e086e-456c-45af-82cb-5591371385c0": {"__data__": {"id_": "1e3e086e-456c-45af-82cb-5591371385c0", "embedding": null, "metadata": {"page_label": "215", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "982b14df-9540-49fd-b6a2-ee74b64e2c2e", "node_type": "4", "metadata": {"page_label": "215", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "a2db988f895ef9e46c9c5874c97fdb9144d08a4deda53dc162807f38aeb2e6ca", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "215 | P a g e  \n \naccordingly: \ncreateNote(state, action) { \nstate.push(action.payload) \n} \nChanging the importance of notes could be implemented using the same principle, by making \nan asynchronous method call to the server and then dispatching an appropriate action. \n \n \n \n \n                            UNIT \u2013 IV \nJava Web Development \nWeb development is known as website development or web application development. The \nweb development creates, maintains, and updates web development applications using a \nbrowser. This web development requires web designing, backend programming, and database \nmanagement. The development process requires software technology. \nWeb development creates web applications using servers. We can use a web server or \nmachine server like a CPU. The Web server or virtual server requires web application using \ntechnology. Web development requires server-side programming language or technology. \nMostly Java, PHP, and other server-side languages require for web development. \nJava web development creates a server-side website and web application. The majority of \nJava web apps do not execute on the server directly. A web container on the server hosts Java \nweb applications. \nFor Java web applications, the container acts as a runtime environment. What the Java Virtual \nMachine is for locally running Java applications, the container is for Java web applications. \nJVM is used to run the container itself. \nJava distinguishes between two types of containers: web and Java EE. Additional \nfunctionality, such as server load distribution, can be supported by a container. A web \ncontainer supports Java servlets and JSP ( JavaServer Pages ). In Java technology, Tomcat is \na common web container. \nA web container is usually a minimal need for web frameworks. GWT, Struts, JavaServer \nFaces, and the Spring framework are common Java web frameworks. Servlets are at the heart \nof most modern Java web frameworks.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1949, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4b7e4006-b47f-4778-9fe5-b5fa3f598dab": {"__data__": {"id_": "4b7e4006-b47f-4778-9fe5-b5fa3f598dab", "embedding": null, "metadata": {"page_label": "216", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4438087d-e9cb-4d1c-90a6-226b4c818653", "node_type": "4", "metadata": {"page_label": "216", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "4ecd4d0acab85ac0c38b1efc849287058439b7794c766e634bb947cb842af914", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "216 | P a g e  \n \nFunctions of Java Web Development \nJava web development creates applications and websites using static and dynamic resources. \nThe static resource refers to HTML pages with images, and a dynamic resource refers to \nclasses, jars, Servlet, and JSP. Java web development uses several packages, files, and online \nlinks. Java web development requires web archive files known as a WAR files. \nJava web development works on three main factors. These development factors show below. \n\uf0b7 Front-end web development using Java technology. \n\uf0b7 Backend web development using Java server technology. \n\uf0b7 Database management using Java database driver. \nThe above three factors create, update, remove, display and operate data or information. \nFront-end web development: The front-end technology interacts with the user and Java \ninterface. It helps to insert and submit data. Java web development uses JavaServer Pages or \nJSP for the front-end form or table. \nBackend web development: The backend technology maintains and updates data of the \ndatabase. Java uses Servlet, spring, and other advanced technology. \nDatabase management handles or fetches data from the database using the Java database \ndriver. The Java technology uses JDBC, Hibernate to handle the database. \nTypes of the Java Web Technologies \n\uf0b7 Servlet API \n\uf0b7 JSP (JavaServer page) \n\uf0b7 JDBC Driver \n\uf0b7 JAVA Persistence \n\uf0b7 JavaServer Faces (JSF) \n\uf0b7 JSTL \n\uf0b7 JAVA Message Service API", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1452, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "bf54353c-80e2-4b83-b10b-73cf7d6e77ef": {"__data__": {"id_": "bf54353c-80e2-4b83-b10b-73cf7d6e77ef", "embedding": null, "metadata": {"page_label": "217", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c0814240-59b6-4478-8800-c38aef5806e0", "node_type": "4", "metadata": {"page_label": "217", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "6f8fa4d844c752840de4eaab968b9d3ec424ef564ba0968f7a75c399ebba0306", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "217 | P a g e  \n \n \nServlet API (JAVA Web application programming interface) \nServlet, filter, filter chain, servlet config, and other interfaces are available in the javax. \nServlet package. The capabilities of servers that host apps are increased by using Servlet. \nThe request-response model is used in web development applications written with Java \nservlets. From initialization to garbage collection, a servlet has a life cycle. \nServlets are useful for various tasks, including collecting data via web page forms, presenting \ndata from a database or any other third-party source, etc. \nServlets are Java programs that run on a web application and send client requests to databases \nor servers. After talking with the database, the servlets help process the client's request and \nprovide results. \nJSP (JavaServer Page Web application programming technology) \nDevelopers employ JavaServer Pages or JSP technology to quickly produce platform- and \nserver-independent online content. Normally, the developer works on separate Common \nGateway Interface files to embed dynamic elements in HTML pages. Java JSP technology \ncan be used, as it has access to the whole Java API family. \nThe JSP technology pieces code to control web information and moves dynamically. A JSP \npage comprises static data written in HTML, WML, XML, and other markup languages. \nSpecial JSP tags simplify Java code into HTML pages, making web development user-\nfriendly. \nThe JSP technology allows embedding bits of servlet code in a text-based document. JSP is a \npopular Java EE technology that allows programmers to create complex dynamic web pages \nquickly. \nJDBC Driver or Java Database Connectivity \nJDBC Driver is a connector between database and Java web application. Java database", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1770, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "244bed27-7550-47f7-b6d2-1a6ab19bc14a": {"__data__": {"id_": "244bed27-7550-47f7-b6d2-1a6ab19bc14a", "embedding": null, "metadata": {"page_label": "218", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "750d2afb-6154-4bb0-b75c-94350ab24470", "node_type": "4", "metadata": {"page_label": "218", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "dfab3b75492c42582c47a7d82eb796d5407e37c6b067c659ffeded01417afcfe", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "218 | P a g e  \n \nconnectivity helps to update and modify data using queries. The jdbc driver is an essential \npart of Java web development. This driver helps to send data to the database and retrieve data \nfrom the database. \nWithin a Java program, the JDBC driver allows to perform the following tasks: \n\uf0b7 Make a data source connection \n\uf0b7 To the data source, send queries and update statements \n\uf0b7 Displays require data from a database. \n\uf0b7 Organize application information. \nJDBC is a set of methods and queries for accessing databases written in Java. Clients can use \nweb applications using JDBC drivers to update any information in the database. \nJDBC drivers connect to databases in four ways: JDBC-ODBC Bridge Driver, Network \nProtocol Driver, Native Driver, and Thin Driver. \nPersistence API for Java \nFor web development, the Java Persistence API employs object-relational mapping. This \nmapping connects a database to an object-oriented model. Java Persistence makes it simple to \nmanage relational data in Java web applications. The Java Persistence API aids in database \ndata management. This API sends data to a database and retrieves data from it regularly. \nLarge amounts of code, proprietary frameworks, and other files are not required. JPA gives a \nstraightforward technique of database communication. A database is an object-relational \napproach for interacting with Java web development. JPA is a set of lightweight classes and \nmethods for interacting with databases. \nTechnology of the JavaServer Faces \nJavaServer Faces is called a JSF Technology. This technology provides a framework for \ndeveloping web-based interfaces. JSF provides a simple model for components in various \nscripting or markup languages. \nThe data sources and server-side event handlers are coupled to the User Interface widgets. \nJSF aids in the creation and maintenance of web applications by minimizing the time and \neffort required. \n\uf0b7 Construct Java web development pages. \n\uf0b7 Drop components on a web page by adding component tags to a web page. \n\uf0b7 Connect Java web development page components to server-side data. \n\uf0b7 Connect component-generated events to application code running on the server. \n\uf0b7 Extend the life of server requests by storing and restoring the application state. \nStandard Tag Library for JavaServer Pages (JSTL) \nThe JavaServer Pages Standard Tag Library or JSTL abstracts common functionality of JSP-\nbased applications. We use a single standard set of tags to incorporate tags from various \nvendors into web applications. This standardization enables the establishment of Java", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 2600, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6646e6f1-c049-4986-9489-83ecb0f10efe": {"__data__": {"id_": "6646e6f1-c049-4986-9489-83ecb0f10efe", "embedding": null, "metadata": {"page_label": "219", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8f43f7f9-ca83-4ab3-aaaf-3223bb9077f3", "node_type": "4", "metadata": {"page_label": "219", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "eb83f9e28d00aeec4215a7609e13352e977a54d790b7c9fa1b3da89f41d6280c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "219 | P a g e  \n \napplications on any JSP container. It supports JSTL and increases the tags to optimize during \nimplementation. \nJSTL includes iterator and conditional tags for controlling flow. These tags work for \nmanipulating XML documents and tags for internationalization. This JSTL is also used for \nSQL database access and tags for frequently used functions. \nAPI for Java Message Service \nMessaging is a way for software components or apps to communicate with one another. A \nmessaging system is a type of peer-to-peer network. In other words, a messaging client can \ncommunicate with and be communicated with by any other client. \nEach client establishes a connection with a messaging agent, facilitating the creation, \ntransmission, receipt, and reading of messages. \nThe Java Message Service (JMS) API provides a strong tool for resolving enterprise \ncomputing problems by integrating Java technology and enterprise messaging. \nEnterprise messaging enables the secure and flexible sharing of business data. The JMS API \nextends this by providing a uniform API and provider framework that facilitates the building \nof portable message-based Java applications. \nSpecial Features of the Java web development \n\uf0b7 Java is a mature, versatile, and powerful programming language. \n\uf0b7 Additionally, it is popular, which means that tools and assistance for Java web development \nare readily available. \n\uf0b7 Java's platform freedom is one of its strongest characteristics. Java code can be executed on \nany platform, including a Mac or a Windows computer. On any operating system, we can run \na Java web application. \n\uf0b7 Java is also capable of running mobile applications on smartphones and tablets. \n\uf0b7 Java web development does not require additional effort to design and run web apps across \nseveral platforms. \n\uf0b7 Java also includes an enormous standard library. This library readily works with common \ntasks such as input and output, networking, and graphic user interfaces. It provides tools to \nhelp web application developers. \nConclusion \nJava programming language is easy to handle and programmer's first choice for web \ndevelopment. Java web development has basic rules apart from operating data. This \ntechnology does not need an extra operation or advanced programming. \nJava web development creates multiple web applications using a single type of code on \nmultiple pages. If we know the working procedure, then JAVA technology develops any \napplication. \nJAVA PROGRAMMING BASICS", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 2493, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a153dfed-198d-4ced-9a3b-a75f1db45803": {"__data__": {"id_": "a153dfed-198d-4ced-9a3b-a75f1db45803", "embedding": null, "metadata": {"page_label": "220", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3d77817c-7b4b-4b7a-9372-a658604199a2", "node_type": "4", "metadata": {"page_label": "220", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "9fb7ccb3f2963015c21928cad80f581a1a470fe2c5470aeb6a0068ea7b8658a3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "220 | P a g e  \n \nWhat is Java? \nJava is a high-level, general-purpose, object-oriented, and secure programming language \ndeveloped by James Gosling at Sun Microsystems, Inc. in 1991. It is formally known as \nOAK. In 1995, Sun Microsystem changed the name to Java. In 2009, Sun Microsystem \ntakeover by Oracle Corporation. \nEditions of Java \nEach edition of Java has different capabilities. There are three editions of Java: \n\uf0b7 Java Standard Editions (JSE): It is used to create programs for a desktop computer. \n\uf0b7 Java Enterprise Edition (JEE): It is used to create large programs that run on the \nserver and manages heavy traffic and complex transactions. \n\uf0b7 Java Micro Edition (JME): It is used to develop applications for small devices such \nas set-top boxes, phone, and appliances. \nTypes of Java Applications \nThere are four types of Java applications that can be created using Java programming: \n\uf0b7 Standalone Applications: Java standalone applications uses GUI components such \nas AWT, Swing, and JavaFX. These components contain buttons, list, menu, scroll \npanel, etc. It is also known as desktop alienations. \n\uf0b7 Enterprise Applications: An application which is distributed in nature is called \nenterprise applications. \n\uf0b7 Web Applications: An applications that run on the server is called web applications. \nWe use JSP, Servlet, Spring, and Hibernate technologies for creating web \napplications. \n\uf0b7 Mobile Applications: Java ME is a cross-platform to develop mobile applications \nwhich run across smartphones. Java is a platform for App Development in Android. \nJava Platform \nJava Platform is a collection of programs. It helps to develop and run a program written in the \nJava programming language. Java Platform includes an execution engine, a compiler and set \nof libraries. Java is a platform-independent language. \nFeatures of Java \n\uf0b7 Simple: Java is a simple language because its syntax is simple, clean, and easy to \nunderstand. Complex and ambiguous concepts of C++ are either eliminated or re-\nimplemented in Java. For example, pointer and operator overloading are not used in \nJava. \n\uf0b7 Object-Oriented: In Java, everything is in the form of the object. It means it has \nsome data and behavior. A program must have at least one class and object. \n\uf0b7 Robust: Java makes an effort to check error at run time and compile time. It uses a", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 2356, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5da19107-3e25-45a8-9f01-90c88ce669e9": {"__data__": {"id_": "5da19107-3e25-45a8-9f01-90c88ce669e9", "embedding": null, "metadata": {"page_label": "221", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a3d83e46-9fed-4c80-8d56-fab85cee6602", "node_type": "4", "metadata": {"page_label": "221", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "1e4697f97ad7f345d57a62d70f3b2fafa2822aa5fdd932a267f41d49becce89f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "221 | P a g e  \n \nstrong memory management system called garbage collector. Exception handling and \ngarbage collection features make it strong. \n\uf0b7 Secure: Java is a secure programming language because it has no explicit pointer and \nprograms runs in the virtual machine. Java contains a security manager that defines \nthe access of Java classes. \n\uf0b7 Platform-Independent: Java provides a guarantee that code writes once and run \nanywhere. This byte code is platform-independent and can be run on any machine. \n \n\uf0b7 Portable: Java Byte code can be carried to any platform. No implementation-\ndependent features. Everything related to storage is predefined, for example, the size \nof primitive data types. \n\uf0b7 High Performance: Java is an interpreted language. Java enables high performance \nwith the use of the Just-In-Time compiler. \n\uf0b7 Distributed: Java also has networking facilities. It is designed for the distributed \nenvironment of the internet because it supports TCP/IP protocol. It can run over the \ninternet. EJB and RMI are used to create a distributed system. \n\uf0b7 Multi-threaded: Java also supports multi-threading. It means to handle more than \none job a time. \nOOPs (Object Oriented Programming System) \nObject-oriented programming is a way of solving a complex problem by breaking them into a \nsmall sub-problem. An object is a real-world entity. It is easier to develop a program by using \nan object. In OOPs, we create programs using class and object in a structured manner. \nClass: A class is a template or blueprint or prototype that defines data members and methods \nof an object. An object is the instance of the class. We can define a class by using the class \nkeyword. \nObject: An object is a real-world entity that can be identified distinctly. For example, a desk, \na circle can be considered as objects. An object has a unique behavior, identity, and state. \nData fields with their current values represent the state of an object (also known as its \nproperties or attributes). \nAbstraction: An abstraction is a method of hiding irrelevant information from the user. For \nexample, the driver only knows how to drive a car; there is no need to know how does the car \nrun. We can make a class abstract by using the keyword abstract. In Java, we use abstract \nclass and interface to achieve abstraction.  \nEncapsulation: An encapsulation is the process of binding data and functions into a single \nunit. A class is an example of encapsulation. In Java, Java bean is a fully encapsulated class.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 2514, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "12350cf8-3dce-48b7-a276-3c29a58a69b7": {"__data__": {"id_": "12350cf8-3dce-48b7-a276-3c29a58a69b7", "embedding": null, "metadata": {"page_label": "222", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "99f40ced-435e-4b29-a537-1ca0c34d5f67", "node_type": "4", "metadata": {"page_label": "222", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "09617ce1c0a4909bdfdb376ff62667132e038ee8ce3f584672e84e126ff7d4c3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "222 | P a g e  \n \nInheritance: Inheritance is the mechanism in which one class acquire all the features of \nanother class. We can achieve inheritance by using the extends keyword. It facilitates the \nreusability of the code. \nPolymorphism: The polymorphism is the ability to appear in many forms. In other words, \nsingle action in different ways. For example, a boy in the classroom behaves like a student, in \nhouse behaves like a son. There are two types of polymorphism: run time polymorphism and \ncompile-time polymorphism. \nJava Variables \nA variable is a container which holds the value while the Java program is executed. A \nvariable is assigned with a data type. \nVariable is a name of memory location. There are three types of variables in java: local, \ninstance and static. \nThere are two types of data types in Java: primitive and non-primitive. \n \nVariable \nA variable is the name of a reserved area allocated in memory. In other words, it is a name of \nthe memory location. It is a combination of \"vary + able\" which means its value can be \nchanged. \n \n1. int data=50;//Here data is variable   \nTypes of Variables", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1130, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "114988d4-e670-43b3-a747-f8ea92ec0c63": {"__data__": {"id_": "114988d4-e670-43b3-a747-f8ea92ec0c63", "embedding": null, "metadata": {"page_label": "223", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c3f51d2a-f0ce-4002-a9d0-008c5b176894", "node_type": "4", "metadata": {"page_label": "223", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "53032fe45596afa2e65914079e1d8857fce1b4ea70f38f9d343fa0e997ba2bd8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "223 | P a g e  \n \nThere are three types of variables in Java: \n\uf0b7 local variable \n\uf0b7 instance variable \n\uf0b7 static variable \n \n1) Local Variable \nA variable declared inside the body of the method is called local variable. You can use this \nvariable only within that method and the other methods in the class aren't even aware that the \nvariable exists.  \nA local variable cannot be defined with \"static\" keyword. \n2) Instance Variable \nA variable declared inside the class but outside the body of the method, is called an instance \nvariable. It is not declared as static.  \nIt is called an instance variable because its value is instance-specific and is not shared among", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 670, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "bd6e815b-aca8-48bd-8be9-5a849b041a7b": {"__data__": {"id_": "bd6e815b-aca8-48bd-8be9-5a849b041a7b", "embedding": null, "metadata": {"page_label": "224", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cbe0f994-ec34-4ba3-a98d-7ca62142e9f6", "node_type": "4", "metadata": {"page_label": "224", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "f7f6b0608704281431566ea5ee4b3a3f21f302db19a02236bc4a2cd6c7cd8e72", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "224 | P a g e  \n \ninstances. \n3) Static variable \nA variable that is declared as static is called a static variable. It cannot be local. You can \ncreate a single copy of the static variable and share it among all the instances of the class. \nMemory allocation for static variables happens only once when the class is loaded in the \nmemory. \nExample to understand the types of variables in java \n1. public class A   \n2. {   \n3.     static int m=100;//static variable   \n4.     void method()   \n5.     {     \n6.         int n=90;//local variable     \n7.     }   \n8.     public static void main(String args[])   \n9.     {   \n10.         int data=50;//instance variable     \n11.     }   \n12. }//end of class    \nJava Variable Example: Add Two Numbers \n1. public class Simple{     \n2. public static void main(String[] args){     \n3. int a=10;     \n4. int b=10;     \n5. int c=a+b;     \n6. System.out.println(c);     \n7. }   \n8. }     \nOutput: \n20 \nJava Variable Example: Widening \n1. public class Simple{   \n2. public static void main(String[] args){   \n3. int a=10;   \n4. float f=a;   \n5. System.out.println(a);   \n6. System.out.println(f);   \n7. }}   \nOutput: \n10", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1163, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "010c713c-7965-470d-879c-b271a8346237": {"__data__": {"id_": "010c713c-7965-470d-879c-b271a8346237", "embedding": null, "metadata": {"page_label": "225", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c9a9832f-b4d9-466d-9819-dd6a7771732f", "node_type": "4", "metadata": {"page_label": "225", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "46715b27a08b225ad02e6f2c60a3dc7bb34995a7004135232450848b2f471faa", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "225 | P a g e  \n \n10.0 \nJava Variable Example: Narrowing (Typecasting) \n1. public class Simple{   \n2. public static void main(String[] args){   \n3. float f=10.5f;   \n4. //int a=f;//Compile time error   \n5. int a=(int)f;   \n6. System.out.println(f);   \n7. System.out.println(a);   \n8. }}   \nOutput: \n10.5 \n10 \nJava Variable Example: Overflow \n1. class Simple{   \n2. public static void main(String[] args){   \n3. //Overflow   \n4. int a=130;   \n5. byte b=(byte)a;   \n6. System.out.println(a);   \n7. System.out.println(b);   \n8. }}   \nOutput: \n130 \n-126 \nJava Variable Example: Adding Lower Type \n1. class Simple{   \n2. public static void main(String[] args){   \n3. byte a=10;   \n4. byte b=10;   \n5. //byte c=a+b;//Compile Time Error: because a+b=20 will be int   \n6. byte c=(byte)(a+b);   \n7. System.out.println(c);   \n8. }}   \nOutput: \n20 \nJava OOPs Concepts \n1. Object-Oriented Programming \n2. Advantage of OOPs over Procedure-oriented programming language", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 959, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "da786d83-e27a-4d59-8f0a-db09d777bf8e": {"__data__": {"id_": "da786d83-e27a-4d59-8f0a-db09d777bf8e", "embedding": null, "metadata": {"page_label": "226", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "68066bd9-2ddd-452d-b7da-1b861a1a9fd6", "node_type": "4", "metadata": {"page_label": "226", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "6c5f5477b3418ee01bb3eb28cbcd3ec53a60eca2196e3706bdd9888dd134f3e9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "226 | P a g e  \n \n3. Difference between Object-oriented and Object-based programming language. \nIn this page, we will learn about the basics of OOPs. Object-Oriented Programming is a \nparadigm that provides many concepts, such as inheritance, data binding, polymorphism, \netc. \nSimula is considered the first object-oriented programming language. The programming \nparadigm where everything is represented as an object is known as a truly object-oriented \nprogramming language. \nSmalltalk is considered the first truly object-oriented programming language. \nThe popular object-oriented languages are Java, C#, PHP, Python, C++, etc. \nThe main aim of object-oriented programming is to implement real-world entities, for \nexample, object, classes, abstraction, inheritance, polymorphism, etc. \nOOPs (Object-Oriented Programming System) \nObject means a real-world entity such as a pen, chair, table, computer, watch, etc. Object-\nOriented Programming is a methodology or paradigm to design a program using classes \nand objects. It simplifies software development and maintenance by providing some \nconcepts: \n\uf0b7 Object \n\uf0b7 Class \n\uf0b7 Inheritance \n\uf0b7 Polymorphism \n\uf0b7 Abstraction \n\uf0b7 Encapsulation \nApart from these concepts, there are some other terms which are used in Object-Oriented \ndesign:  \n\uf0b7 Coupling \n\uf0b7 Cohesion \n\uf0b7 Association \n\uf0b7 Aggregation \n\uf0b7 Composition", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1357, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "10c519b6-50a5-49b8-ab08-f79538a7ff99": {"__data__": {"id_": "10c519b6-50a5-49b8-ab08-f79538a7ff99", "embedding": null, "metadata": {"page_label": "227", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "874ea894-10a7-4919-8aab-65e5b9e17ac8", "node_type": "4", "metadata": {"page_label": "227", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "15de52bea4111284b7d4fd5c6e3cf05d1a2ed79370c0247c297bcf898f335ddd", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "227 | P a g e  \n \n \nObject \n \nAny entity that has state and behavior is known as an object. For example, a chair, pen, table, \nkeyboard, bike, etc. It can be physical or logical. \nAn Object can be defined as an instance of a class. An object contains an address and takes", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 275, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a0549b03-fb77-4586-95fb-c2adceaa8b49": {"__data__": {"id_": "a0549b03-fb77-4586-95fb-c2adceaa8b49", "embedding": null, "metadata": {"page_label": "228", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bd2b2472-7708-4bc4-9254-616396329019", "node_type": "4", "metadata": {"page_label": "228", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "85cac0fc69d79bb07747fdf0124afd4344084ae7884e64b2f26902860c84ec14", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "228 | P a g e  \n \nup some space in memory. Objects can communicate without knowing the details of each \nother's data or code. The only necessary thing is the type of message accepted and the type of \nresponse returned by the objects. \nExample: A dog is an object because it has states like color, name, breed, etc. as well as \nbehaviors like wagging the tail, barking, eating, etc.  \nClass \nCollection of objects is called class. It is a logical entity. \nA class can also be defined as a blueprint from which you can create an individual object. \nClass doesn't consume any space. \nInheritance \nWhen one object acquires all the properties and behaviors of a parent object, it is known as \ninheritance. It provides code reusability. It is used to achieve runtime polymorphism. \n \nPolymorphism \nIf one task is performed in different ways, it is known as polymorphism. For example: to \nconvince the customer differently, to draw something, for example, shape, triangle, rectangle, \netc.  \nIn Java, we use method overloading and method overriding to achieve polymorphism. \nAnother example can be to speak something; for example, a cat speaks meow, dog barks \nwoof, etc. \nAbstraction \nHiding internal details and showing functionality is known as abstraction. For example phone \ncall, we don't know the internal processing.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1321, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9de3211b-ae59-4e7b-a886-a6a82a817961": {"__data__": {"id_": "9de3211b-ae59-4e7b-a886-a6a82a817961", "embedding": null, "metadata": {"page_label": "229", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c0c5908d-b277-489d-9cf5-131f84ff5187", "node_type": "4", "metadata": {"page_label": "229", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "36b2c03cd012012a628af13bc51655441a8adf177f867cfe22a63da39abe72bd", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "229 | P a g e  \n \nIn Java, we use abstract class and interface to achieve abstraction. \n \nEncapsulation \nBinding (or wrapping) code and data together into a single unit are known as encapsulation. \nFor example, a capsule, it is wrapped with different medicines. \nA java class is the example of encapsulation. Java bean is the fully encapsulated class \nbecause all the data members are private here. \nCoupling \nCoupling refers to the knowledge or information or dependency of another class. It arises \nwhen classes are aware of each other. If a class has the details information of another class, \nthere is strong coupling. In Java, we use private, protected, and public modifiers to display \nthe visibility level of a class, method, and field. You can use interfaces for the weaker \ncoupling because there is no concrete implementation. \nCohesion \nCohesion refers to the level of a component which performs a single well-defined task. A \nsingle well-defined task is done by a highly cohesive method. The weakly cohesive method \nwill split the task into separate parts. The java.io package is a highly cohesive package \nbecause it has I/O related classes and interface. However, the java.util package is a weakly \ncohesive package because it has unrelated classes and interfaces. \nAssociation \nAssociation represents the relationship between the objects. Here, one object can be \nassociated with one object or many objects. There can be four types of association between \nthe objects: \n\uf0b7 One to One \n\uf0b7 One to Many \n\uf0b7 Many to One, and \n\uf0b7 Many to Many \nLet's understand the relationship with real-time examples. For example, One country can \nhave one prime minister (one to one), and a prime minister can have many ministers (one to \nmany). Also, many MP's can have one prime minister (many to one), and many ministers can \nhave many departments (many to many). \nAssociation can be undirectional or bidirectional.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1914, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b98ffc50-c1b0-40bc-951b-d4e2739da582": {"__data__": {"id_": "b98ffc50-c1b0-40bc-951b-d4e2739da582", "embedding": null, "metadata": {"page_label": "230", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "28219316-9dfd-460f-9c8f-8ed3edd00a94", "node_type": "4", "metadata": {"page_label": "230", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "cffad1dfe5406a2414496685440d697b5d65bea08cd3ed10d82d27c147edfcd0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "230 | P a g e  \n \nAggregation \nAggregation is a way to achieve Association. Aggregation represents the relationship where \none object contains other objects as a part of its state. It represents the weak relationship \nbetween objects. It is also termed as a has-a relationship in Java. Like, inheritance represents \nthe is-a relationship. It is another way to reuse objects. \nComposition \nThe composition is also a way to achieve Association. The composition represents the \nrelationship where one object contains other objects as a part of its state. There is a strong \nrelationship between the containing object and the dependent object. It is the state where \ncontaining objects do not have an independent existence. If you delete the parent object, all \nthe child objects will be deleted automatically.  \n \nAdvantage of OOPs over Procedure-oriented \nprogramming language \n1) OOPs makes development and maintenance easier, whereas, in a procedure-oriented \nprogramming language, it is not easy to manage if code grows as project size increases.  \n2) OOPs provides data hiding, whereas, in a procedure-oriented programming language, \nglobal data can be accessed from anywhere.  \n \nFigure: Data Representation in Procedure-Oriented Programming", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1248, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3b8cf4e7-a5e3-4006-9daa-b94614036164": {"__data__": {"id_": "3b8cf4e7-a5e3-4006-9daa-b94614036164", "embedding": null, "metadata": {"page_label": "231", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "82c2bc05-2027-4011-83d9-5e18c25e686e", "node_type": "4", "metadata": {"page_label": "231", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "4c7ddb7e9882cfc173103f8f9d6329a7a5e4f4ace852e223b23902621e1aadaa", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "231 | P a g e  \n \n \nFigure: Data Representation in Object-Oriented Programming \n3) OOPs provides the ability to simulate real-world event much more effectively. We can \nprovide the solution of real word problem if we are using the Object-Oriented Programming \nlanguage. \n \nWhat is the difference between an object-oriented \nprogramming language and object-based programming \nlanguage? \nObject-based programming language follows all the features of OOPs except Inheritance. \nJavaScript and VBScript are examples of object-based programming languages. \nMVC Architecture in Java \nThe Model-View-Controller (MVC) is a well-known design pattern in the web development \nfield. It is way to organize our code. It specifies that a program or application shall consist of \ndata model, presentation information and control information. The MVC pattern needs all \nthese components to be separated as different objects. \nIn this section, we will discuss the MVC Architecture in Java, alongwith its advantages and \ndisadvantages and examples to understand the implementation of MVC in Java. \nWhat is MVC architecture in Java? \nThe model designs based on the MVC architecture follow MVC design pattern. The \napplication logic is separated from the user interface while designing the software using \nmodel designs.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1303, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "cddc7160-ae05-479c-a306-d95c79c0c1a5": {"__data__": {"id_": "cddc7160-ae05-479c-a306-d95c79c0c1a5", "embedding": null, "metadata": {"page_label": "232", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "da5523e3-b933-457c-a9a8-c93d97ce5d16", "node_type": "4", "metadata": {"page_label": "232", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "8ebc329b9c21e0b1a62d7b802750d8f5c195a2e271faa59509abbd5479ca515c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "232 | P a g e  \n \nThe MVC pattern architecture consists of three layers: \n\uf0b7 Model: It represents the business layer of application. It is an object to carry the data that can \nalso contain the logic to update controller if data is changed. \n\uf0b7 View: It represents the presentation layer of application. It is used to visualize the data that \nthe model contains. \n\uf0b7 Controller: It works on both the model and view. It is used to manage the flow of \napplication, i.e. data flow in the model object and to update the view whenever data is \nchanged. \nIn Java Programming, the Model contains the simple Java classes, the View used to display \nthe data and the Controller contains the servlets. Due to this separation the user requests are \nprocessed as follows: \n \n1. A client (browser) sends a request to the controller on the server side, for a page. \n2. The controller then calls the model. It gathers the requested data. \n3. Then the controller transfers the data retrieved to the view layer. \n4. Now the result is sent back to the browser (client) by the view. \nAdvantages of MVC Architecture \nThe advantages of MVC architecture are as follows: \n\uf0b7 MVC has the feature of scalability that in turn helps the growth of application. \n\uf0b7 The components are easy to maintain because there is less dependency. \n\uf0b7 A model can be reused by multiple views that provides reusability of code. \n\uf0b7 The developers can work with the three layers (Model, View, and Controller) simultaneously. \n\uf0b7 Using MVC, the application becomes more understandable. \n\uf0b7 Using MVC, each layer is maintained separately therefore we do not require to deal with \nmassive code. \n\uf0b7 The extending and testing of application is easier. \nImplementation of MVC using Java \nTo implement MVC pattern in Java, we are required to create the following three classes.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1821, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "99ed230e-b4a0-4181-a119-2807105b479f": {"__data__": {"id_": "99ed230e-b4a0-4181-a119-2807105b479f", "embedding": null, "metadata": {"page_label": "233", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d50252db-c228-4d91-b27d-43e8634686d1", "node_type": "4", "metadata": {"page_label": "233", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "d680242724bd8bf89334fda02717f70153ed5b14088dce0864401918b4378f68", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "233 | P a g e  \n \n\uf0b7 Employee Class, will act as model layer \n\uf0b7 EmployeeView Class, will act as a view layer \n\uf0b7 EmployeeContoller Class, will act a controller layer \nMVC Architecture Layers \nModel Layer \nThe Model in the MVC design pattern acts as a data layer for the application. It represents the \nbusiness logic for application and also the state of application. The model object fetch and \nstore the model state in the database. Using the model layer, rules are applied to the data that \nrepresents the concepts of application. \nLet's consider the following code snippet that creates a which is also the first step to \nimplement MVC pattern. \nEmployee.java \n1. // class that represents model   \n2. public class Employee {   \n3.    \n4.       // declaring the variables   \n5.        private String EmployeeName;   \n6.        private String EmployeeId;   \n7.        private String EmployeeDepartment;   \n8.            \n9.       // defining getter and setter methods   \n10.        public String getId() {   \n11.           return EmployeeId;   \n12.        }   \n13.            \n14.        public void setId(String id) {   \n15.           this.EmployeeId = id;   \n16.        }   \n17.            \n18.        public String getName() {   \n19.           return EmployeeName;   \n20.        }   \n21.            \n22.        public void setName(String name) {   \n23.           this.EmployeeName = name;   \n24.        }   \n25.            \n26.        public String getDepartment() {   \n27.               return EmployeeDepartment;   \n28.            }   \n29.            \n30.        public void setDepartment(String Department) {   \n31.               this.EmployeeDepartment = Department;   \n32.            }   \n33.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1703, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d92db686-0c45-4264-92c7-a6bf205a4746": {"__data__": {"id_": "d92db686-0c45-4264-92c7-a6bf205a4746", "embedding": null, "metadata": {"page_label": "234", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3187257b-50bc-4c1c-b2a7-65bd975d117b", "node_type": "4", "metadata": {"page_label": "234", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "1c489ee7cb3a9fbdd52352ff99153aa644a90152cbc78b47055cd4222c0cb72d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "234 | P a g e  \n \n34.     }   \nThe above code simply consists of getter and setter methods to the Employee class. \nView Layer \nAs the name depicts, view represents the visualization of data received from the model. The \nview layer consists of output of application or user interface. It sends the requested data to the \nclient, that is fetched from model layer by controller. \nLet's take an example where we create a view using the EmployeeView class. \nEmployeeView.java \n1. // class which represents the view   \n2. public class EmployeeView {   \n3.    \n4.       // method to display the Employee details    \n5. public void printEmployeeDetails (String EmployeeName, String EmployeeId, String \nEmployeeDepartment){   \n6.           System.out.println(\"Employee Details: \");   \n7.           System.out.println(\"Name: \" + EmployeeName);   \n8.           System.out.println(\"Employee ID: \" + EmployeeId);   \n9.           System.out.println(\"Employee Department: \" + EmployeeDepartment);   \n10.        }   \n11.     }   \nController Layer \nThe controller layer gets the user requests from the view layer and processes them, with the \nnecessary validations. It acts as an interface between Model and View. The requests are then \nsent to model for data processing. Once they are processed, the data is sent back to the \ncontroller and then displayed on the view. \nLet's consider the following code snippet that creates the controller using the \nEmployeeController class. \nEmployeeController.java \n1. // class which represent the controller   \n2. public class EmployeeController {   \n3.    \n4.       // declaring the variables model and view   \n5.        private Employee model;   \n6.        private EmployeeView view;   \n7.     \n8.       // constructor to initialize   \n9.        public EmployeeController(Employee model, EmployeeView view) {   \n10.           this.model = model;   \n11.           this.view = view;   \n12.        }", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1924, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "18f2f9b9-1331-4ce5-a362-deb5d8fb4db0": {"__data__": {"id_": "18f2f9b9-1331-4ce5-a362-deb5d8fb4db0", "embedding": null, "metadata": {"page_label": "235", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8750c1f7-50cf-4cca-bed8-6ce5571083d7", "node_type": "4", "metadata": {"page_label": "235", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "03eaf1641b3837e2073e0c9d9c6909a6eaf2b8a78d251bb7e86a22f40b7849b5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "235 | P a g e  \n \n13.     \n14.       // getter and setter methods    \n15.        public void setEmployeeName(String name){   \n16.           model.setName(name);         \n17.        }   \n18.     \n19.        public String getEmployeeName(){   \n20.           return model.getName();          \n21.        }   \n22.     \n23.        public void setEmployeeId(String id){   \n24.           model.setId(id);         \n25.        }   \n26.     \n27.        public String getEmployeeId(){   \n28.           return model.getId();        \n29.        }   \n30.     \n31.        public void setEmployeeDepartment(String Department){   \n32.               model.setDepartment(Department);         \n33.        }   \n34.     \n35.            public String getEmployeeDepartment(){   \n36.               return model.getDepartment();          \n37.        }   \n38.    \n39.        // method to update view    \n40.        public void updateView() {                   \n41.           view.printEmployeeDetails(model.getName(), model.getId(), model.getDepart\nment());   \n42.        }       \n43.     }   \nMain Class Java file \nThe following example displays the main file to implement the MVC architecture. Here, we \nare using the MVCMain class. \nMVCMain.java \n1. // main class   \n2. public class MVCMain {   \n3.        public static void main(String[] args) {   \n4.     \n5.           // fetching the employee record based on the employee_id from the database   \n6.           Employee model = retriveEmployeeFromDatabase();   \n7.     \n8.           // creating a view to write Employee details on console   \n9.           EmployeeView view = new EmployeeView();   \n10.     \n11.           EmployeeController controller = new EmployeeController(model, view);", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1721, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "dedabc09-5f7d-4468-8e25-a189f0749f06": {"__data__": {"id_": "dedabc09-5f7d-4468-8e25-a189f0749f06", "embedding": null, "metadata": {"page_label": "236", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c8272ec2-af00-4249-9fea-1e1de93b9a91", "node_type": "4", "metadata": {"page_label": "236", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "ac1330d989bd335b9d5335d388c3988f45d729807e7031177ade4e1b18c2b8b3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "236 | P a g e  \n \n12.     \n13.           controller.updateView();   \n14.     \n15.           //updating the model data   \n16.           controller.setEmployeeName(\"Nirnay\");   \n17.           System.out.println(\"\\n Employee Details after updating: \");   \n18.     \n19.           controller.updateView();   \n20.        }   \n21.     \n22.        private static Employee retriveEmployeeFromDatabase(){   \n23.           Employee Employee = new Employee();   \n24.           Employee.setName(\"Anu\");   \n25.           Employee.setId(\"11\");   \n26.           Employee.setDepartment(\"Salesforce\");   \n27.           return Employee;   \n28.        }   \n29.     }   \nThe MVCMain class fetches the employee data from the method where we have entered the \nvalues. Then it pushes those values in the model. After that, it initializes the view \n(EmployeeView.java). When view is initialized, the Controller (EmployeeController.java) is \ninvoked and bind it to Employee class and EmployeeView class. At last the updateView() \nmethod (method of controller) update the employee details to be printed to the console. \nOutput: \nEmployee Details: \nName: Anu           \nEmployee ID: 11 \nEmployee Department: Salesforce \n \nEmployee Details after updating: \nName: Nirnay \nEmployee ID: 11 \nEmployee Department: Salesforce \nIn this way, we have learned about MVC Architecture, significance of each layer and its \nimplementation in Java. \n \nSpring MVC Tutorial \nA Spring MVC is a Java framework which is used to build web applications. It follows the \nModel-View-Controller design pattern. It implements all the basic features of a core spring \nframework like Inversion of Control, Dependency Injection. \nA Spring MVC provides an elegant solution to use MVC in spring framework by the help of \nDispatcherServlet. Here, DispatcherServlet is a class that receives the incoming request \nand maps it to the right resource such as controllers, models, and views.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1928, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "107ae703-9b95-4cf6-8814-40183ac0a2dc": {"__data__": {"id_": "107ae703-9b95-4cf6-8814-40183ac0a2dc", "embedding": null, "metadata": {"page_label": "237", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d20c7ef2-3cc4-478e-8021-a9b33c87b5ac", "node_type": "4", "metadata": {"page_label": "237", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "cd342b6c6d679b2533ac9ff4812e0e79dd10350e30a0129f407178b412c86232", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "237 | P a g e  \n \nSpring Web Model-View-Controller \n \n\uf0b7 Model - A model contains the data of the application. A data can be a single object or a \ncollection of objects. \n\uf0b7 Controller - A controller contains the business logic of an application. Here, the @Controller \nannotation is used to mark the class as the controller. \n\uf0b7 View - A view represents the provided information in a particular format. Generally, \nJSP+JSTL is used to create a view page. Although spring also supports other view \ntechnologies such as Apache Velocity, Thymeleaf and FreeMarker. \n\uf0b7 Front Controller - In Spring Web MVC, the DispatcherServlet class works as the front \ncontroller. It is responsible to manage the flow of the Spring MVC application. \n \nUnderstanding the flow of Spring Web MVC", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 775, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "99fef07a-0a29-44ea-b65f-c83545bb4947": {"__data__": {"id_": "99fef07a-0a29-44ea-b65f-c83545bb4947", "embedding": null, "metadata": {"page_label": "238", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6b688319-9cd6-4e69-b923-56c34d13a703", "node_type": "4", "metadata": {"page_label": "238", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "2b7e94c7b88456191054d3e8db54a1377b73108934846dc7969a27b6a40861a7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "238 | P a g e  \n \n\uf0b7 As displayed in the figure, all the incoming request is intercepted by the DispatcherServlet \nthat works as the front controller. \n\uf0b7 The DispatcherServlet gets an entry of handler mapping from the XML file and forwards the \nrequest to the controller. \n\uf0b7 The controller returns an object of ModelAndView. \n\uf0b7 The DispatcherServlet checks the entry of view resolver in the XML file and invokes the \nspecified view component. \n \nAdvantages of Spring MVC Framework \nLet's see some of the advantages of Spring MVC Framework:- \n\uf0b7 Separate roles - The Spring MVC separates each role, where the model object, controller, \ncommand object, view resolver, DispatcherServlet, validator, etc. can be fulfilled by a \nspecialized object. \n\uf0b7 Light-weight - It uses light-weight servlet container to develop and deploy your application. \n\uf0b7 Powerful Configuration - It provides a robust configuration for both framework and \napplication classes that includes easy referencing across contexts, such as from web \ncontrollers to business objects and validators. \n\uf0b7 Rapid development - The Spring MVC facilitates fast and parallel development. \n\uf0b7 Reusable business code - Instead of creating new objects, it allows us to use the existing \nbusiness objects. \n\uf0b7 Easy to test - In Spring, generally we create JavaBeans classes that enable you to inject test \ndata using the setter methods. \n\uf0b7 Flexible Mapping - It provides the specific annotations that easily redirect the page.  \n \nSpring Web MVC Framework Example \nLet's see the simple example of a Spring Web MVC framework. The steps are as follows: \n\uf0b7 Load the spring jar files or add dependencies in the case of Maven \n\uf0b7 Create the controller class \n\uf0b7 Provide the entry of controller in the web.xml file \n\uf0b7 Define the bean in the separate XML file \n\uf0b7 Display the message in the JSP page \n\uf0b7 Start the server and deploy the project \n \nDirectory Structure of Spring MVC", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1920, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "648c1945-0c6d-4981-b2b0-6e270c9be64f": {"__data__": {"id_": "648c1945-0c6d-4981-b2b0-6e270c9be64f", "embedding": null, "metadata": {"page_label": "239", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b24f9350-12f6-4b97-bd8b-a64425d0c89c", "node_type": "4", "metadata": {"page_label": "239", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "7c7982eeb347943cd56a8814fc327688c44e647eb47c7e2c7439088db02951fd", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "239 | P a g e  \n \n \nDirectory Structure of Spring MVC using Maven \n \n \nRequired Jar files or Maven Dependency \nTo run this example, you need to load: \n\uf0b7 Spring Core jar files", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 178, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "bf60fcc5-8df9-42f2-b964-9d3ff5ea7b53": {"__data__": {"id_": "bf60fcc5-8df9-42f2-b964-9d3ff5ea7b53", "embedding": null, "metadata": {"page_label": "240", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "21c17c90-ab28-4faa-828a-d0b095a66af4", "node_type": "4", "metadata": {"page_label": "240", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "2dd2033a3f4b100c23dbbc49c68e7bcf2f0f2c76c762cd5ac391ae796b62c159", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "240 | P a g e  \n \n\uf0b7 Spring Web jar files \n\uf0b7 JSP + JSTL jar files (If you are using any another view technology then load the \ncorresponding jar files). \nDownload Link:Download all the jar files for spring including JSP and JSTL.  \nIf you are using Maven, you don't need to add jar files. Now, you need to add maven \ndependency to the pom.xml file. \n1. Provide project information and configuration in the pom.xml file. \npom.xml \n1. <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org\n/2001/XMLSchema-instance\"   \n2.   xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-\nv4_0_0.xsd\">   \n3.   <modelVersion>4.0.0</modelVersion>   \n4.   <groupId>com.javatpoint</groupId>   \n5.   <artifactId>SpringMVC</artifactId>   \n6.   <packaging>war</packaging>   \n7.   <version>0.0.1-SNAPSHOT</version>   \n8.   <name>SpringMVC Maven Webapp</name>   \n9.   <url>http://maven.apache.org</url>   \n10.   <dependencies>   \n11.     <dependency>   \n12.       <groupId>junit</groupId>   \n13.       <artifactId>junit</artifactId>   \n14.       <version>3.8.1</version>   \n15.       <scope>test</scope>   \n16.     </dependency>   \n17.        \n18.     <!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc -->   \n19. <dependency>   \n20.     <groupId>org.springframework</groupId>   \n21.     <artifactId>spring-webmvc</artifactId>   \n22.     <version>5.1.1.RELEASE</version>   \n23. </dependency>   \n24.    \n25. <!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api -->   \n26. <dependency>     \n27.     <groupId>javax.servlet</groupId>     \n28.     <artifactId>servlet-api</artifactId>     \n29.     <version>3.0-alpha-1</version>     \n30. </dependency>   \n31.    \n32.   </dependencies>   \n33.   <build>   \n34.     <finalName>SpringMVC</finalName>   \n35.   </build>   \n36. </project>", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1855, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f8692c69-720b-453a-8a30-f73c4b12746d": {"__data__": {"id_": "f8692c69-720b-453a-8a30-f73c4b12746d", "embedding": null, "metadata": {"page_label": "241", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "06c7d0d7-1037-4c50-ba85-5d0287cb80d0", "node_type": "4", "metadata": {"page_label": "241", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "965c3fa98818b32798444fbd2354b9490a46e02d8448273edfcd40072be7e518", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "241 | P a g e  \n \n2. Create the controller class \nTo create the controller class, we are using two annotations @Controller and \n@RequestMapping. \nThe @Controller annotation marks this class as Controller. \nThe @Requestmapping annotation is used to map the class with the specified URL name. \nHelloController.java \n1. package com.javatpoint;   \n2. import org.springframework.stereotype.Controller;   \n3. import org.springframework.web.bind.annotation.RequestMapping;   \n4. @Controller   \n5. public class HelloController {   \n6. @RequestMapping(\"/\")   \n7.     public String display()   \n8.     {   \n9.         return \"index\";   \n10.     }      \n11. }   \n3. Provide the entry of controller in the web.xml file \nIn this xml file, we are specifying the servlet class DispatcherServlet that acts as the front \ncontroller in Spring Web MVC. All the incoming request for the html file will be forwarded \nto the DispatcherServlet. \nweb.xml \n1. <?xml version=\"1.0\" encoding=\"UTF-8\"?>   \n2. <web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-\ninstance\" xmlns=\"http://java.sun.com/xml/ns/javaee\" xsi:schemaLocation=\"http://java.sun.co\nm/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-\napp_3_0.xsd\" id=\"WebApp_ID\" version=\"3.0\">   \n3.   <display-name>SpringMVC</display-name>   \n4.    <servlet>     \n5.     <servlet-name>spring</servlet-name>     \n6.     <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>     \n7.     <load-on-startup>1</load-on-startup>       \n8. </servlet>     \n9. <servlet-mapping>     \n10.     <servlet-name>spring</servlet-name>     \n11.     <url-pattern>/</url-pattern>     \n12. </servlet-mapping>     \n13. </web-app>   \n4. Define the bean in the xml file \nThis is the important configuration file where we need to specify the View components.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1794, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "02550537-4e6e-490c-999c-9d6622e3d9f9": {"__data__": {"id_": "02550537-4e6e-490c-999c-9d6622e3d9f9", "embedding": null, "metadata": {"page_label": "242", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6cb32b6a-8d69-4213-8e56-2475e553b488", "node_type": "4", "metadata": {"page_label": "242", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "a220433a95062f0039de9009fb645350622a2f9cc6ce3555032662bd3654fbfb", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "242 | P a g e  \n \nThe context:component-scan element defines the base-package where DispatcherServlet will \nsearch the controller class. \nThis xml file should be located inside the WEB-INF directory. \nspring-servlet.xml \n1. <?xml version=\"1.0\" encoding=\"UTF-8\"?>   \n2. <beans xmlns=\"http://www.springframework.org/schema/beans\"   \n3.     xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"    \n4.     xmlns:context=\"http://www.springframework.org/schema/context\"   \n5.     xmlns:mvc=\"http://www.springframework.org/schema/mvc\"   \n6.     xsi:schemaLocation=\"   \n7.         http://www.springframework.org/schema/beans   \n8.         http://www.springframework.org/schema/beans/spring-beans.xsd   \n9.         http://www.springframework.org/schema/context   \n10.         http://www.springframework.org/schema/context/spring-context.xsd   \n11.         http://www.springframework.org/schema/mvc   \n12.         http://www.springframework.org/schema/mvc/spring-mvc.xsd\">   \n13.    \n14.     <!-- Provide support for component scanning -->   \n15.     <context:component-scan base-package=\"com.javatpoint\" />   \n16.    \n17.     <!--Provide support for conversion, formatting and validation -->   \n18.     <mvc:annotation-driven/>   \n19.    \n20. </beans>   \n5. Display the message in the JSP page \nThis is the simple JSP page, displaying the message returned by the Controller. \nindex.jsp \n1. <html>   \n2. <body>   \n3. <p>Welcome to Spring MVC Tutorial</p>   \n4. </body>   \n5. </html>   \nOutput:", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1488, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f9f0964e-59e5-4f94-9021-913ecf3627c7": {"__data__": {"id_": "f9f0964e-59e5-4f94-9021-913ecf3627c7", "embedding": null, "metadata": {"page_label": "243", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "621417a0-fade-426b-a9cc-0ae16f8eddf0", "node_type": "4", "metadata": {"page_label": "243", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "f4ec3afc247cabab73c8a5804251d89564af74aa5c3678519d328bee445044db", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "243 | P a g e  \n \n \n \n \nRESTful API using Spring Framework \nBuilding REST services with Spring \nREST has quickly become the de-facto standard for building web services on the web \nbecause they\u2019re easy to build and easy to consume. \nThere\u2019s a much larger discussion to be had about how REST fits in the world of \nmicroservices, but \u2014 for this tutorial \u2014 let\u2019s just look at building RESTful services. \nWhy REST? REST embraces the precepts of the web, including its architecture, benefits, and \neverything else. This is no surprise given its author, Roy Fielding, was involved in probably a \ndozen specs which govern how the web operates. \nWhat benefits? The web and its core protocol, HTTP, provide a stack of features: \n\uf0b7 Suitable actions (GET, POST, PUT, DELETE, \u2026) \n\uf0b7 Caching \n\uf0b7 Redirection and forwarding \n\uf0b7 Security (encryption and authentication) \nThese are all critical factors on building resilient services. But that is not all. The web is built \nout of lots of tiny specs, hence it\u2019s been able to evolve easily, without getting bogged down in \n\"standards wars\". \nDevelopers are able to draw upon 3rd party toolkits that implement these diverse specs and", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1165, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ee5981f6-84ef-4bab-b692-c4c14efdda6e": {"__data__": {"id_": "ee5981f6-84ef-4bab-b692-c4c14efdda6e", "embedding": null, "metadata": {"page_label": "244", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c21c4975-ac8a-45dd-a918-7adbf9276cfd", "node_type": "4", "metadata": {"page_label": "244", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "6edcf530159fceb0dd8a2afdf2a372d79c8fab8a086079fb9c669109603d21f0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "244 | P a g e  \n \ninstantly have both client and server technology at their fingertips. \nBy building on top of HTTP, REST APIs provide the means to build: \n\uf0b7 Backwards compatible APIs \n\uf0b7 Evolvable APIs \n\uf0b7 Scaleable services \n\uf0b7 Securable services \n\uf0b7 A spectrum of stateless to stateful services \nWhat\u2019s important to realize is that REST, however ubiquitous, is not a standard, per se, but \nan approach, a style, a set of constraints on your architecture that can help you build web-\nscale systems. In this tutorial we will use the Spring portfolio to build a RESTful service \nwhile leveraging the stackless features of REST. \nGetting Started \nAs we work through this tutorial, we\u2019ll use Spring Boot. Go to Spring Initializr and add the \nfollowing dependencies to a project: \n\uf0b7 Web \n\uf0b7 JPA \n\uf0b7 H2 \nChange the Name to \"Payroll\" and then choose \"Generate Project\". A .zip will download. \nUnzip it. Inside you\u2019ll find a simple, Maven-based project including a pom.xml build file \n(NOTE: You can use Gradle. The examples in this tutorial will be Maven-based.) \nSpring Boot can work with any IDE. You can use Eclipse, IntelliJ IDEA, Netbeans, etc. The \nSpring Tool Suite is an open-source, Eclipse-based IDE distribution that provides a superset \nof the Java EE distribution of Eclipse. It includes features that make working with Spring \napplications even easier. It is, by no means, required. But consider it if you want that extra \noomph for your keystrokes. Here\u2019s a video demonstrating how to get started with STS and \nSpring Boot. This is a general introduction to familiarize you with the tools. \nThe Story so Far\u2026 \nLet\u2019s start off with the simplest thing we can construct. In fact, to make it as simple as \npossible, we can even leave out the concepts of REST. (Later on, we\u2019ll add REST to \nunderstand the difference.) \nBig picture: We\u2019re going to create a simple payroll service that manages the employees of a \ncompany. We\u2019ll store employee objects in a (H2 in-memory) database, and access them (via \nsomething called JPA). Then we\u2019ll wrap that with something that will allow access over the \ninternet (called the Spring MVC layer). \nThe following code defines an Employee in our system.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 2192, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "abc34b3a-b898-4acf-b77e-e021c0e82e0a": {"__data__": {"id_": "abc34b3a-b898-4acf-b77e-e021c0e82e0a", "embedding": null, "metadata": {"page_label": "245", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9e13f3f6-9a15-445a-b89b-94064c440deb", "node_type": "4", "metadata": {"page_label": "245", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "09a4429d6aa284ea53414d7dfcc59ce35e8c89b666b69768263b815d83e773fe", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "245 | P a g e  \n \nnonrest/src/main/java/payroll/Employee.java  \npackage payroll; \n \nimportjava.util.Objects; \n \nimportjavax.persistence.Entity; \nimportjavax.persistence.GeneratedValue; \nimportjavax.persistence.Id; \n \n@Entity \nclassEmployee{ \n \nprivate@Id@GeneratedValueLong id; \nprivateString name; \nprivateString role; \n \nEmployee(){} \n \nEmployee(String name,String role){ \n \nthis.name = name; \nthis.role= role; \n} \n \npublicLonggetId(){ \nreturnthis.id; \n} \n \npublicStringgetName(){ \nreturnthis.name; \n} \n \npublicStringgetRole(){ \nreturnthis.role; \n} \n \npublicvoidsetId(Long id){ \nthis.id = id; \n} \n \npublicvoidsetName(String name){ \nthis.name = name; \n} \n \npublicvoidsetRole(String role){ \nthis.role= role; \n} \n \n@Override \npublicbooleanequals(Object o){ \n \nif(this== o) \nreturntrue; \nif(!(o instanceofEmployee)) \nreturnfalse; \nEmployeeemployee=(Employee) o; \nreturnObjects.equals(this.id, employee.id)&&Objects.equals(this.name, employee.name) \n&&Objects.equals(this.role,employee.role); \n}", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 996, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f749a2c8-c7e7-438a-9033-1cdce0e6bbbc": {"__data__": {"id_": "f749a2c8-c7e7-438a-9033-1cdce0e6bbbc", "embedding": null, "metadata": {"page_label": "246", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "38d4170c-00d0-46d3-8f53-bf0c2d5cd615", "node_type": "4", "metadata": {"page_label": "246", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "6a02b8111314d7d893c466724cc2f146dbcc5b71a9f410bdc5974f8853afa0c7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "246 | P a g e  \n \n \n@Override \npublicinthashCode(){ \nreturnObjects.hash(this.id,this.name,this.role); \n} \n \n@Override \npublicStringtoString(){ \nreturn\"Employee{\"+\"id=\"+this.id +\", name='\"+this.name +'\\''+\", role='\"+this.role+'\\''+'}'; \n} \n} \nDespite being small, this Java class contains much: \n\uf0b7 @Entity is a JPA annotation to make this object ready for storage in a JPA-based data \nstore. \n\uf0b7 id, name, and role are attributes of our Employee domain object. id is marked with more \nJPA annotations to indicate it\u2019s the primary key and automatically populated by the \nJPA provider. \n\uf0b7 a custom constructor is created when we need to create a new instance, but don\u2019t yet \nhave an id. \nWith this domain object definition, we can now turn to Spring Data JPA to handle the tedious \ndatabase interactions. \nSpring Data JPA repositories are interfaces with methods supporting creating, reading, \nupdating, and deleting records against a back end data store. Some repositories also support \ndata paging, and sorting, where appropriate. Spring Data synthesizes implementations based \non conventions found in the naming of the methods in the interface. \n \nThere are multiple repository implementations besides JPA. You can use Spring Data MongoDB, \nSpring Data GemFire, Spring Data Cassandra, etc. For this tutorial, we\u2019ll stick with JPA.  \nSpring makes accessing data easy. By simply declaring the following EmployeeRepository \ninterface we automatically will be able to \n\uf0b7 Create new Employees \n\uf0b7 Update existing ones \n\uf0b7 Delete Employees \n\uf0b7 Find Employees (one, all, or search by simple or complex properties) \nnonrest/src/main/java/payroll/EmployeeRepository.java  \npackage payroll; \n \nimportorg.springframework.data.jpa.repository.JpaRepository; \n \ninterfaceEmployeeRepositoryextendsJpaRepository<Employee,Long>{ \n \n} \nTo get all this free functionality, all we had to do was declare an interface which extends", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1909, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "dabc6da1-0c12-47a8-8f70-38e431e2c87c": {"__data__": {"id_": "dabc6da1-0c12-47a8-8f70-38e431e2c87c", "embedding": null, "metadata": {"page_label": "247", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8942beb4-06af-4791-bdb9-ec46ce5af85b", "node_type": "4", "metadata": {"page_label": "247", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "4782bc1313941f8462ef607a4e317374d64765867e0d7cc4cf43e1bc9122890d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "247 | P a g e  \n \nSpring Data JPA\u2019s JpaRepository, specifying the domain type as Employee and the id type as \nLong. \nSpring Data\u2019s repository solution makes it possible to sidestep data store specifics and instead \nsolve a majority of problems using domain-specific terminology. \nBelieve it or not, this is enough to launch an application! A Spring Boot application is, at a \nminimum, a public static void main entry-point and the @SpringBootApplication annotation. This \ntells Spring Boot to help out, wherever possible. \nnonrest/src/main/java/payroll/PayrollApplication.java  \npackage payroll; \n \nimportorg.springframework.boot.SpringApplication; \nimportorg.springframework.boot.autoconfigure.SpringBootApplication; \n \n@SpringBootApplication \npublicclassPayrollApplication{ \n \npublicstaticvoidmain(String...args){ \nSpringApplication.run(PayrollApplication.class,args); \n} \n} \n@SpringBootApplication is a meta-annotation that pulls in component scanning, \nautoconfiguration, and property support. We won\u2019t dive into the details of Spring Boot in \nthis tutorial, but in essence, it will fire up a servlet container and serve up our service. \nNevertheless, an application with no data isn\u2019t very interesting, so let\u2019s preload it. The \nfollowing class will get loaded automatically by Spring: \nnonrest/src/main/java/payroll/LoadDatabase.java  \npackage payroll; \n \nimportorg.slf4j.Logger; \nimportorg.slf4j.LoggerFactory; \nimportorg.springframework.boot.CommandLineRunner; \nimportorg.springframework.context.annotation.Bean; \nimportorg.springframework.context.annotation.Configuration; \n \n@Configuration \nclassLoadDatabase{ \n \nprivatestaticfinalLogger log =LoggerFactory.getLogger(LoadDatabase.class); \n \n@Bean \nCommandLineRunnerinitDatabase(EmployeeRepository repository){ \n \nreturnargs->{ \nlog.info(\"Preloading \"+repository.save(newEmployee(\"Bilbo Baggins\",\"burglar\"))); \nlog.info(\"Preloading \"+repository.save(newEmployee(\"Frodo Baggins\",\"thief\"))); \n}; \n} \n}", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1962, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "074c1ca4-8f8b-43fc-a161-463d908396f9": {"__data__": {"id_": "074c1ca4-8f8b-43fc-a161-463d908396f9", "embedding": null, "metadata": {"page_label": "248", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7d692460-1447-4c90-ad40-225d06e3c6e1", "node_type": "4", "metadata": {"page_label": "248", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "f5a4934c6efef76c924187cf58cd1a9e297a51ad5f1c894ddd434e6045e0471f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "248 | P a g e  \n \nWhat happens when it gets loaded? \n\uf0b7 Spring Boot will run ALL CommandLineRunner beans once the application context is \nloaded. \n\uf0b7 This runner will request a copy of the EmployeeRepository you just created. \n\uf0b7 Using it, it will create two entities and store them. \nRight-click and RunPayRollApplication, and this is what you get: \nFragment of console output showing preloading of data  \n... \n2018-08-09 11:36:26.169  INFO 74611 --- [main] payroll.LoadDatabase : Preloading Employee(id=1, \nname=Bilbo Baggins, role=burglar) \n2018-08-09 11:36:26.174  INFO 74611 --- [main] payroll.LoadDatabase : Preloading Employee(id=2, \nname=Frodo Baggins, role=thief) \n... \nThis isn\u2019t the whole log, but just the key bits of preloading data. (Indeed, check out the whole \nconsole. It\u2019s glorious.) \nHTTP is the Platform \nTo wrap your repository with a web layer, you must turn to Spring MVC. Thanks to Spring \nBoot, there is little in infrastructure to code. Instead, we can focus on actions: \nnonrest/src/main/java/payroll/EmployeeController.java  \npackage payroll; \n \nimportjava.util.List; \n \nimportorg.springframework.web.bind.annotation.DeleteMapping; \nimportorg.springframework.web.bind.annotation.GetMapping; \nimportorg.springframework.web.bind.annotation.PathVariable; \nimportorg.springframework.web.bind.annotation.PostMapping; \nimportorg.springframework.web.bind.annotation.PutMapping; \nimportorg.springframework.web.bind.annotation.RequestBody; \nimportorg.springframework.web.bind.annotation.RestController; \n \n@RestController \nclassEmployeeController{ \n \nprivatefinalEmployeeRepository repository; \n \nEmployeeController(EmployeeRepository repository){ \nthis.repository= repository; \n} \n \n \n// Aggregate root \n// tag::get-aggregate-root[] \n@GetMapping(\"/employees\") \nList<Employee>all(){ \nreturnrepository.findAll();", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1831, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2b83110f-8403-4c7a-b468-126a63d20847": {"__data__": {"id_": "2b83110f-8403-4c7a-b468-126a63d20847", "embedding": null, "metadata": {"page_label": "249", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6dea04da-ac6d-4810-a820-a663ab293c55", "node_type": "4", "metadata": {"page_label": "249", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "973b155bab0040bb6813b713856b28112e7f99c2771f31a67009242aebc6a1f1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "249 | P a g e  \n \n} \n// end::get-aggregate-root[] \n \n@PostMapping(\"/employees\") \nEmployeenewEmployee(@RequestBodyEmployeenewEmployee){ \nreturnrepository.save(newEmployee); \n} \n \n// Single item \n \n@GetMapping(\"/employees/{id}\") \nEmployeeone(@PathVariableLong id){ \n \nreturnrepository.findById(id) \n.orElseThrow(()->newEmployeeNotFoundException(id)); \n} \n \n@PutMapping(\"/employees/{id}\") \nEmployeereplaceEmployee(@RequestBodyEmployeenewEmployee,@PathVariableLong id){ \n \nreturnrepository.findById(id) \n.map(employee ->{ \nemployee.setName(newEmployee.getName()); \nemployee.setRole(newEmployee.getRole()); \nreturnrepository.save(employee); \n}) \n.orElseGet(()->{ \nnewEmployee.setId(id); \nreturnrepository.save(newEmployee); \n}); \n} \n \n@DeleteMapping(\"/employees/{id}\") \nvoiddeleteEmployee(@PathVariableLong id){ \nrepository.deleteById(id); \n} \n} \n\uf0b7 @RestController indicates that the data returned by each method will be written straight \ninto the response body instead of rendering a template. \n\uf0b7 An EmployeeRepository is injected by constructor into the controller. \n\uf0b7 We have routes for each operation (@GetMapping, @PostMapping, @PutMapping and \n@DeleteMapping, corresponding to HTTP GET, POST, PUT, and DELETE calls). (NOTE: \nIt\u2019s useful to read each method and understand what they do.) \n\uf0b7 EmployeeNotFoundException is an exception used to indicate when an employee is looked \nup but not found. \nnonrest/src/main/java/payroll/EmployeeNotFoundException.java  \npackage payroll; \n \nclassEmployeeNotFoundExceptionextendsRuntimeException{ \n \nEmployeeNotFoundException(Long id){ \nsuper(\"Could not find employee \"+ id); \n} \n}", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1623, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2e439dd9-6b85-4be1-b9a6-16538a1d7362": {"__data__": {"id_": "2e439dd9-6b85-4be1-b9a6-16538a1d7362", "embedding": null, "metadata": {"page_label": "250", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "febd701f-eef3-48b3-95f4-28c343f9e48c", "node_type": "4", "metadata": {"page_label": "250", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "3fcf7a5f3aca3b3feff7a7a8bc7bf1e5c1442081c45448139b4b8612cb7c1a40", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "250 | P a g e  \n \nWhen an EmployeeNotFoundException is thrown, this extra tidbit of Spring MVC configuration is \nused to render an HTTP 404: \nnonrest/src/main/java/payroll/EmployeeNotFoundAdvice.java  \npackage payroll; \n \nimportorg.springframework.http.HttpStatus; \nimportorg.springframework.web.bind.annotation.ControllerAdvice; \nimportorg.springframework.web.bind.annotation.ExceptionHandler; \nimportorg.springframework.web.bind.annotation.ResponseBody; \nimportorg.springframework.web.bind.annotation.ResponseStatus; \n \n@ControllerAdvice \nclassEmployeeNotFoundAdvice{ \n \n@ResponseBody \n@ExceptionHandler(EmployeeNotFoundException.class) \n@ResponseStatus(HttpStatus.NOT_FOUND) \nStringemployeeNotFoundHandler(EmployeeNotFoundException ex){ \nreturnex.getMessage(); \n} \n} \n\uf0b7 @ResponseBody signals that this advice is rendered straight into the response body. \n\uf0b7 @ExceptionHandler configures the advice to only respond if an EmployeeNotFoundException \nis thrown. \n\uf0b7 @ResponseStatus says to issue an HttpStatus.NOT_FOUND, i.e. an HTTP 404. \n\uf0b7 The body of the advice generates the content. In this case, it gives the message of the \nexception. \nTo launch the application, either right-click the public static void main in PayRollApplication and \nselect Run from your IDE, or: \nSpring Initializr uses maven wrapper so type this: \n$ ./mvnw clean spring-boot:run \nAlternatively using your installed maven version type this: \n$ mvn clean spring-boot:run \nWhen the app starts, we can immediately interrogate it. \n$ curl -v localhost:8080/employees \nThis will yield: \n*   Trying ::1... \n* TCP_NODELAY set \n* Connected to localhost (::1) port 8080 (#0) \n> GET /employees HTTP/1.1 \n> Host: localhost:8080 \n> User-Agent: curl/7.54.0", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1722, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e967ada2-2b18-4724-85f0-f25908ecc66a": {"__data__": {"id_": "e967ada2-2b18-4724-85f0-f25908ecc66a", "embedding": null, "metadata": {"page_label": "251", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1c331643-ec85-4bd2-97af-17ba1d238ac6", "node_type": "4", "metadata": {"page_label": "251", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "a002219ce1c2a728cc9ea02a692a96bc1430b141737be8ebb9c521aa6ba21346", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "251 | P a g e  \n \n> Accept: */* \n> \n< HTTP/1.1 200 \n< Content-Type: application/json;charset=UTF-8 \n< Transfer-Encoding: chunked \n< Date: Thu, 09 Aug 2018 17:58:00 GMT \n< \n* Connection #0 to host localhost left intact \n[{\"id\":1,\"name\":\"Bilbo Baggins\",\"role\":\"burglar\"},{\"id\":2,\"name\":\"Frodo Baggins\",\"role\":\"thief\"}] \nHere you can see the pre-loaded data, in a compacted format. \nIf you try and query a user that doesn\u2019t exist\u2026 \n$ curl -v localhost:8080/employees/99 \nYou get\u2026 \n*   Trying ::1... \n* TCP_NODELAY set \n* Connected to localhost (::1) port 8080 (#0) \n> GET /employees/99 HTTP/1.1 \n> Host: localhost:8080 \n> User-Agent: curl/7.54.0 \n> Accept: */* \n> \n< HTTP/1.1 404 \n< Content-Type: text/plain;charset=UTF-8 \n< Content-Length: 26 \n< Date: Thu, 09 Aug 2018 18:00:56 GMT \n< \n* Connection #0 to host localhost left intact \nCould not find employee 99 \nThis message nicely shows an HTTP 404 error with the custom message Could not find \nemployee 99. \nIt\u2019s not hard to show the currently coded interactions\u2026 \n \nIf you are using Windows Command Prompt to issue cURL commands, chances are the \nbelow command won\u2019t work properly. You must either pick a terminal that support single \nquoted arguments, or use double quotes and then escape the ones inside the JSON. \nTo create a new Employee record we use the following command in a terminal\u2014the $ at the \nbeginning signifies that what follows it is a terminal command: \n$ curl -X POST localhost:8080/employees -H 'Content-type:application/json' -d '{\"name\": \"Samwise Gamgee\", \n\"role\": \"gardener\"}' \nThen it stores newly created employee and sends it back to us: \n{\"id\":3,\"name\":\"Samwise Gamgee\",\"role\":\"gardener\"}", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1668, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b77b2abe-67c9-46dc-be55-0abc3a89b485": {"__data__": {"id_": "b77b2abe-67c9-46dc-be55-0abc3a89b485", "embedding": null, "metadata": {"page_label": "252", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "11b6d544-fbeb-4fd2-94dd-64e81b524802", "node_type": "4", "metadata": {"page_label": "252", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "1a9f8bc1c0ecf2a2fbe57f5f507942f3be6f45ee8ec6e0107b0321a5c594c0a9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "252 | P a g e  \n \nYou can update the user. Let\u2019s change his role. \n$ curl -X PUT localhost:8080/employees/3 -H 'Content-type:application/json' -d '{\"name\": \"Samwise Gamgee\", \n\"role\": \"ring bearer\"}' \nAnd we can see the change reflected in the output. \n{\"id\":3,\"name\":\"Samwise Gamgee\",\"role\":\"ring bearer\"} \n \nThe way you construct your service can have significant impacts. In this situation, we said update, \nbut replace is a better description. For example, if the name was NOT provided, it would instead get \nnulled out.  \nFinally, you can delete users like this: \n$ curl -X DELETE localhost:8080/employees/3 \n \n# Now if we look again, it's gone \n$ curl localhost:8080/employees/3 \nCould not find employee 3 \nThis is all well and good, but do we have a RESTful service yet? (If you didn\u2019t catch the hint, \nthe answer is no.) \nWhat\u2019s missing? \nWhat makes something RESTful? \nSo far, you have a web-based service that handles the core operations involving employee \ndata. But that\u2019s not enough to make things \"RESTful\". \n\uf0b7 Pretty URLs like /employees/3 aren\u2019t REST. \n\uf0b7 Merely using GET, POST, etc. isn\u2019t REST. \n\uf0b7 Having all the CRUD operations laid out isn\u2019t REST. \nIn fact, what we have built so far is better described as RPC (Remote Procedure Call). \nThat\u2019s because there is no way to know how to interact with this service. If you published this \ntoday, you\u2019d also have to write a document or host a developer\u2019s portal somewhere with all \nthe details. \nThis statement of Roy Fielding\u2019s may further lend a clue to the difference between REST \nand RPC: \nI am getting frustrated by the number of people calling any HTTP-based interface a REST \nAPI. Today\u2019s example is the SocialSite REST API. That is RPC. It screams RPC. There is so \nmuch coupling on display that it should be given an X rating. \nWhat needs to be done to make the REST architectural style clear on the notion that hypertext \nis a constraint? In other words, if the engine of application state (and hence the API) is not \nbeing driven by hypertext, then it cannot be RESTful and cannot be a REST API. Period. Is", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 2084, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "489a2b51-ae8d-4870-89e4-93b9e9879962": {"__data__": {"id_": "489a2b51-ae8d-4870-89e4-93b9e9879962", "embedding": null, "metadata": {"page_label": "253", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ae53d6d2-8c67-45f1-9c9a-96e927b6aa19", "node_type": "4", "metadata": {"page_label": "253", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "bd5c2a0cdd4040fd3a2c9cb46b1be4f1bdf54a4e70ed85cf70ea6ce79350f31c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "253 | P a g e  \n \nthere some broken manual somewhere that needs to be fixed? \n\u2014 Roy Fielding  \nhttps://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven \nThe side effect of NOT including hypermedia in our representations is that clients MUST \nhard code URIs to navigate the API. This leads to the same brittle nature that predated the \nrise of e-commerce on the web. It\u2019s a signal that our JSON output needs a little help. \nIntroducing Spring HATEOAS, a Spring project aimed at helping you write hypermedia-\ndriven outputs. To upgrade your service to being RESTful, add this to your build: \nAdding Spring HATEOAS to dependencies section of pom.xml \n<dependency> \n <groupId>org.springframework.boot</groupId> \n <artifactId>spring-boot-starter-hateoas</artifactId> \n</dependency> \nThis tiny library will give us the constructs to define a RESTful service and then render it in \nan acceptable format for client consumption. \nA critical ingredient to any RESTful service is adding links to relevant operations. To make \nyour controller more RESTful, add links like this: \nGetting a single item resource  \n@GetMapping(\"/employees/{id}\") \nEntityModel<Employee>one(@PathVariableLong id){ \n \nEmployeeemployee=repository.findById(id)// \n.orElseThrow(()->newEmployeeNotFoundException(id)); \n \nreturnEntityModel.of(employee,// \n      linkTo(methodOn(EmployeeController.class).one(id)).withSelfRel(), \n      linkTo(methodOn(EmployeeController.class).all()).withRel(\"employees\")); \n} \n \nThis tutorial is based on Spring MVC and uses the static helper methods from \nWebMvcLinkBuilder to build these links. If you are using Spring WebFlux in your project, you \nmust instead use WebFluxLinkBuilder. \nThis is very similar to what we had before, but a few things have changed: \n\uf0b7 The return type of the method has changed from Employee to EntityModel<Employee>. \nEntityModel<T> is a generic container from Spring HATEOAS that includes not only \nthe data but a collection of links. \n\uf0b7 linkTo(methodOn(EmployeeController.class).one(id)).withSelfRel() asks that Spring HATEOAS \nbuild a link to the EmployeeController 's one() method, and flag it as a self link. \n\uf0b7 linkTo(methodOn(EmployeeController.class).all()).withRel(\"employees\") asks Spring HATEOAS \nto build a link to the aggregate root, all(), and call it \"employees\". \nWhat do we mean by \"build a link\"? One of Spring HATEOAS\u2019s core types is Link. It \nincludes a URI and a rel (relation). Links are what empower the web. Before the World Wide", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 2497, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d6249839-9ce3-4840-b60b-efdbf409f335": {"__data__": {"id_": "d6249839-9ce3-4840-b60b-efdbf409f335", "embedding": null, "metadata": {"page_label": "254", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c1e9ea9d-10e1-4477-b2cb-2db25670dcc5", "node_type": "4", "metadata": {"page_label": "254", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "a13c45fec74e01df749e31255a4d49a1e5c03ea7c5ff0846b9425a19001e38af", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "254 | P a g e  \n \nWeb, other document systems would render information or links, but it was the linking of \ndocuments WITH this kind of relationship metadata that stitched the web together. \nRoy Fielding encourages building APIs with the same techniques that made the web \nsuccessful, and links are one of them. \nIf you restart the application and query the employee record of Bilbo, you\u2019ll get a slightly \ndifferent response than earlier: \n \nCurling prettier  \nWhen your curl output gets more complex it can become hard to read. Use this or other tips \nto prettify the json returned by curl: \n# The indicated part pipes the output to json_pp and asks it to make your JSON pretty. (Or use whatever tool \nyou like!) \n#                                  v------------------v \ncurl -v localhost:8080/employees/1 | json_pp \nRESTful representation of a single employee  \n{ \n\"id\":1, \n\"name\":\"Bilbo Baggins\", \n\"role\":\"burglar\", \n\"_links\":{ \n\"self\":{ \n\"href\":\"http://localhost:8080/employees/1\" \n}, \n\"employees\":{ \n\"href\":\"http://localhost:8080/employees\" \n} \n} \n} \nThis decompressed output shows not only the data elements you saw earlier (id, name and \nrole), but also a _links entry containing two URIs. This entire document is formatted using \nHAL. \nHAL is a lightweight mediatype that allows encoding not just data but also hypermedia \ncontrols, alerting consumers to other parts of the API they can navigate toward. In this case, \nthere is a \"self\" link (kind of like a this statement in code) along with a link back to the \naggregate root. \nTo make the aggregate root ALSO more RESTful, you want to include top level links while \nALSO including any RESTful components within. \nSo we turn this \nGetting an aggregate root  \n@GetMapping(\"/employees\") \nList<Employee>all(){ \nreturnrepository.findAll(); \n}", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1803, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "48f93d15-892c-4298-b27b-da90efa2770c": {"__data__": {"id_": "48f93d15-892c-4298-b27b-da90efa2770c", "embedding": null, "metadata": {"page_label": "255", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1dd86f1b-f223-428a-be80-4977f47aa5d5", "node_type": "4", "metadata": {"page_label": "255", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "6da51a1048fbf7397ae2231e3a4a4abcefa4dea971ac5bb1e620772cf341636b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "255 | P a g e  \n \ninto this \nGetting an aggregate root resource \n@GetMapping(\"/employees\") \nCollectionModel<EntityModel<Employee>>all(){ \n \nList<EntityModel<Employee>> employees =repository.findAll().stream() \n.map(employee ->EntityModel.of(employee, \n          linkTo(methodOn(EmployeeController.class).one(employee.getId())).withSelfRel(), \n          linkTo(methodOn(EmployeeController.class).all()).withRel(\"employees\"))) \n.collect(Collectors.toList()); \n \nreturnCollectionModel.of(employees,linkTo(methodOn(EmployeeController.class).all()).withSelfRel()); \n} \nWow! That method, which used to just be repository.findAll(), is all grown up! Not to worry. \nLet\u2019s unpack it. \nCollectionModel<> is another Spring HATEOAS container; it\u2019s aimed at en \nBuilding an application usingMaven \nMaven is one of the open-source Java build tools developed by Apache Software Foundation. \nIt can compile, test, and package a java program into .jar or .war format. \nMaven makes use of the pom.xml file to build java projects. \nProject Object Model (POM) is an XML file that contains the java project details, \nconfigurations, and settings required for maven to build the project.  \nThe pom.xml file is present in the root of the java project directory. Primarily it contains the \nproject dependencies. \nFor example, when a developer wants to implement a PostgreSQL database connectivity \nfunctionality, he will make use of the PostgreSQL JDBC Driver dependency from the maven \nrepository by adding it to the pom.xml file. \nSo when you build the code with maven, it reads the pom.xml file and downloads all the \ndependencies from the maven repository. Dependencies could be third-party libraries from \nthe public Maven Repository or common libraries hosted within an organization\u2019s private \nmaven repository. You can compare it with Python pip, Nodejs npm, or Ruby gems \nCommonly organizations use Sonatyope nexus as a private hosted maven repository. \nBy default, maven uses the public repository but if you have in-house private maven \nrepositories, you configure custom maven repository URLs in settings.xml maven configuration \npresent in the maven installation directory. for example, /opt/apache-maven-3.8.6/conf/settings.xml", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 2220, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "08e133cb-341f-4ea4-b393-9e47961b5251": {"__data__": {"id_": "08e133cb-341f-4ea4-b393-9e47961b5251", "embedding": null, "metadata": {"page_label": "256", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "69f37083-fc6f-4e7e-ad0a-4338b6a58039", "node_type": "4", "metadata": {"page_label": "256", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "bd4ce6926041ea5865bebf784535954769c84a84f48eade7cbe0fadebb17e2a0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "256 | P a g e  \n \nMaven Prerequisites \nFor maven to work you need the following installed on your system \n1. Java JDK \n2. Maven \nTo install and configure JDK and maven, follow the maven installation guide. \nBuild Java Application Using Maven \nFor this example, we will be using the open-source java spring boot application named pet-\nclinic. \nFirst, clone the application to your development machine or server. \ngit clone https://github.com/spring-projects/spring-petclinic.git \nThe code base has the following important folders and files. It is common in real-time project \ncode as well. \n1. /src folder: This folder contains the source code based on the java spring framework.  \n2. /src/tests folder: This folder contains the unit tests & integration tests of the code under the \ntests folder. \n3. pom.xml file: It contains all the dependencies required for the pet-clinic applications. As it is \nan open-source application, all the dependencies are from the public maven repository. \nTo build the project, cd into the project root directory. In my case its spring-petclinic. It should \ncontain the pom.xml file \ncd spring-petclinic \nFrom a CI perspective, we just have to build, test, and package the project to create a \ndeployable artifact(jar file) \nSo commonly in the CI process, we build and package the java projects using the following \nmaven command. It compiles the code, tests it, package it as a jar file in the target folder, and \nwill also install(copy) the jar package in the local .m2 repository. \nmvn clean install \nAfter executing the above command, you will see a folder named target in the root directory. \nInside the target directory, you will see the packaged jar file as shown below. We call it a \ndeployable artifact.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1747, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "bc18ec94-26e8-4614-8b3c-248b580e6cbb": {"__data__": {"id_": "bc18ec94-26e8-4614-8b3c-248b580e6cbb", "embedding": null, "metadata": {"page_label": "257", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "17337504-6eaa-4c84-9d8a-bb4ca713a4f5", "node_type": "4", "metadata": {"page_label": "257", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "fc453b986e8e3771214a61d2d43c5fd8427e1b78ef1f423220b90504a5163a68", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "257 | P a g e  \n \n \nEven time you run mvn clean install, it deletes target directory and packages from the local .m2 \nrepository and replaces it with the latest build files and packages. \nIf you want to skip the test during build, you can add the -Dmaven.test.skip=true parameter as \nshown below. \nmvn clean install -Dmaven.test.skip=true \nNow that you have understood how to build a java project using maven, let\u2019s look into the \nmaven lifecycle. Few commands we don\u2019t have to use in the CI pipelines. However, it is \ngood to know about the maven lifecycle commands and you can use them depending on your \nCI pipeline requirement. \nMaven Lifecycle Explained \nLet\u2019s take a look at each maven lifecycle phase in order. Each phase executes all the phases \nbefore it. For example, if you execute the third phase, one, two, and three get executed.  \n1. Maven Validate (mvn validate) \nmvn validate validates the maven project. It downloads all the required dependencies to the", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 975, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "dea4601f-32b0-4d92-953c-69bd68f61843": {"__data__": {"id_": "dea4601f-32b0-4d92-953c-69bd68f61843", "embedding": null, "metadata": {"page_label": "258", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4a2dae41-6db6-4a38-ba4a-baec9d4ab4cf", "node_type": "4", "metadata": {"page_label": "258", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "c5873744b5f0cac3ca9a212800c8a65df926d38577d3fbd0154205fb85bb403e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "258 | P a g e  \n \nlocal .m2 repository. \n2. Maven Compile (mvn compile) \nmvn compile compiles the java project. It runs validate first and then compiles the code. \n3. Maven Test (mvn test) \nmvn test command runs the unit test that is part of the code. You can test classes individually, \nmethods individually, or add patterns to run tests on all methods that match the pattern. \n4. Maven Package (mvn package) \nmvn package commands compile the code, test it and finally package it in the required format \n(jar or war) \n5. Maven Verify (mvn verify) \nmvn verify command runs all the phases explained before in order and runs checks on \nintegration tests and checkstyles if they are defined in the project. \n6. Maven Install (mvn install) \nmvn install command installs the packaged code in the local maven repository. \n7. Maven Deploy (mvn deploy) \nmvn deploy command, deploys the package to the remote maven repository. When you run \ndeploy, it first runs validate, compile, test, package, verify, install, and then finally deploys \nthe package to the remote maven repository. \nPossible Maven Build Errors \njava.lang.IllegalStateException: Unable to load cache item \nIf maven doesn\u2019t support the Java version, you will get the above error. \nTo rectify it, install the latest maven version that supports the installed Java version. \n \nIf you try to execute the maven command from the location where there is no pom.xml file,", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1425, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8eaf02fd-be5c-45ab-bb7d-006a389b5123": {"__data__": {"id_": "8eaf02fd-be5c-45ab-bb7d-006a389b5123", "embedding": null, "metadata": {"page_label": "259", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "67c7361c-2a01-4ab9-b72d-66766a606d1b", "node_type": "4", "metadata": {"page_label": "259", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "0d61fbbda0b102fa630d484f464cea1e77cbc3d0579de1c364a19ee7dbd69a95", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "259 | P a g e  \n \nyou will get the following error. \nThe goal you specified requires a project to execute but there is no POM in this directory \nTo rectify this, execute the maven command from the folder that has the pom.xml file. \nMaven Build FAQs \nDoes mvn package run tests? \nYes. By default, the mvn package command runs the test. However, you can add the flag -\nDmaven.test.skip to skip the tests. \nWhat does Maven test do? \nmvn test runs all the unit tests for the java project. \nConclusion \nAs a Devops engineer, it is very important to understand the java build process if you are \nworking on deploying java projects.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 629, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3f1d8d90-8697-4120-8528-91f1d30117e8": {"__data__": {"id_": "3f1d8d90-8697-4120-8528-91f1d30117e8", "embedding": null, "metadata": {"page_label": "260", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3e112cd4-9008-44b8-8412-a4576ecf12b5", "node_type": "4", "metadata": {"page_label": "260", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "8a49960c0a31900043f0257043edfe6a8ff0627184de1e60591301ab63650e49", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "260 | P a g e  \n \n     \n \n                           UNIT \u2013 V \nDatabases & Deployment \nFunctional dependency defines the relationship of two or more attributes, typically between  \nthe primary key and non-key attributes of another table. It is also defined by the relation of \none  attribute to another attribute in DBMS.  \nempId \u2192 { empName, skill, dependent, contract, project}, \u2192 Here, empId can determine or  \ndefines the values of fields empName, dependent, contract and employee project  \nUsername Tables:  \nuserName \u2192 dateCreate here if we can know the userName like we have email account if \nwe  know the email Id of user then there is possibility to find the date when account was \ncreated.   \nMultivalued Dependency:  \nMultivalency Dependency occurs in such a condition or time when two or more attributes in  \ntable are independent to each other but, both of them depend upon the third attributes.  \nEmployee Table:  \nThe attributes like empName, skill, dependent, contract, project all are independent of each  \nother means not depends on one another but depends upon empId example empName can  \ndetermine skill, or any other employee attribute because there can be or even more than one  \nemployee with same name or constraints.  \nempId->skill  empId-> contract   empId-> project   empId-> dependent  \nThese all of the columns is the multivalued dependency on the empId  \nUsername Table:  \nWe only have two attributes here, but there are no multiple attributes that are independent of  \neach other but rely solely on the third variable.  \nuserName \u2192 dateCreate here dateCreate is an attribute that depends or relate upon \nthe userName only dateCreate when there is not sufficient to find anything.  b) \nMinimal key is the minimum no of attributes which can find out other attributes of a table", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1810, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f900ad0e-5a1d-44c7-bba8-5a2b4527ffbf": {"__data__": {"id_": "f900ad0e-5a1d-44c7-bba8-5a2b4527ffbf", "embedding": null, "metadata": {"page_label": "261", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "877ec2e1-9385-459a-8d46-0d3fe278f76a", "node_type": "4", "metadata": {"page_label": "261", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "d4fad811a566cf5e4352c5eae03c9c6ed1ecd44caf4c881dd860b2efa42aa1b2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "261 | P a g e  \n \ni.e., a  primary key or the candidate key.  In the Context of Employee Table:  \nempId \u2192 { empName, skill, dependent, contract, project}  \nIn the Context of Username Table:  \nuserName \u2192 dateCreate  \nIn the Context of Subject Table:  \nConsider Subject table which has sub_Code, subName  sub_Code->subName  \nIn the Context of Enrollment Table:  \nConsidering the enrollment table which has the attributes like: enrollment Id, Name of  \nemployee, field in which employee enrolled and date  \nc)  \nWe have the following Employee and Username Tables:  \nIn Context of Employee Table:  \nEmployee table is not in normalize or the normal forms. Because the Attributes in it like: \nSkill,  project, contract and dependent attributes might have one or more values. According \nto  the 1NF principle every field must contain the atomic values if they don\u2019t have the atomic \nvalue.  There is need to decompose the table since the table should have the 1 value in each \nfield.   \nIn the Context of Username Table:  \nIt is normalizing one Since it has two fields[UserName and dateCreate] in which both have  \natomic values or data , is fully functional dependent, no transition dependency etc.   \nd) \nNormalization, Decomposition process will be done.  \nNormalization is a process or technique of organizing or collecting the data in database. It is  \nmainly done for two purposes: Eliminating the redundancy or even the useless data  \nIn 1st NF: \nEvery field must contain the single atomic value and the attribute like: skill, project, contract  \nand dependent attribute has one or more than the decompose table so that the each and every  \nfield has atomic value which will increase the number of tuples in the table name \n\u201cemployee\u201d.  \nIn the 2nd NF:", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1756, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ee24e8fa-63dc-48b8-8824-dc2573102674": {"__data__": {"id_": "ee24e8fa-63dc-48b8-8824-dc2573102674", "embedding": null, "metadata": {"page_label": "262", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ede089db-1b54-4574-90c4-89dea062f48b", "node_type": "4", "metadata": {"page_label": "262", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "4895b02b22ad3ed5aec5741f8d15a39a80b1308006e182862f5f46d6bdd99008", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "262 | P a g e  \n \nEach table should be at 1st NF.  \n\uf0b7 There should not be any functional dependency. So, in this case, after it is in 1st NF \ntable  is in 2nd NF Since the empId can find out all the attributes of the employees.  \nIn 3rd NF:  \n\uf0b7 Table should be at 2nd NF Form.  \n\uf0b7 There should not be any transitive dependency in the table in which the non-primitive  \nattribute can find another non-primitive attribute i.e., empName, skill, dependent,  \nproject is the non-primitive attribute and they cannot find the each other but the main  \nprime attribute can or able to find all of them.  \nIn BCNF:  \n\uf0b7 Table should be at 3rd NF.  \n\uf0b7 The LHS Side of attribute should have the candidate key or the super key. \u2022 So, In this \ncase empId \u2192 { empName, skill, dependent, contract, project}, The attribute  empId \nis a primary key and can find out all other attributes.  \nIn the 4th NF:  \nTable should be at BCNF Form.  \nThere should not be any multivalued Dependency.  \nSo, in current Employee Table context, Employee might contain the multivalued dependency  \nI.e.: skills, projects [0 or more], dependency [0 or more] and contract [1 or more]. So, there \nis  lots of multivalued attributes or dependency on the empId which might increase the no of  \nentries in the table which might increase the no of entries in the table after making it to \n1stNF.  \nIn the case of making the Employee table in 4th NF, it will decompose the employee table \ninto  following tables:  empId \u2192 { empName, skill, dependent, contract, project}  \nEmployeeSkils  \nempId, empName,  \nskill   \nEmployeeDependency  empId,  empName,  dependent  EmployeeContract  empId,  \nempName,  \ncontract  \nEmployeeProject  empId,  empName,  \nproject", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1715, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "207c5a1d-c24b-42be-889c-cd7e372c5f0a": {"__data__": {"id_": "207c5a1d-c24b-42be-889c-cd7e372c5f0a", "embedding": null, "metadata": {"page_label": "263", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8c3d4f5f-2679-4b4b-8018-519a4c2fc572", "node_type": "4", "metadata": {"page_label": "263", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "9baac51a47ab02d94faa9c7ebcde3d1f32803d3c397425978ca10025f5026000", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "263 | P a g e  \n \nThere is no need to change the Username Table since it is already on 4th NF. \nStructured Query Language \nSQL Tutorial \n \nSQL tutorial provides basic and advanced concepts of SQL. Our SQL tutorial is designed for \nboth beginners and professionals. \nSQL (Structured Query Language) is used to perform operations on the records stored in the \ndatabase, such as updating records, inserting records, deleting records, creating and \nmodifying database tables, views, etc. \nSQL is not a database system, but it is a query language. \nSuppose you want to perform the queries of SQL language on the stored data in the database. \nYou are required to install any database management system in your systems, for example, \nOracle, MySQL, MongoDB, PostgreSQL, SQL Server, DB2, etc. \nWhat is SQL? \nSQL is a short-form of the structured query language, and it is pronounced as S-Q-L or \nsometimes as See-Quell. \nThis database language is mainly designed for maintaining the data in relational database \nmanagement systems. It is a special tool used by data professionals for handling structured \ndata (data which is stored in the form of tables). It is also designed for stream processing in \nRDSMS. \nYou can easily create and manipulate the database, access and modify the table rows and \ncolumns, etc. This query language became the standard of ANSI in the year of 1986 and ISO \nin the year of 1987.  \nIf you want to get a job in the field of data science, then it is the most important query \nlanguage to learn. Big enterprises like Facebook, Instagram, and LinkedIn, use SQL for \nstoring the data in the back-end. \nWhy SQL? \nNowadays, SQL is widely used in data science and analytics. Following are the reasons \nwhich explain why it is widely used: \n\uf0b7 The basic use of SQL for data professionals and SQL users is to insert, update, and delete the \ndata from the relational database. \n\uf0b7 SQL allows the data professionals and users to retrieve the data from the relational database", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1988, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "64b53b74-9a7a-4bc0-9c20-26aba5609488": {"__data__": {"id_": "64b53b74-9a7a-4bc0-9c20-26aba5609488", "embedding": null, "metadata": {"page_label": "264", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f4586d3c-e242-406a-b269-e0ed8a38420c", "node_type": "4", "metadata": {"page_label": "264", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "a3f06ce0e7b2c66cb40f73bf9f750f17ec57c2cafb3a97d1f26c2c4e4cd8bd2e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "264 | P a g e  \n \nmanagement systems. \n\uf0b7 It also helps them to describe the structured data. \n\uf0b7 It allows SQL users to create, drop, and manipulate the database and its tables. \n\uf0b7 It also helps in creating the view, stored procedure, and functions in the relational database. \n\uf0b7 It allows you to define the data and modify that stored data in the relational database. \n\uf0b7 It also allows SQL users to set the permissions or constraints on table columns, views, and \nstored procedures. \nHistory of SQL \n\"A Relational Model of Data for Large Shared Data Banks\" was a paper which was published \nby the great computer scientist \"E.F. Codd\" in 1970. \nThe IBM researchers Raymond Boyce and Donald Chamberlin originally developed the \nSEQUEL (Structured English Query Language) after learning from the paper given by E.F. \nCodd. They both developed the SQL at the San Jose Research laboratory of IBM Corporation \nin 1970. \nAt the end of the 1970s, relational software Inc. developed their own first SQL using the \nconcepts of E.F. Codd, Raymond Boyce, and Donald Chamberlin. This SQL was totally \nbased on RDBMS. Relational Software Inc., which is now known as Oracle Corporation, \nintroduced the Oracle V2 in June 1979, which is the first implementation of SQL language. \nThis Oracle V2 version operates on VAX computers. \nProcess of SQL \nWhen we are executing the command of SQL on any Relational database management \nsystem, then the system automatically finds the best routine to carry out our request, and the \nSQL engine determines how to interpret that particular command. \nStructured Query Language contains the following four components in its process: \n\uf0b7 Query Dispatcher \n\uf0b7 Optimization Engines \n\uf0b7 Classic Query Engine \n\uf0b7 SQL Query Engine, etc. \nA classic query engine allows data professionals and users to maintain non-SQL queries. The \narchitecture of SQL is shown in the following diagram:", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1899, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3684b8ec-7fff-48c1-8eed-d8b0bd65eae9": {"__data__": {"id_": "3684b8ec-7fff-48c1-8eed-d8b0bd65eae9", "embedding": null, "metadata": {"page_label": "265", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c1200bc5-bc82-4044-aa10-d023e8b32c0c", "node_type": "4", "metadata": {"page_label": "265", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "048813a683ac5367dcc0a92f5d85b43c6263ed1f9f982ec0b81083df3f61f161", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "265 | P a g e  \n \n \nSome SQL Commands \nThe SQL commands help in creating and managing the database. The most common SQL \ncommands which are highly used are mentioned below: \n1. CREATE command \n2. UPDATE command \n3. DELETE command \n4. SELECT command \n5. DROP command \n6. INSERT command \nCREATE Command \nThis command helps in creating the new database, new table, table view, and other objects of \nthe database. \nUPDATE Command \nThis command helps in updating or changing the stored data in the database. \nDELETE Command \nThis command helps in removing or erasing the saved records from the database tables. It \nerases single or multiple tuples from the tables of the database. \nSELECT Command", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 695, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4d6fe5cb-c414-4a51-a213-d702f06dea54": {"__data__": {"id_": "4d6fe5cb-c414-4a51-a213-d702f06dea54", "embedding": null, "metadata": {"page_label": "266", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f7e41abb-cd1a-4be2-b76b-6f00e4f9020b", "node_type": "4", "metadata": {"page_label": "266", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "f578d1c86a084c8ec37c31de8bfae0843ea8184d7176fc73ac10553212894175", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "266 | P a g e  \n \nThis command helps in accessing the single or multiple rows from one or multiple tables of \nthe database. We can also use this command with the WHERE clause. \nDROP Command \nThis command helps in deleting the entire table, table view, and other objects from the \ndatabase. \nINSERT Command \nThis command helps in inserting the data or records into the database tables. We can easily \ninsert the records in single as well as multiple rows of the table. \nSQL vs No-SQL \n \nThe following table describes the differences between the SQL and NoSQL, which are \nnecessary to understand: \nSQL No-SQL \n1. SQL is a relational database management \nsystem. \n1. While No-SQL is a non-relational or distributed \ndatabase management system. \n2. The query language used in this database \nsystem is a structured query language. \n2. The query language used in the No-SQL database \nsystems is a non-declarative query language. \n3. The schema of SQL databases is predefined, \nfixed, and static. \n3. The schema of No-SQL databases is a dynamic \nschema for unstructured data. \n4. These databases are vertically scalable. 4. These databases are horizontally scalable. \n5. The database type of SQL is in the form of \ntables, i.e., in the form of rows and columns. \n5. The database type of No-SQL is in the form of \ndocuments, key-value, and graphs. \n6. It follows the ACID model. 6. It follows the BASE model.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1404, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7bfdce65-7757-4945-8c48-6a58196ee2a2": {"__data__": {"id_": "7bfdce65-7757-4945-8c48-6a58196ee2a2", "embedding": null, "metadata": {"page_label": "267", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6e8cea08-d2d1-4484-a8bd-d46984906905", "node_type": "4", "metadata": {"page_label": "267", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "5ecf38d5d6b028889b2a22e108b0f311fa296acce36c611be5462054a65315d4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "267 | P a g e  \n \n7. Complex queries are easily managed in the \nSQL database. 7. NoSQL databases cannot handle complex queries. \n8. This database is not the best choice for \nstoring hierarchical data. \n8. While No-SQL database is a perfect option for \nstoring hierarchical data. \n9. All SQL databases require object-relational \nmapping. \n9. Many No-SQL databases do not require object-\nrelational mapping. \n10. Gauges, CircleCI, Hootsuite, etc., are the \ntop enterprises that are using this query \nlanguage. \n10. Airbnb, Uber, and Kickstarter are the top \nenterprises that are using this query language. \n11. SQLite, Ms-SQL, Oracle, PostgreSQL, and \nMySQL are examples of SQL database \nsystems. \n11. Redis, MongoDB, Hbase, BigTable, CouchDB, \nand Cassandra are examples of NoSQL database \nsystems. \nAdvantages of SQL \nSQL provides various advantages which make it more popular in the field of data science. It \nis a perfect query language which allows data professionals and users to communicate with \nthe database. Following are the best advantages or benefits of Structured Query Language: \n1. No programming needed \nSQL does not require a large number of coding lines for managing the database systems. We \ncan easily access and maintain the database by using simple SQL syntactical rules. These \nsimple rules make the SQL user-friendly. \n2. High-Speed Query Processing \nA large amount of data is accessed quickly and efficiently from the database by using SQL \nqueries. Insertion, deletion, and updation operations on data are also performed in less time. \n3. Standardized Language \nSQL follows the long-established standards of ISO and ANSI, which offer a uniform \nplatform across the globe to all its users. \n4. Portability \nThe structured query language can be easily used in desktop computers, laptops, tablets, and \neven smartphones. It can also be used with other applications according to the user's \nrequirements. \n5. Interactive language \nWe can easily learn and understand the SQL language. We can also use this language for \ncommunicating with the database because it is a simple query language. This language is also", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 2136, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "17393d01-f2e6-44b5-956e-359bfa2ab4cd": {"__data__": {"id_": "17393d01-f2e6-44b5-956e-359bfa2ab4cd", "embedding": null, "metadata": {"page_label": "268", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1bceb46f-bd5e-4210-bff4-5a336c12dd99", "node_type": "4", "metadata": {"page_label": "268", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "ef13f16ba56e0618b77807f5b1875eef0ae63019f8ac267b63962fc3943adc70", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "268 | P a g e  \n \nused for receiving the answers to complex queries in a few seconds. \n6. More than one Data View \nThe SQL language also helps in making the multiple views of the database structure for the \ndifferent database users. \nDisadvantages of SQL \nWith the advantages of SQL, it also has some disadvantages, which are as follows: \n1. Cost \nThe operation cost of some SQL versions is high. That's why some programmers cannot use \nthe Structured Query Language. \n2. Interface is Complex \nAnother big disadvantage is that the interface of Structured query language is difficult, which \nmakes it difficult for SQL users to use and manage it. \n3. Partial Database control \nThe business rules are hidden. So, the data professionals and users who are using this query \nlanguage cannot have full database control. \nData persistence using Spring \nI'm used to using Spring Roo to generate my entities and having it handle injecting the \nentityManager as well as the persist and other methods via AspectJ classes. Now I'm trying to \nuse Spring Boot to do something simple that will write things to the database ... \n@Entity \n@Table(name = \"account\") \npublicclassAccount {  \n \ntransientEntityManagerentityManager; \n \n@Id \n@GeneratedValue \nprivateLong id; \n \n@Column(name = \"username\", nullable = false, unique = true) \nprivate String username; \n \n@Column(name = \"password\", nullable = false) \nprivate String password; \n \n  ... getters and setters \n \n@Transactional \npublicvoidpersist() {", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1487, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "50a6d0eb-773b-45a1-b0cc-fae01398f7be": {"__data__": {"id_": "50a6d0eb-773b-45a1-b0cc-fae01398f7be", "embedding": null, "metadata": {"page_label": "269", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "26b2855c-4e30-458a-94cb-9726c6195e0a", "node_type": "4", "metadata": {"page_label": "269", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "9d96b3bd2b9bf0fabda41d771a435de47a5aa1f5c3cd95153bb060422bd0c10f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "269 | P a g e  \n \nif (this.entityManager == null) this.entityManager = entityManager(); \nthis.entityManager.persist(this); \n  } \n \n@Transactional \npublic Account merge() { \nif (this.entityManager == null) this.entityManager = entityManager(); \nAccountmerged=this.entityManager.merge(this); \nthis.entityManager.flush(); \nreturn merged; \n  } \nWhen I'm calling persist or merge, entityManager is obviously null. \nI've also tried adding implements CrudRepository<Account, Long> to the Account class to see it'll \ngive me that functionality via a Default Implementation, but what I'm getting is simply empty \nclasses that needs to be filled in. \nI've had a look at the Spring Boot docs, they cover it very briefly omitting just enough detail \nto so that it's not obvious what I'm missing. \nI have an Application class that bootstraps the application: \n@Configuration \n@ComponentScan \n@EnableAutoConfiguration \npublicclassApplication { \n \npublicstaticvoidmain(String[] args)throws Exception { \nSpringApplication.run(Application.class, args); \n  } \n \n} \nMy properties file looks like this: \nspring.application.name: Test Application \n \nspring.datasource.url: jdbc:mysql://localhost/test \nspring.datasource.username=root \nspring.datasource.password= \nspring.datasource.driverClassName=com.mysql.jdbc.Driver \nspring.jpa.hibernate.ddl-auto=update \nThis database is automatically being created thanks to the ddl-auto=update property \nWhat is the correct way to persist entities in Spring Boot + JPA and if what I've done is \ncorrect so far, how do I \"autowire\" or auto-create the entityManager?", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 1587, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "97b80597-248a-4277-8438-0737a134c979": {"__data__": {"id_": "97b80597-248a-4277-8438-0737a134c979", "embedding": null, "metadata": {"page_label": "270", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "01a92845-c01a-4d1c-9a11-36cb2676104a", "node_type": "4", "metadata": {"page_label": "270", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "140ed8032b20f97c1592706340d102a68c442c8d59b7cd6f9fb4b6c04853c502", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "270 | P a g e  \n \nJDBC Agile development principles \nWhat are the Agile Principles? \nThere are 12 agile principles outlined in The Agile Manifesto in addition to the 4 agile \nvalues. These 12 principles for agile software development help establish the tenets of the \nagile mindset. They are not a set of rules for practicing agile, but a handful of principles to \nhelp instill agile thinking. \nBelow we will review each of the 12 agile principles and describe how they may be \npracticed. \nAgile Principle 1 \n\u201cOur highest priority is to satisfy the customer through early and continuous delivery of \nvaluable software.\u201d \nThe best ways to ensure you make customers happy while continuously delivering valuable \nsoftware are to ship early, iterate frequently, and listen to your market continually. \nUnlike traditional approaches to product development, which have notoriously long \ndevelopment cycles, agile principles encourage minimizing the time between ideation and \nlaunch. The idea is to get a working product in the hands of customers as soon as possible. \nDoing this successfully means product managers are able to quickly get a minimum viable \nproduct (MVP) out and into the world and use it to get feedback from real customers. This \nfeedback is then fed back into the product development process and used to inform future \nreleases. \n \nHow it looks in practice: \n\uf0b7 Product teams use minimum viable products and rapid experimentation to test hypothesis and \nvalidate ideas. \n\uf0b7 Frequent releases help fuel a continuous feedback cycle between customer and product. \n\uf0b7 Shipped and done are not the same thing. Instead of releasing a \u201cfinished\u201d product, iterations \ncontinue to make incremental improvements to product based on customer and market \nfeedback. \nAgile Principle 2 \n\u201cWelcome changing requirements, even late in development. Agile processes harness change \nfor the customer\u2019s competitive advantage.\u201d \nIn the world around us, change is the only constant. Agile principles and values support \nresponding to these changes rather than moving forward in spite of them. Previous \napproaches to product development were often change adverse; detailed, well-documented", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 2181, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2d2006e4-6739-4562-918d-112cf2f53516": {"__data__": {"id_": "2d2006e4-6739-4562-918d-112cf2f53516", "embedding": null, "metadata": {"page_label": "271", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fd4720c2-3eac-43e9-833b-c7ec1ed8a843", "node_type": "4", "metadata": {"page_label": "271", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "1778ea44f8c4be8bd451bfd00e3a0d8f43755064081a240da929958f75e2c7a8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "271 | P a g e  \n \nplans were made before development began and were set in stone regardless of new findings. \nAgile principles support observing changing markets, customer needs, and competitive \nthreats and changing course when necessary. \nHow it looks in practice:  \n\uf0b7 Product teams are guided by high-level strategic goals and perhaps even themes below those \ngoals. The product department\u2019s success is measured against progress toward those strategic \ngoals rather than by delivery of a predefined feature set. \n\uf0b7 Product constantly has its ear to the ground monitoring the market, customer feedback, and \nother factors which could influence product direction. When actionable insight is uncovered, \nplans are adjusted to better serve customer and business needs. \n\uf0b7 Product strategy and tactical plans are reviewed, adjusted, and shared on a regular cadence to \nreflect changes and new findings. As such, product needs to manage the expectations of \nexecutive stakeholders appropriately and ensure they understand the why behind changes. \nAgile Principle 3 \n\u201cDeliver working software frequently, from a couple of weeks to a couple of months, with a \npreference to the shorter timescale.\u201d \nAgile philosophy favors breaking a product\u2019s development into smaller components and \n\u201cshipping\u201d those components frequently. Using an agile approach, therefore\u200a\u2014\u200aand building \nin more frequent mini-releases of your product\u2014\u200acan speed the product\u2019s overall \ndevelopment. \nThis agile approach, with short-term development cycles of smaller portions of the product, \nresults in less time spent drafting and poring over the large amounts of documentation that \ncharacterizes Waterfall product development. More importantly, this frequent-release \napproach creates more opportunities for you and your teams to validate your product ideas \nand strategies from the qualified constituencies who see each new release. \nHow it looks in practice: \n\uf0b7 Agile development cycles, often called \u201csprints\u201d or \u201citerations\u201d break down product \ninitiatives into smaller chunks that can be completed in a set timeframe. Often this timeframe \nis between 2 and 4 weeks which truly is a sprint if you consider the marathon-like \ndevelopment cycles waterfall teams often follow. \n\uf0b7 Another popular alternative to agile sprints is continuous deployment. This method of \nshipping software frequently works less in terms of predetermined time boxes and more in \nterms of simply deciding what to do and doing it. \nAgile Principle 4 \n\u201cBusiness people and developers must work together daily throughout the project.\u201d \nCommunication is a critical component of any project or team\u2019s success, and agile principles \nessentially mandate that it\u2019s a daily event. It takes a village to raise a child they say, and that \napplies to product as well.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 2807, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4c646280-00b9-43c8-ab7b-13ab26b6b1be": {"__data__": {"id_": "4c646280-00b9-43c8-ab7b-13ab26b6b1be", "embedding": null, "metadata": {"page_label": "272", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "819e8f6c-1e5d-4f20-8c60-ae62273c124c", "node_type": "4", "metadata": {"page_label": "272", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "27306a833d7abdf68cef177ad1b7f17e32309abf6e78eb9576c1e831c5ce8bbe", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "272 | P a g e  \n \nA successful product requires insight from the business and technical sides of an organization \nwhich can only happen if these two teams work together consistently. Regular \ncommunication between business people and developers helps improve alignment across the \norganization by building trust and transparency. \nHow it looks in practice: \n\uf0b7 Cross-functional agile product development teams include product people. This means that \nproduct is represented on the development team and bridges the gap between technical and \nbusiness aspects of the product. \n\uf0b7 Daily update meetings, or standups, are one technique many agile shops use to put this \nprinciple in practice and keep everyone connected. \nAgile Principle 5 \n\u201cBuild projects around motivated individuals. Give them the environment and support they \nneed, and trust them to get the job done.\u201d \nA key part of the agile philosophy is empowering individuals and teams through trust and \nautonomy. The agile team needs to be carefully built to include the right people and skill sets \nto get the job done, and responsibilities need to be clearly defined before the beginning of a \nproject. Once the work has begun, however, there\u2019s no place in agile for micromanagement \nor hand holding. \nHow it looks in practice: \n\uf0b7 Product must clearly ensure engineering understands strategy and requirements before \ndevelopment starts. This means not only sharing user stories with the cross-functional team \nbut also the bigger picture outlined in the product roadmap. \n\uf0b7 Product is not responsible for explaining \u201chow\u201d something should be built. They need to \nshare what and why, but it\u2019s the delivery team\u2019s job to determine the how. Furthermore, \nduring sprints product does not micromanage outcome, instead they make themselves \navailable to answer questions and provide support as needed. \n \nAgile Principle 6 \n\u201cThe most efficient and effective method of conveying information to and within a \ndevelopment team is face-to-face conversation.\u201d \nWith so many distributed or remote development teams these days, this principle gets a bit of \ncritique. But at the root of it, effective communication with developers means getting these \nconversations out of Slack and email and favoring more human interaction (even if done by \nvideo conference calls). The overall objective behind this principle is to encourage product \npeople and developers to truly communicate in real time about the product, requirements, and \nthe high-level strategy driving those things.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 2525, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "992cabfc-f295-4ff4-930f-5773add28a36": {"__data__": {"id_": "992cabfc-f295-4ff4-930f-5773add28a36", "embedding": null, "metadata": {"page_label": "273", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c988fb12-5de4-4579-8e7d-d38710855bcd", "node_type": "4", "metadata": {"page_label": "273", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "333e04308d93eb5de387910b0d05700057a0aa562c828e2ed8abf91cff340e7e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "273 | P a g e  \n \nHow it looks in practice: \n\uf0b7 Daily standup meetings \n\uf0b7 Collaborative backlog grooming sessions \n\uf0b7 Sprint planning meetings \n\uf0b7 Frequent demos \n\uf0b7 Pair-programming \nAgile Principle 7 \n\u201cWorking software is the primary measure of progress.\u201d \nProponents of the agile philosophy are quick to remind us that we\u2019re in the business of \nbuilding software, and that\u2019s where our time should be spent. Perfect, detailed documentation \nis secondary to working software. This mentality pushes to get products to the market quickly \nrather than let documentation or an \u201cit\u2019s not done until it\u2019s perfect\u201d mentality become a \nbottleneck. The ultimate measure for success is a working product that customers love. \nHow it looks in practice: \n\uf0b7 Designing and releasing \u201cMinimum Viable Features\u201d rather than fully-developed feature sets \nmeans thinking first and foremost about the smallest things we can ship to start getting \ncustomer feedback and validate as we continue to build software. \n\uf0b7 A fail fast mentality means moving forward even in times of uncertainty and testing ideas \nrapidly. \n\uf0b7 Ship software often: a useful product now is better than a perfect one later. \nAgile Principle 8 \n\u201cAgile processes promote sustainable development. The sponsors, developers, and users \nshould be able to maintain a constant pace indefinitely.\u201d \nKeeping up with a demanding, rapid release schedule can be taxing on a team. Especially if \nexpectations are set too high. Agile principles encourage us to be mindful of this and set \nrealistic, clear expectations. The idea is to keep morale high and improve work-life balance to \nprevent burnout and turnover among members of cross functional teams. \nHow it looks in practice: \n\uf0b7 Before every sprint, careful consideration of the amount of work that can be committed to is \nmade. Development teams don\u2019t over promise on what they can and cannot deliver. Effort \nestimations are a common practice in setting output expectations for development teams. \n\uf0b7 Everyone agrees on what will get done during a sprint. Once a sprint has begun, no additional \ntasks are to be added except in rare cases. \n\uf0b7 Product managers should act as gatekeepers to reduce the noise from other stakeholders and \nto avoid squeezing in additional unplanned work during an ongoing sprint. \n\uf0b7 Product people should do their part in promoting a sense of psychological safety across the \ncross-functional team that encourages open communication and freely flowing feedback. \nAgile Principle 9", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 2505, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1e7cc2ad-be8c-4a18-b5cd-07378fbf234b": {"__data__": {"id_": "1e7cc2ad-be8c-4a18-b5cd-07378fbf234b", "embedding": null, "metadata": {"page_label": "274", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4525e89f-e9d9-4dc4-b1bf-8de9ee01e4bc", "node_type": "4", "metadata": {"page_label": "274", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "fb48b66a7f639b938039fda0c64a628c707e97d4e447c7ef465f2cf63868e78e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "274 | P a g e  \n \n\u201cContinuous attention to technical excellence and good design enhances agility.\u201d \nWhile the agile philosophy encourages shorter cycles and frequent releases, it also puts \nemphasis on the importance of keeping things neat and tidy so they don\u2019t cause problems in \nthe future. Product managers often forget about this aspect of development because they \nmostly don\u2019t spend their days wading through their products\u2019 codebases, but it is still of the \nutmost importance to them. \nHow it looks in practice: \n\uf0b7 The team needs to be cognizant of technical debt and the technical debt implications of any \nnew features or initiatives added to the backlog. Developers and product need to work \ntogether to understand if and when technical debt is acceptable. \n\uf0b7 On a regular basis, product will need to allocate development resources to refactoring efforts. \nRefactoring cannot be an afterthought, it needs to be an ongoing consideration. \nAgile Principle 10 \n\u201cSimplicity\u2014the art of maximizing the amount of work not done\u2014is essential.\u201d \nYou\u2019ve probably heard of the 80/20 rule\u2014the concept that you can usually get 80% of your \nintended results with just 20% of the work. Agile principles encourage thinking this way; \ndoing the things that can have the most impact. In a product management context this means \nhaving a laser sharp focus on organizational objectives and making some cutthroat \nprioritization decisions. Agile principles discourage building merely for the sake of building \nby emphasizing the importance of being strategic and building with purpose. \nHow it looks in practice: \n\uf0b7 Product managers need to make very focused product decisions and closely align product \nstrategy with organizational goals while being extremely picky about what user stories and \nfeatures actually make the cut. Using prioritization techniques to prioritize initiatives by effort \nand predicted impact is one way product teams can apply this agile principle to product \ndevelopment. \n\uf0b7 The short sprints that agile is characterized by present many opportunities for rapid testing \nand experimentation which can help reduce uncertainty around whether initiatives will truly \nhave the predicted impact. Using experiments to validate ideas before building them up to \nspec is a great way to weed out bad ideas and identify good ones. \nAgile Principle 11 \n\u201cThe best architectures, requirements, and designs emerge from self-organizing teams.\u201d \nIn traditional software development methodologies, you\u2019ll often see pyramid shaped teams \nwhere management makes key decisions for contributors. Agile principles suggest the use of \nself-organizing teams which work with a more \u201cflat\u201d management style where decisions are \nmade as a group rather than by a singular manager or management team. The concept ties \ninto agile\u2019s value of teams and interactions over processes and tools, and the intent behind the \nconcept is to empower teams to work together as they need to.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 2969, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "54ba19aa-3d69-4885-8d66-c55cf46c8c40": {"__data__": {"id_": "54ba19aa-3d69-4885-8d66-c55cf46c8c40", "embedding": null, "metadata": {"page_label": "275", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3d12bf2b-4759-469a-bb84-c4067f574ec0", "node_type": "4", "metadata": {"page_label": "275", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "6caf4dacb5791c09a164e6360a739705b708222d71263a088ca36a5ab8afa9f1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "275 | P a g e  \n \nHow it looks in practice: \n\uf0b7 Self-organizing teams are autonomous groups within the organization who take control and \nresponsibility over their respective projects and have ownership of those areas. Different \norganizations practice this principle differently. Spotify, for example uses \u201cproduct squads\u201d to \npractice this. \nLearn more about managing complex requirements in an agile world in the webinar below. \ndeploying applicationin Cloud \nAbout Deploying Oracle Agile PLM on Cloud  \nIf your organization wants to develop, deploy, and/or update parts of an Agile Product \nLifecycle Management (PLM) application in a faster, more agile way, instead of investing in \nbuilding on-premise implementations, then deploy Agile PLM on Oracle Cloud \nInfrastructure.  \nBy using Agile PLM on Oracle Cloud, replication from on-premise to cloud and cloud-to-cloud \nplatforms can easily be established and managed. You can also gain the benefits of faster \ninfrastructure updates, easier scaling up (and down), lower capital expenditure, and fewer personnel \ndedicated to basic infrastructure maintenance.  \nKey Workload Requirements \nThe architectures that Oracle provides help you address these requirements: \n\uf0b7 Designing for high availability and disaster recovery \n\uf0b7 Deploying a secure architecture. \n\uf0b7 Matching your high-performance and highly isolated network model. \n\uf0b7 Deploying your application and database environments into the cloud. \n\uf0b7 Maintaining visibility over costs and usage. \n\uf0b7 Monitoring infrastructure health and performance. \nArchitecture for Deploying Agile PLM on Cloud  \nYou can deploy Agile PLM in a single availability domain while ensuring high availability. \nUse this architecture when you want to ensure that your application is available even when an \napplication instance goes down. The other available application instances in the availability \ndomain continue to process the requests.  \nOracle Agile PLM can be deployed on cloud in a multi-tiered architecture. The architecture \nconsists of a virtual cloud network (VCN) with the bastion host, load balancer tier, \napplication tier, and database tier. The tiers are placed in separate subnets of the VCN in a \nsingle availability domain.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 2232, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8193573c-7e0f-4ebb-a54b-ad17a077b004": {"__data__": {"id_": "8193573c-7e0f-4ebb-a54b-ad17a077b004", "embedding": null, "metadata": {"page_label": "276", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "08407864-cf54-4209-b431-0e999e4820c1", "node_type": "4", "metadata": {"page_label": "276", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "131979625fd4210a571637e25572c3684bdfdd16038b2d91a195c081d8526a20", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "276 | P a g e  \n \n \nDescription of the illustration agile_plm_reference_architecture_high_availability.png \nThe Agile PLM application server can be set up in a standalone or clustered configuration. In \nthe image shown, a standalone server is considered, which has only one Oracle WebLogic \nServer instance. All client servers and users connect to the application server either directly", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 390, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "472c72c8-44fd-4a80-b565-9ae39b4f6c5e": {"__data__": {"id_": "472c72c8-44fd-4a80-b565-9ae39b4f6c5e", "embedding": null, "metadata": {"page_label": "277", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "476860e1-3068-4237-8576-1e0a10731874", "node_type": "4", "metadata": {"page_label": "277", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "b004c2ac9082134a5ebf552c1fcb13107c1d26c7e13e016ba199f26c0f890b38", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "277 | P a g e  \n \nor indirectly. To permit traffic to the web server from the internet, you can create load \nbalancers in the public subnet. You can access Oracle Cloud instances in the private subnet \nfrom your data centers by connecting through the dynamic routing gateway (DRG). The DRG \nis the gateway that connects your on premise network to your cloud network and you can \nenable communication between the two using VPN. You\u2019ll also have to update the route table \nto enable traffic to and from the DRG.  \nThe load balancer receives requests from users, and then routes these requests to the \napplication tier. You can allow for redundancy (and scalability) by configuring multiple \ninstances of the WebLogic server for the core application, Tomcat for File Manager, and \nRAC for database. You can augment redundancy through the use of fault domains so that you \ncan continue accessing the application even if an instance goes down. All instances are active \nand receive traffic from the load balancer. \nThere's a private Load Balancer between File Manager and Application Server to distribute \ntraffic to your application instances within a VCN. This service provides a primary and a \nstandby instance of the load balancer to ensure that if the primary load balancer becomes \nunavailable, the standby load balancer forwards the requests. The load balancer ensures that \nrequests are routed to the healthy application instances. If there\u2019s a problem with an \napplication instance, then the load balancer removes that instance and starts routing requests \nto the remaining healthy application instances.  \nThe database server stores all product content and system settings and is placed in the private \nsubnet. This database is accessed only by the application server. For performance and high \navailability requirements, Oracle recommends that you use two-node Oracle Real Application \nClusters (Oracle RAC) database systems in Oracle Cloud Infrastructure.  \nArchitecture of Agile PLM Disaster Recovery  \nOracle Cloud provides Agile PLM implementations that ensure you can build disaster \nrecovery (DR) into your deployment in unforeseen events that would require you to failover \nand still keep Agile PLM up and running.  \nThe following image illustrates the reference architecture for deploying Agile PLM in \nmultiple regions with high availability and disaster recovery.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 2383, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "04cd2e79-8089-4999-bbc2-06591e813a77": {"__data__": {"id_": "04cd2e79-8089-4999-bbc2-06591e813a77", "embedding": null, "metadata": {"page_label": "278", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7331707d-819b-4f58-8527-5c1f07c43899", "node_type": "4", "metadata": {"page_label": "278", "file_name": "fullstack_notes.pdf", "file_path": "C:\\Shashank\\Data Science\\LangChain\\gemma-rag-chatbot\\data\\fullstack_notes.pdf", "file_type": "application/pdf", "file_size": 6193141, "creation_date": "2025-07-24", "last_modified_date": "2025-07-24"}, "hash": "048e9500f33935a1cba5d98abb0ef4ca7b5dbbc15ae734656aa0f03de9862761", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "278 | P a g e  \n \n \nDescription of the illustration \nagile_plm_reference_architecture_high_availability_and_dr.png \nOracle Data Guard protects your database tier by replicating data across availability domains.", "mimetype": "text/plain", "start_char_idx": 4, "end_char_idx": 214, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}}}